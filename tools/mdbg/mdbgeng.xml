<?xml version="1.0"?>
<doc>
    <assembly>
        <name>mdbgeng</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.MDbgAppDomainCollection">
            <summary>
            Contains a collection of appdomains created in debugged program.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgAppDomainCollection.Count">
            <value>Number of appdomains in the collection</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgAppDomainCollection.Item(System.String)">
            <summary>
            Returns an appdomain from its name. 
            </summary>
            <value>
                Returns null if there is no appdomain with passed-in name.
            </value>
            <exception cref="T:Microsoft.Samples.Debugging.MdbgEngine.MDbgAmbiguousModuleNameException">
            Thrown when there are multiple appdomains with same name.
            </exception>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgAppDomainCollection.Item(System.Int32)">
            <summary>
            Allows for indexing into the Collection by appDomainNumber
            </summary>
            <param name="appDomainNumber">Which appDomainNumber to access.</param>
            <returns>The MDbgAppDomain with the given number.</returns>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgAppDomainCollection.Lookup(Microsoft.Samples.Debugging.CorDebug.CorAppDomain)">
            <summary>
            Locates MDbgAppDomain object from CorAppDomain object.
            </summary>
            <param name="appDomain">appDomain object from CorXXX layer.</param>
            <returns>MdbgAppDomain object</returns>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.MDbgAppDomain">
            <summary>
            Class represents an application domain in the debugged program.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgAppDomain.Process">
            <value>
                Process in which current appdomain exists.
            </value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgAppDomain.CorAppDomain">
            <value>
                CorXXX object for the AppDomain.
            </value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgAppDomain.Number">
            <summary>
            AppDomain logical number. 
            </summary>
            Appdomains in debugged process are assigned
            unique logical number. First created appdomain in the process gets logical
            number 0, second receives number 1, etc...
            Logical numbers are never reused in a process.
            <value>
                Logical number for the appdomain.
            </value>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.BreakpointCollectionChangedEventArgs">
            <summary>
            Event arguments for when a breakpoint is added or removed from a breakpoint collection
            </summary>
            <seealso cref="T:Microsoft.Samples.Debugging.MdbgEngine.MDbgBreakpointCollection"/>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.BreakpointCollectionChangedEventArgs.Breakpoint">
            <summary>
            Get the breakpoint that was added or removed.
            </summary>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.MDbgBreakpointCollection">
            <summary>
            Contains a collection of breakpoints created in debugged program.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgBreakpointCollection.Count">
            <value>
                Number of breakpoints in the collection
            </value>
        </member>
        <member name="E:Microsoft.Samples.Debugging.MdbgEngine.MDbgBreakpointCollection.AddBreakpoint">
            <summary>
            Fired when a breakpoint is added to this collection. Once this is fired, the breakpoint is in the collection
            and the Number property is initialized, 
            but the derived properties (including Location) are not yet set. Instead, the derived breakpoint will
            fire a ChangedBreakpoint event when it sets its properties.
            </summary>
        </member>
        <member name="E:Microsoft.Samples.Debugging.MdbgEngine.MDbgBreakpointCollection.RemoveBreakpoint">
            <summary>
            Fired when a breakpoint is removed from this collection. 
            Once this is fired, the breakpoint is no longer in the collection.
            </summary>
        </member>
        <member name="E:Microsoft.Samples.Debugging.MdbgEngine.MDbgBreakpointCollection.ChangedBreakpoint">
            <summary>
            Fired by a derived breakpoint to notify that it has changed its properties.
            
            </summary>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgBreakpointCollection.Item(System.Int32)">
            <summary>
            Returns an appdomain from its number. 
            </summary>
            <value>
                Returns null if the breakpoint doesn't exist.
            </value>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgBreakpointCollection.Lookup(Microsoft.Samples.Debugging.CorDebug.CorBreakpoint)">
            <summary>
            Locates MDbgBreakpoint object from the CorBreakpoint object.
            </summary>
            <param name="corBreakpoint">breakpoint object from CorXXX layer.</param>
            <returns>MDbgBreakpoint object</returns>
            <remarks>
                returns null if there the breakpoint was not known to the breakpoint
                collection.
            </remarks>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgBreakpointCollection.CreateBreakpoint(System.String,System.Int32)">
            <summary>
            Creates a breakpoint in debugged program based on source location.
            </summary>
            <param name="fileName">name of source file.</param>
            <param name="lineNumber">line nuber in the source file.</param>
            <returns>created breakpoint.</returns>
            <remarks>
                The breakpoint is created even if the location of the breakpoint
                cannot be determined at the time of the call. In such cases
                the breakpoint will be created as "unbound". 
                Once the code for the breakpoint will be loaded, the breakpoint
                will be automatically bound.
            </remarks>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgBreakpointCollection.CreateBreakpoint(System.String,System.String,System.String,System.Int32)">
            <summary>
            Creates a breakpoint in debugged program based on method and IL offset
            within the method.
            </summary>
            <param name="managedModule">name of the module</param>
            <param name="className">Name of the class for the module</param>
            <param name="methodName">Name of the method in the class</param>
            <param name="offset">IL offset from the beginning of the function. 
            Offset 0 means start of the function.
            </param>
            <returns>created breakpoint.</returns>
            <remarks>
                The breakpoint is created even if the location of the breakpoint
                cannot be determined at the time of the call. In such cases
                the breakpoint will be created as "unbound". 
                Once the code for the breakpoint will be loaded, the breakpoint
                will be automatically bound.
            </remarks>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgBreakpointCollection.CreateBreakpoint(Microsoft.Samples.Debugging.MdbgEngine.MDbgFunction,System.Int32)">
            <summary>
            Creates a breakpoint in the debugged program based on managed Function 
            and IL offset within the method.
            </summary>
            <param name="managedFunction">object representing loaded managed function.</param>
            <param name="offset">IL offset from the beginning of the function.
            Offset 0 menas start of the function.</param>
            <returns>created breakpoint.</returns>
            <remarks>
                Since this method takes MDbgFunction object, breakpoints can be only created on code that has 
                been loaded into the debugged application.
            </remarks>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgBreakpointCollection.CreateBreakpoint(System.Object)">
            <summary>
            Create breakpoint from in location object. 
            </summary>
            
            <param name="location">location of the breakpoint.</param>
            <returns>created breakpoint.</returns>
            <remarks>
            Location object must be retrieved from the breakpoint
            using Location property.
            <see cref="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgBreakpoint.Location"/>
            </remarks>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgBreakpointCollection.DeleteAll">
            <summary>
            Deletes all breakpoints in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgBreakpointCollection.NotifyChanged(Microsoft.Samples.Debugging.MdbgEngine.MDbgBreakpoint)">
            <summary>
            Fire the ChangedBreakpoint event for the given breakpoint.
            </summary>
            <param name="breakpoint">Breakpoint that has changed</param>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.MDbgBreakpoint">
            <summary>
            Class representing a breakpoint in the debugged program.
            </summary>
            <remarks>
            This class doesn't have any public constructor. To create a new breakpoint use
            CreateBreakpoint methods on MDbgBreakpoint collection.
            <see cref="T:Microsoft.Samples.Debugging.MdbgEngine.MDbgBreakpointCollection"/>
            </remarks>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgBreakpoint.NotifyChanged">
            <summary>
            Notify that this breakpoint has change properties. 
            This will cause the NotifyChange event to fire on the BreakpointCollection
            </summary>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgBreakpoint.Enabled">
            <summary>
            Gets or sets if the breakpoint is enabled.
            </summary>
            <value>
            Sets or gets value showing if the breakpoint is enabled or not.
            </value>
            <remarks>
                When breakpoint is not enabled, it won't be hit.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Throws an InvalidOperationException if the breakpoint is not yet bound and therefore cannot 
            be enabled.
            </exception>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgBreakpoint.IsBound">
            <summary>
            Gets or sets if the breakpoint is bound.
            </summary>
            <value>
                Is true if the breakpoint has been bound. Bound breakpoints
                are breakpoints for which a code that they should break in 
                has already been loaded into the process.
            </value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgBreakpoint.CorBreakpoints">
            <summary>
            Breakpoint objects representing current breakpoint.
            </summary>
            <remarks>
                The returned value is a collection of CorXXX objects representing
                different breakpoints. If the code has been loaded into multiple
                appdomains than the breakpoints.
            </remarks>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgBreakpoint.CorBreakpoint">
            <summary>
            Returns CorBreakpoint object.
            </summary>
            If the breakpoint is represented by more than one occurance of
            breakpoint object, only the first instance is returned.
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgBreakpoint.Number">
            <summary>
            Breakpoint logical number. Breakpoints in debugged process are assigned
            unique logical number. First created breakpoint in the process gets logical
            number 0, second receives number 1, etc...
            Logical numbers are never reused in a process.
            </summary>
            <value>
                Logical number for the breakpoint.
            </value>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgBreakpoint.Delete">
            <summary>
            Deletes the breakpoint.
            </summary>
            Breakpoint is also removed from the breakpoint list.
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgBreakpoint.Location">
            <summary>
            Gets the location of the breakpoint.
            </summary>
            <value>
            Returns an object that represents a location of the breakpoint. The breakpoint can be
            re-created in different debugging sessions by calling CreateBreakpoint and passing in
            the location object.
            </value>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgBreakpoint.ToString">
            <summary>
            Obtains a string representation of this instance.
            </summary>
            <returns>
                The friendly name of the breakpoint.
            </returns>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgBreakpoint.BindToModule(Microsoft.Samples.Debugging.MdbgEngine.MDbgModule)">
            <summary>
            Function tries to bind a breakpoint to the specified module.
            </summary>
            <param name="managedModule">A module the breakpoint should be bound to.</param>
            <returns>true if breakpoint was successfully bound</returns>
            <remarks>
                This function is called by breakpoint manager for every brekapoint whenever a new module
                gets loaded into the debugged process. 
            </remarks>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgBreakpoint.OnModuleUnloaded(Microsoft.Samples.Debugging.MdbgEngine.MDbgModule)">
            <summary>
            Called by the breakpoint manager everytime a managed module unloads
            </summary>
            <param name="module">The module which is being unloaded</param>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgBreakpoint.Bind">
            <summary>
            Binds the breakpoint.
            </summary>
            <returns>true on success, else false.</returns>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.IBreakpointBySourceLine">
            <summary>
            Interface for querying properties of the MdbgBreakpoint object.
            </summary>
            <remarks>
            If the object supports it, the MdbgBreakpoint.Location can be cast to this interface
            to query breakpoint location by source line.
            <see cref="T:Microsoft.Samples.Debugging.MdbgEngine.MDbgBreakpointCollection"/>
            </remarks>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.IBreakpointBySourceLine.FileName">
            <summary>
            Gets the file name where breakpoint has been set.
            </summary>
            <value>
            Returns a file name of the file on which the breakpoint has been set.
            </value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.IBreakpointBySourceLine.LineNumber">
            <summary>
            Gets the location of the breakpoint within the source file.
            </summary>
            <value>
            Returns the line within a file at which the breakpoint is set.
            </value>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.IBreakpointByFunctionName">
            <summary>
            Interface for querying properties of the MdbgBreakpoint object.
            </summary>
            <remarks>
            If the object supports it, the MdbgBreakpoint.Location can be cast to this interface
            to query breakpoint location by function on which it was set.
            <see cref="T:Microsoft.Samples.Debugging.MdbgEngine.MDbgBreakpointCollection"/>
            </remarks>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.IBreakpointByFunctionName.ModuleName">
            <summary>
            Gets the name of the module in which breakpoint has been set.
            </summary>
            <value>
            Returns a module name in which breakpoint is located.
            </value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.IBreakpointByFunctionName.ClassName">
            <summary>
            Gets the name of the class in which breakpoint has been set.
            </summary>
            <value>
            Returns a class name of method in which breakpoint is located.
            </value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.IBreakpointByFunctionName.MethodName">
            <summary>
            Gets the name of the method in which breakpoint has been set.
            </summary>
            <value>
            Returns a method name where breakpoint is located.
            </value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.IBreakpointByFunctionName.ILOffset">
            <summary>
            Gets the IL offset of breakpoint location.
            </summary>
            <value>
            Returns an offset of IL instruction where where breakpoint is located.
            </value>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.ISequencePointResolver">
            <summary>
            Interface used for resolution of breakpoint location.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.ISequencePointResolver.ResolveLocation(Microsoft.Samples.Debugging.MdbgEngine.MDbgFunctionBreakpoint,Microsoft.Samples.Debugging.MdbgEngine.MDbgModule,Microsoft.Samples.Debugging.MdbgEngine.MDbgFunction@,System.Int32@)">
            <summary>
            Function tries to resolve the breakpoint from breakpoint description.
            </summary>
            <param name="functionBreakpoint">A breakpoint object.</param>
            <param name="managedModule">A module that the breakpoint should be resolved at.</param>
            <param name="managedFunction">A function that is resolved from the breakpoint description.</param>
            <param name="ilOffset">An il offset within a function resolved from the breakpoint description.</param>
            <returns>true if breakpoint was successfully resolved</returns>
            <remarks>
                Resolved is usually called for every loaded module.
            </remarks>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.BreakpointLineNumberLocation">
            <summary>
            Class represents a location of breakpoint identified by file name and line number.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.BreakpointLineNumberLocation.#ctor(System.String,System.Int32)">
            <summary>
            Constructs new BreakpointLineNumberLocation object.
            </summary>
            <param name="file">A name of the file where the breakpoint has been set.</param>
            <param name="lineNumber">A line number within a file.</param>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.BreakpointLineNumberLocation.ResolveLocation(Microsoft.Samples.Debugging.MdbgEngine.MDbgFunctionBreakpoint,Microsoft.Samples.Debugging.MdbgEngine.MDbgModule,Microsoft.Samples.Debugging.MdbgEngine.MDbgFunction@,System.Int32@)">
            <summary>
            Function tries to resolve the breakpoint from breakpoint description.
            </summary>
            <param name="functionBreakpoint">A breakpoint object.</param>
            <param name="managedModule">A module that the breakpoint should be resolved at.</param>
            <param name="managedFunction">A function that is resolved from the breakpoint description.</param>
            <param name="ILoffset">An il offset within a function resolved from the breakpoint description.</param>
            <returns>true if breakpoint was successfully resolved</returns>
            <remarks>
                Resolved is usually called for every loaded module.
            </remarks>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.BreakpointLineNumberLocation.ToString">
            <summary>
            Obtains a string representation of this instance.
            </summary>
            <returns>
                The friendly name of the breakpoint.
            </returns>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.BreakpointLineNumberLocation.FileName">
            <value>
                File where the breakpoint is defined.
            </value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.BreakpointLineNumberLocation.LineNumber">
            <value>
                Line where the breakpoint is defined.
            </value>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.BreakpointFunctionLocation">
            <summary>
            This class represents a location of the function breakpoint.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.BreakpointFunctionLocation.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            Constructs new BreakpointFunctionLocation object.
            </summary>
            <param name="moduleName">A name of the module.</param>
            <param name="className">A name of class.</param>
            <param name="methodName">A name of method.</param>
            <param name="ilOffset">An il offset within a method description.</param>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.BreakpointFunctionLocation.ResolveLocation(Microsoft.Samples.Debugging.MdbgEngine.MDbgFunctionBreakpoint,Microsoft.Samples.Debugging.MdbgEngine.MDbgModule,Microsoft.Samples.Debugging.MdbgEngine.MDbgFunction@,System.Int32@)">
            <summary>
            Function tries to resolve the breakpoint from breakpoint description.
            </summary>
            <param name="functionBreakpoint">A breakpoint object.</param>
            <param name="managedModule">A module that the breakpoint should be resolved at.</param>
            <param name="managedFunction">A function that is resolved from the breakpoint description.</param>
            <param name="ilOffset">An il offset within a function resolved from the breakpoint description.</param>
            <returns>true if breakpoint was successfully resolved</returns>
            <remarks>
                Resolved is usually called for every loaded module.
            </remarks>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.BreakpointFunctionLocation.ToString">
            <summary>
            Obtains a string representation of this instance.
            </summary>
            <returns>
                The friendly name of the breakpoint.
            </returns>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.BreakpointFunctionLocation.ModuleName">
            <value>
                Name of the module.
            </value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.BreakpointFunctionLocation.ClassName">
            <value>
                Name of the class.
            </value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.BreakpointFunctionLocation.MethodName">
            <value>
                Name of the method.
            </value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.BreakpointFunctionLocation.ILOffset">
            <value>
                IL offset within the method.
            </value>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.BreakpointFunctionToken">
            <summary>
            This class represents a location of the function breakpoint. The location is specified as token and IL
            offset.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.BreakpointFunctionToken.#ctor(Microsoft.Samples.Debugging.MdbgEngine.MDbgFunction,System.Int32)">
            <summary>
            Constructs new BreakpointFunctionToken object.
            </summary>
            <param name="managedFunction">A function breakpoint is created at.</param>
            <param name="ilOffset">An il offset within a method description.</param>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.BreakpointFunctionToken.ResolveLocation(Microsoft.Samples.Debugging.MdbgEngine.MDbgFunctionBreakpoint,Microsoft.Samples.Debugging.MdbgEngine.MDbgModule,Microsoft.Samples.Debugging.MdbgEngine.MDbgFunction@,System.Int32@)">
            <summary>
            Function tries to resolve the breakpoint from breakpoint description.
            </summary>
            <param name="functionBreakpoint">A breakpoint object.</param>
            <param name="managedModule">A module that the breakpoint should be resolved at.</param>
            <param name="managedFunction">A function that is resolved from the breakpoint description.</param>
            <param name="ilOffset">An il offset within a function resolved from the breakpoint description.</param>
            <returns>true if breakpoint was successfully resolved</returns>
            <remarks>
                Resolved is usually called for every loaded module.
            </remarks>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.BreakpointFunctionToken.ToString">
            <summary>
            Obtains a string representation of this instance.
            </summary>
            <returns>
                The friendly name of the breakpoint.
            </returns>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.MDbgFunctionBreakpoint">
            <summary>
            Class representing a breakpoint at an IL offset in the debugged program.
            </summary>
            <remarks>
            This can be subclassed to provide specific additional logic on the breakpoints (such as a conditional breakpoint or hit count)
            This also includes all source-level breakpoints because all source lines should map to some IL offset.
            This does not include breakpoints at native-offsets.
            <see cref="T:Microsoft.Samples.Debugging.MdbgEngine.MDbgBreakpointCollection"/>
            </remarks>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgFunctionBreakpoint.#ctor(Microsoft.Samples.Debugging.MdbgEngine.MDbgBreakpointCollection,Microsoft.Samples.Debugging.MdbgEngine.ISequencePointResolver)">
            <summary>
            Constructs a new breakoint in the debugged process.
            </summary>
            <param name="breakpointCollection">A collection that holds programs breakpoints.</param>
            <param name="location">An object that is capable of resolving breakpoint location.</param>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgFunctionBreakpoint.CorBreakpoints">
            <summary>
            Breakpoint objects representing current breakpoint.
            </summary>
            <remarks>
                The returned value is a collection of CorXXX objects representing
                different breakpoints. If the code has been loaded into multiple
                appdomains than the breakpoints.
            </remarks>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgFunctionBreakpoint.CorBreakpoint">
            <summary>
            Returns CorBreakpoint object.
            </summary>
            If the breakpoint is represented by more than one occurance of
            breakpoint object, only the first instance is returned.
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgFunctionBreakpoint.Enabled">
            <summary>
            Gets or sets if the breakpoint is enabled.
            </summary>
            <value>
            Sets or gets value showing if the breakpoint is enabled or not.
            </value>
            <remarks>
                When breakpoint is not enabled, it won't be hit.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Throws an InvalidOperationException if the breakpoint is not yet bound and therefore cannot 
            be enabled.
            </exception>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgFunctionBreakpoint.IsBound">
            <summary>
            Gets or sets if the breakpoint is bound.
            </summary>
            <value>
                Is true if the breakpoint has been bound. Bound breakpoints
                are breakpoints for which a code that they should break in 
                has already been loaded into the process.
            </value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgFunctionBreakpoint.Location">
            <value>
                Returns the location of the breakpoint.
            </value>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgFunctionBreakpoint.BindToModule(Microsoft.Samples.Debugging.MdbgEngine.MDbgModule)">
            <summary>
            Function tries to bind a breakpoint to the specified module.
            </summary>
            <param name="managedModule">A module the breakpoint should be bound to.</param>
            <returns>true if breakpoint was successfully bound or false if it failed or was already bound.</returns>
            <remarks>
                This function is called by breakpoint manager for every brekapoint whenever a new module
                gets loaded into the debugged process or whenever a dynamic module loads a new class
                or new symbols. This adds any missing bindings, but will not duplicate any that already exist.
            </remarks>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgFunctionBreakpoint.OnModuleUnloaded(Microsoft.Samples.Debugging.MdbgEngine.MDbgModule)">
            <summary>
            Event handler for a module unload
            </summary>
            <param name="module">Module that is being unloaded</param>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgFunctionBreakpoint.Bind">
            <summary>
            Binds the breakpoint.
            </summary>
            <returns>true on success, else false.</returns>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgFunctionBreakpoint.OnHitHandler(Microsoft.Samples.Debugging.MdbgEngine.CustomBreakpointEventArgs)">
            <summary> Callback invoked when a breakpoint is hit. </summary>
            <returns> Return null to continue running past this breakpoint. Returns a non-null object
            to use as stop-reason to stop the process. </returns>
            <remarks> Derived classes can override this callback. This is fired during a raw debug managed 
            debug event (directly from ICorDebugManagedCallback) and so the implementor can only do inspection
            operations. It can't resume the process (return null instead of a stop-reason to do that), and it
            certainly can't expect any other debuge events to come in. 
            For example, DON'T do soemthing like setup a func-eval, continue the process, and wait for the 
            eval complete event.
            </remarks>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgFunctionBreakpoint.ToString">
            <summary>
            Returns a human-readable representation of the breakpoint.
            </summary>
            <returns>The name is in mdbg's format as displayed in mdbg's 'break' command.</returns>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.MDbgDebuggerVarCollection">
            <summary>
            This represents a Collection of MDbg Debugger Variables.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgDebuggerVarCollection.Item(System.String)">
            <summary>
            Indexer allowing the Variable Collection to be accessed using array syntax.
            </summary>
            <param name="varName">The variable name that you want to access.</param>
            <returns>The variable.</returns>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgDebuggerVarCollection.HaveVariable(System.String)">
            <summary>
            Indicates if a variable name is in the collection.
            </summary>
            <param name="variableName">The variable name to look up.</param>
            <returns>Returns true if the variable is in the collection and false if it is not.</returns>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgDebuggerVarCollection.DeleteVariable(System.String)">
            <summary>
            Removes a variable from the collection.
            </summary>
            <param name="variableName">The name of the variable to remove.</param>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgDebuggerVarCollection.SetEvalResult(Microsoft.Samples.Debugging.CorDebug.CorValue)">
            <summary>
            Sets the EvalResult to the specified CorValue
            </summary>
            <param name="evalValue">What value to set the Result to.</param>
            <returns>Returns true on success else false.</returns>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.MDbgDebuggerVar">
            <summary>
            MDbg Debugger Variable class.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgDebuggerVar.Value">
            <summary>
            Gets or sets the CorValue.  Can be either CorReferenceValue or CorHeapValue
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgDebuggerVar.CorValue">
            <summary>
            Get the CorValue for Variable.
            </summary>
            <value>The CorValue.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgDebuggerVar.Name">
            <summary>
            Get the Name for the Variable.
            </summary>
            <value>The Name.</value>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.MDbgOptions">
            <summary>
            MDbgOptions class.  This controls when the debugger should stop.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgOptions.StopOnModuleLoad">
            <summary>
            Gets or sets if it should stop when modules are loaded.
            </summary>
            <value>true if it should stop, else false.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgOptions.StopOnClassLoad">
            <summary>
            Gets or sets if it should stop when classes are loaded.
            </summary>
            <value>true if it should stop, else false.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgOptions.StopOnAssemblyLoad">
            <summary>
            Gets or sets if it should stop when assemblies are loaded.
            </summary>
            <value>true if it should stop, else false.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgOptions.StopOnAssemblyUnload">
            <summary>
            Gets or sets if it should stop when assemblies are unloaded.
            </summary>
            <value>true if it should stop, else false.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgOptions.StopOnNewThread">
            <summary>
            Gets or sets if it should stop when new threads are created.
            </summary>
            <value>true if it should stop, else false.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgOptions.StopOnException">
            <summary>
            Gets or sets if it should stop on Exception callbacks.
            </summary>
            <value>true if it should stop, else false.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgOptions.StopOnUnhandledException">
            <summary>
            Gets or sets if it should stop on Exception callbacks.
            </summary>
            <value>true if it should stop, else false.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgOptions.StopOnExceptionEnhanced">
            <summary>
            Gets or sets if it should stop on Enhanced Exception callbacks.
            </summary>
            <value>true if it should stop, else false.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgOptions.StopOnLogMessage">
            <summary>
            Gets or sets if it should stop when messages are logged.
            You must still enable log messages per process by calling CorProcess.EnableLogMessage(true)
            </summary>
            <value>true if it should stop, else false.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgOptions.SymbolPath">
            <summary>
            Gets or sets the Symbol path.
            </summary>
            <value>The Symbol path.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgOptions.CreateProcessWithNewConsole">
            <summary>
            Gets or sets if processes are created with a new console.
            </summary>
            <value>Default is false.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgOptions.ShowAddresses">
            <summary>
            Gets or sets if memory addresses are displayed.
            Normally of little value in pure managed debugging, and causes
            unpredictable output for automated testing.
            </summary>
            <value>Default is false.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgOptions.ShowFullPaths">
            <summary>
            Gets or sets if full paths are displayed in stack traces.
            </summary>
            <value>Default is true.</value>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.MdbgVersionPolicy">
            <summary>
            A default implementation of run/attach versioning policy
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MdbgVersionPolicy.GetDefaultLaunchVersion(System.String)">
            <summary>
            Given the full path to a binary, determines a default CLR runtime version which
            should be used to debug it.
            </summary>
            <param name="filePath">The full path to a binary.</param>
            <returns>The CLR version string to use for debugging; null if unknown.</returns>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MdbgVersionPolicy.GetDefaultRuntimeForFile(System.String)">
            <summary>
            Given the full path to a binary, finds the CLR runtime version which
            it will bind to.
            </summary>
            <param name="filePath">The full path to a binary.</param>
            <returns>The version string that the binary will bind to; null if unknown.</returns>
            <remarks>If ICLRMetaHostPolicy can be asked, it is used. Otherwise
            fall back to mscoree!GetRequestedRuntimeVersion.</remarks>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MdbgVersionPolicy.GetDefaultAttachVersion(System.Int32)">
            <summary>
            Returns the version of the runtime to debug in a process
            we are attaching to, assuming we can only pick one
            </summary>
            <param name="processId">The process to attach to</param>
            <returns>The version of the runtime to debug, or null if the policy can't decide</returns>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MdbgVersionPolicy.GetBinaryPathFromPid(System.Int32)">
            <summary>
            Attempts to retrieve the path to the binary from a running process
            Returns null on failure
            </summary>
            <param name="processId">The process to get the binary for</param>
            <returns>The path to the primary executable or null if it could not be determined</returns>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.StackWalkingFrameFactoryProvider">
            <summary>
            A delegate that returns a default implementation for stack walking frame factory.
            </summary>
            <returns>Frame factory used for newly created processes.</returns>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.MDbgEngine">
            <summary>
            The MDbgEngine class.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgEngine.#ctor">
            <summary>
            Initializes a new instance of the MDbgEngine class.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgEngine.RegisterDefaultStackWalkingFrameFactoryProvider(Microsoft.Samples.Debugging.MdbgEngine.StackWalkingFrameFactoryProvider,System.Boolean)">
            <summary>
            Function that extensions can call to register a FrameFactory used for all new processes
            </summary>
            <param name="provider">A delegate that creates a new FrameFactory</param>
            <param name="updateExistingProcesses">If set, all currently debugged programs will be refreshed with new FrameFactory
            from the supplied provider.</param>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgEngine.CreateProcess(System.String,System.String,Microsoft.Samples.Debugging.MdbgEngine.DebugModeFlag,System.String)">
            <summary>
            creates a new debugged process.
            </summary>
            <param name="commandLine">The command to run.</param>
            <param name="commandArguments">The arguments for the command.</param>
            <param name="debugMode">The debug mode to run with.</param>
            <param name="deeVersion">The version of debugging interfaces that should be used for
              debugging of the started program. If this value is null, the default (latest) version
              of interface is used.
            </param>
            <returns>The resulting MDbgProcess.</returns>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgEngine.Attach(System.Int32)">
            <summary>
            OBSOLETE
            Attach to a process with the given Process ID
            </summary>
            <param name="processId">The Process ID to attach to.</param>
            <returns>The resulting MDbgProcess.</returns>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgEngine.Attach(System.Int32,System.String)">
            <summary>
            Attach to a process with the given Process ID
            Only debug the specified CLR version; all others are ignored.
            </summary>
            <param name="processId">The Process ID to attach to.</param>
            <param name="version">The version string for the CLR instance to debug.</param>
            <returns>The resulting MDbgProcess.</returns>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgEngine.Attach(System.Int32,Microsoft.Samples.Debugging.Native.SafeWin32Handle,System.String)">
            <summary>
            Attach to a process with the given Process ID
            Only debug the specified CLR version; all others are ignored.
            </summary>
            <param name="processId">The Process ID to attach to.</param>
            <param name="attachContinuationEvent">A OS event handle which must be set to unblock the debuggee
            when first continuing from attach</param>
            <param name="version">The version string for the CLR instance to debug.</param>
            <returns>The resulting MDbgProcess.</returns>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgEngine.Processes">
            <summary>
            Gets the MDbgProcessCollection.
            </summary>
            <value>The MDbgProcessCollection.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgEngine.Options">
            <summary>
            Gets the current MDbgOptions.
            </summary>
            <value>The MDbgOptions.</value>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.MDbgException">
            <summary>
            MDbgException class.  Represents errors that occur in mdbg.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgException.#ctor">
            <summary>
            Initializes a new instance of the MDbgException.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MDbgException with the specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the MDbgException with the specified error message and inner Exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the MDbgException class with serialized data. 
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.MDbgSpecialSourcePositionException">
            <summary>
            MDbgSpecialSourcePositionException class.  Represents errors that occur because the current source position is special.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgSpecialSourcePositionException.#ctor">
            <summary>
            Initializes a new instance of the MDbgSpecialSourcePositionException.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgSpecialSourcePositionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MDbgSpecialSourcePositionException with the specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgSpecialSourcePositionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the MDbgSpecialSourcePositionException with the specified error message and inner Exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgSpecialSourcePositionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the MDbgSpecialSourcePositionException class with serialized data. 
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.MDbgNoCurrentFrameException">
            <summary>
            MDbgNoCurrentFrameException class.  Represents errors that occur because there is no current frame.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgNoCurrentFrameException.#ctor">
            <summary>
            Initializes a new instance of the MDbgNoCurrentFrameException.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgNoCurrentFrameException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the MDbgNoCurrentFrameException with the specified inner Exception.
            </summary>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgNoCurrentFrameException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MDbgNoCurrentFrameException with the specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgNoCurrentFrameException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the MDbgNoCurrentFrameException with the specified error message and inner Exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgNoCurrentFrameException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the MDbgNoCurrentFrameException class with serialized data. 
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.MDbgNoActiveInstanceException">
            <summary>
            MDbgNoActiveInstanceException class.  Represents errors that occur because there is no active instance.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgNoActiveInstanceException.#ctor">
            <summary>
            Initializes a new instance of the MDbgNoActiveInstanceException.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgNoActiveInstanceException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MDbgNoActiveInstanceException with the specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgNoActiveInstanceException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the MDbgNoActiveInstanceException with the specified error message and inner Exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgNoActiveInstanceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the MDbgNoActiveInstanceException class with serialized data. 
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.MDbgValueException">
            <summary>
            MDbgValueException class.  Represents errors that occur because a value is bad.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgValueException.#ctor">
            <summary>
            Initializes a new instance of the MDbgValueException.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgValueException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MDbgValueException with the specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgValueException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the MDbgValueException with the specified error message and inner Exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgValueException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the MDbgValueException class with serialized data. 
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.MDbgInvalidArgumentException">
            <summary>
            MDbgInvalidArgumentException class.  Represents errors that occur because an argument is invalid.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgInvalidArgumentException.#ctor">
            <summary>
            Initializes a new instance of the MDbgInvalidArgumentException.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgInvalidArgumentException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MDbgInvalidArgumentException with the specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgInvalidArgumentException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the MDbgInvalidArgumentException with the specified error message and inner Exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgInvalidArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the MDbgInvalidArgumentException class with serialized data. 
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.MDbgAmbiguousModuleNameException">
            <summary>
            MDbgAmbiguousModuleNameException class.  Represents errors that occur because a module name is ambiguous.  For example if you had mscorlib.exe and mscorlib.dll and asked for mscorlib.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgAmbiguousModuleNameException.#ctor">
            <summary>
            Initializes a new instance of the MDbgAmbiguousModuleNameException.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgAmbiguousModuleNameException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MDbgAmbiguousModuleNameException with the specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgAmbiguousModuleNameException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the MDbgAmbiguousModuleNameException with the specified error message and inner Exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgAmbiguousModuleNameException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the MDbgAmbiguousModuleNameException class with serialized data. 
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.MDbgValueWrongTypeException">
            <summary>
            MDbgValueWrongTypeException class.  Represents errors that occur because a value is of the wrong type.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgValueWrongTypeException.#ctor">
            <summary>
            Initializes a new instance of the MDbgValueWrongTypeException.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgValueWrongTypeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MDbgValueWrongTypeException with the specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgValueWrongTypeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the MDbgValueWrongTypeException with the specified error message and inner Exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgValueWrongTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the MDbgValueWrongTypeException class with serialized data. 
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.IMDbgFrameFactory">
            <summary>
            Interface used for creating a new stackwalkers after a process is synchronized.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.IMDbgFrameFactory.EnumerateFrames(Microsoft.Samples.Debugging.MdbgEngine.MDbgThread)">
            <summary>
            Creates a new StackWalker as an enumeration of frames on a given thread.
            </summary>
            <param name="thread">a thread object associated with the stackwalker</param>
            <returns>enumeration of Frames</returns>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.FrameCache">
            <summary>
            A utility class to cache stack frames. 
            This provides an array view (random access) on top of the enumerator (sequential) view.
            </summary>
            <remarks>Thread safety - this class supports free threaded access
            and will synchronize all access to the underlying enumerator</remarks>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.FrameCache.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Samples.Debugging.MdbgEngine.MDbgFrame},Microsoft.Samples.Debugging.MdbgEngine.MDbgThread)">
            <summary>
            Creates a frame cache for the given thread
            </summary>
            <param name="frames">Enumeration of frames</param>
            <param name="thread">Thread associated the the stack walker</param>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.FrameCache.EnumerateCachedFrames">
            <summary>
            Enumerate the frames in the cache, and builds the cache if neeed.
            </summary>
            <returns>An enumeration of cached frames</returns>
            <remarks>This is useful when it's important to return the same instance of MdbgFrame objects.</remarks>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.FrameCache.GetFrame(System.Int32)">
            <summary>
            Function returns mdbg frame for the thred it was created for. 
            </summary>
            <param name="index">index of the frame. The leaf-most frame is indexed with 0.</param>
            <returns>the object representing frame</returns>
            <remarks>
            When the stack has 10 frames, it returns the frame for indexes 0-9. It returns null
            for index 10 and throws otherwise.
            </remarks>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.FrameCache.GetFrameIndex(Microsoft.Samples.Debugging.MdbgEngine.MDbgFrame)">
            <summary>
            The function returns the index of the frame in the stack.
            </summary>
            <param name="frame">A frame returned with call to GetFrame.</param>
            <returns>an index of the frame</returns>
            <remarks>
            If the frame passed in was not created with this StackWalker object the function
            throws an exception.
            </remarks>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.FrameCache.IterateNextFrame">
            <summary>
            Wrapper to access enumerator and get next frame.
            </summary>
            <returns>Next frame in the enumeration. Null to end the enumeration</returns>
            <remarks>The enumeration starts with the leaf (active) of the callstack and then returns 
            callers working its way up to main(). This will not be called after it returns null.</remarks>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.FrameCache.Thread">
            <summary>
            Thread associated with the stack-walker
            </summary>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.FrameCache.InternalFrameCache">
            <summary>
            cache of frames created by the stack walker
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.FrameCache.CheckUsability">
            <summary>
            The function throws if the FrameFactory invalidated the Stackwalker.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.FrameCache.Invalidate">
            <summary>
            Mark that the cache is invalidated. Caller should discard this object and create a new instance.
            Marking invalid prevents clients from using stale entries.
            </summary>
            <remarks>This is not IDisposable because it does not hold unmanaged resources.</remarks>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.MDbgV2FrameFactory">
            <summary>
            Implementation of FrameFactory that creates a StackWalker that uses debugger V2 StackWalking API 
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgV2FrameFactory.EnumerateFrames(Microsoft.Samples.Debugging.MdbgEngine.MDbgThread)">
            <summary>
            Creates a new V2 StackWalker.
            </summary>
            <param name="thread">a thread object associated with the stackwalker</param>
            <returns>object implementing MDbgStackWalker interface</returns>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgV2FrameFactory.UnwindNativeFrames(Microsoft.Samples.Debugging.MdbgEngine.MDbgThread,Microsoft.Samples.Debugging.CorDebug.CorChain)">
            <summary>
            Unwind unmanaged frames within an native chain.
            </summary>
            <param name="thread">thread containing chain</param>
            <param name="nativeChain">a native CorChain</param>
            <returns>enumeration of MDbgFrames for the native frames</returns>
            <remarks>ICorDebug stackwalking only unwinds managed chains. 
            A derived class can override this function to provide native stacktracing.</remarks>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.MDbgV3FrameFactory">
            <summary>
            Implementation of FrameFactory that creates a StackWalker that uses debugger V3 StackWalking API 
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgV3FrameFactory.StitchInternalFrames(Microsoft.Samples.Debugging.MdbgEngine.MDbgThread,System.Collections.Generic.IEnumerator{Microsoft.Samples.Debugging.CorDebug.CorFrame},System.Collections.Generic.IEnumerable{Microsoft.Samples.Debugging.MdbgEngine.MDbgFrame})">
            <summary>
            We want to be able to interleave native and internal frames together and also minimize the exposure of internal frames.
            This method takes the internal frame cache and interleaves them with the native frames returned from UnwindNativeFrames.  In this
            case, this function will merely return all of the internal frames since the interop extension isn't loaded.
            <param name="thread">current thread that we're creating the stackwalker on</param>
            <param name="internalFrameCache">the internal frame cache</param>
            <param name="nativeFrames">native frames returned from UnwindNativeFrames</param>
            <returns>enumeration of the interleaved internal and native MDbgFrames</returns>
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgV3FrameFactory.UnwindNativeFrames(Microsoft.Samples.Debugging.MdbgEngine.MDbgThread,Microsoft.Samples.Debugging.Native.INativeContext,System.Int64)">
            <summary>
            Unwind unmanaged frames within an native chain.
            </summary>
            <param name="thread">thread containing an unmanged frame</param>
            <param name="context">context containing the current context of the stack frame</param>
            <param name="endValue">address of the next managed frame</param>
            <returns>enumeration of MDbgFrames for the native frames</returns>
            <remarks>ICorDebug stackwalking only unwinds managed chains. 
            A derived class can override this function to provide native stacktracing.</remarks>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.MDbgLatestFrameFactory">
            <summary>
            This FrameFactory creates either a V2 or a V3 StackWalker depending on whether the specified thread
            supports the ICorDebugThread3 API.
            </summary>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.MDbgFunction">
            <summary>
            The MDbgFunction class.
            This represents cached information about a function.  Since this is just a cache
            (and can be updated if symbols change), you should not hold onto instances
            of this across a Continue.  Instead use MDbgFunctionMgr.Get to get or create
            an up-to-date MDbgFunction object.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgFunction.GetStepRangesFromIP(System.Int32)">
            <summary>
            Gets the step ranges from an IP
            </summary>
            <param name="ip">The IP to get Step Ranges From.</param>
            <returns>The Step Ranges.</returns>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgFunction.Dispose">
            <summary>
            Releases all resources used by the MDbgFunction.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgFunction.GetSourcePositionFromIP(System.Int32)">
            <summary>
            Gets the source position from a given Instruction Pointer
            </summary>
            <param name="ip">The Instruction Pointer.</param>
            <returns>The Source Position.</returns>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgFunction.GetSourcePositionFromFrame(Microsoft.Samples.Debugging.CorDebug.CorFrame)">
            <summary>
            Gets the MDbgSourcePosition from a given CorFrame.
            </summary>
            <param name="frame">The CorFrame.</param>
            <returns>The MDbgSourcePosition of the given frame.</returns>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgFunction.CorFunction">
            <summary>
            Gets the CorFunction encapsulated in the MDbgFunction.
            </summary>
            <value>The CorFunction.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgFunction.MethodInfo">
            <summary>
            Gets the MethodInfo for the function.
            </summary>
            <value>The MethodInfo.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgFunction.FullName">
            <summary>
            Gets the Full Name for the Function.
            </summary>
            <value>The Full Name.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgFunction.Module">
            <summary>
            Gets the Module that contains this function.
            </summary>
            <value>The MDbgModule.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgFunction.SymMethod">
            <summary>
            Gets the SymMethod.
            </summary>
            <value>The SymMethod.</value>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgFunction.GetIPFromLine(System.Int32,System.Int32@)">
            <summary>
            Function gets an IL offset that corresponds to the line number for the function.
            Function is needed for implementing SetIP command to implement setting an IP at some line number.
            This function only works if the function is defined in one file.
            </summary>
            <param name="lineNumber">The line number.</param>
            <param name="ilOffset">The ILOffset.</param>
            <returns>true on success, else false</returns>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgFunction.GetActiveLocalVars(Microsoft.Samples.Debugging.MdbgEngine.MDbgFrame)">
            <summary>
            Gets an Array of MDbgValues for the Active Local Vars in the given frame.
            </summary>
            <param name="managedFrame">The Frame to look in.</param>
            <returns>The MDbgValue[] Active Local Valiables.</returns>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgFunction.GetArguments(Microsoft.Samples.Debugging.MdbgEngine.MDbgFrame)">
            <summary>
            Gets an array of MDbgValues that are the Arguments to the Function in the given Frame.
            </summary>
            <param name="managedFrame">The Frame to use.</param>
            <returns>The MDbgValue[] Arguments.</returns>
        </member>
        <member name="F:Microsoft.Samples.Debugging.MdbgEngine.MDbgFunction.SpecialSequencePoint">
            <summary>
            Constant to indicate if a Sequence Point is Special.
            </summary>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.MDbgSourcePosition">
            <summary>
            MDbgSourcePosition class.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgSourcePosition.IsSpecial">
            <summary>
            Gets if this source position is a special position.
            </summary>
            <value>true if special, else false.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgSourcePosition.Line">
            <summary>
            Same as StartLine.
            </summary>
            <value>StartLine.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgSourcePosition.StartLine">
            <summary>
            Gets the start line of the location in the source file.
            </summary>
            <value>The start line.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgSourcePosition.StartColumn">
            <summary>
            Gets the start column of the location in the source file.
            </summary>
            <value>The start column.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgSourcePosition.EndLine">
            <summary>
            Gets the final line of the location in the source file.
            </summary>
            <value>The final line.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgSourcePosition.EndColumn">
            <summary>
            Gets the end column of the location in the source file.
            </summary>
            <value>The End Column.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgSourcePosition.Path">
            <summary>
            Gets the Path for the source file.
            </summary>
            <value>The Path.</value>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgSourcePosition.#ctor(System.Boolean,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Contructor of MDbgSourcePosition type.
            </summary>
            <param name="isSpecial">Indicates if this source position is a special position.</param>
            <param name="path">Path for the source file.</param>
            <param name="startLine">Start line of the location in the source file.</param>  
            <param name="endLine">Final line of the location in the source file.</param>                
            <param name="startColumn">Start column of the location in the source file.</param>          
            <param name="endColumn">Endcolumn of the location in the source file.</param>                  
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgSourcePosition.ToString">
            <summary>
            Get a string representation of the Source position.
            </summary>
            <returns>a simple string representation</returns>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.InternalUtil">
            <summary>
            InternalUtil - a place for utility functions.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.InternalUtil.PrintCorType(Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess,Microsoft.Samples.Debugging.CorDebug.CorType)">
            <summary>
            Creates a string representation of CorType.
            </summary>
            <param name="proc">A debugged process.</param>
            <param name="ct">A CorType object representing a type in the debugged process.</param>
            <returns>String representaion of the passed in type.</returns>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.LibraryProvider">
            <summary>
            A simple ICLRDebuggingLibraryProvider implementation that scans all
            the installed runtime directories looking for a matching file
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.LibraryProvider.DoesFileMatch(System.String,System.Int32,System.Int32)">
            <summary>
            Determines if the file at the given path matches the timestamp and sizeOfImage values
            </summary>
            <param name="filePath">the file to check</param>
            <param name="timestamp">the PE timestamp value to verifiy</param>
            <param name="sizeOfImage">the PE sizeOfImage value to verify</param>
            <returns>true if the file is a match and false otherwise</returns>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.MDbgModuleCollection">
            <summary>
            MDbgModuleCollection class.  Allows for grouping of Modules.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgModuleCollection.Dispose">
            <summary>
            Releases all resources used by the MDbgModuleCollection.
            </summary>
            <remarks>
                This method effectively calls Dispose() on all modules in the collection.
            </remarks>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgModuleCollection.Count">
            <summary>
            How many modules are in the collection.
            </summary>
            <value>Module Count.</value>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgModuleCollection.LookupFunction(Microsoft.Samples.Debugging.CorDebug.CorFunction)">
            <summary>
            Looks up a CorFunction.
            </summary>
            <param name="managedFunction">Which CorFunction to lookup.</param>
            <returns>The coresponding MDbgFunction.</returns>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgModuleCollection.Lookup(Microsoft.Samples.Debugging.CorDebug.CorModule)">
            <summary>
            Looks up a CorModule.
            </summary>
            <param name="managedModule">Which CorModule to lookup.</param>
            <returns>The coresponding MDbgModule.</returns>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgModuleCollection.Lookup(System.String)">
            <summary>
            Looks up a Module Name.
            </summary>
            <param name="moduleName">Which Module Name to lookup.</param>
            <returns>The coresponding MDbgModule with the given name.</returns>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.MDbgModule">
            <summary>
            The MDbgModule class.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgModule.Process">
            <summary>
            Gets the MDbgProcess that has loaded the module.
            </summary>
            <value>The MDbgProcess.</value>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgModule.Dispose">
            <summary>
            Releases all resources used by the MDbgModule.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgModule.CorModule">
            <summary>
            Gets the CorModule encapsulated in the MDbgModule.
            </summary>
            <value>The CorModule.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgModule.Importer">
            <summary>
            Gets the metadata importer for the Module.
            </summary>
            <value>The CorMetadataImport.</value>
            <remarks> The metadata provides rich compile-time information such
            as all the functions and types in the module. </remarks>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgModule.Number">
            <summary>
            Gets the number for the Module.
            </summary>
            <value>The number.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgModule.SymReader">
            <summary>
            Gets the SymReader for the Module. 
            This will attempt to load symbols if not already loaded.
            </summary>
            <value>The SymReader.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgModule.SymbolFilename">
            <summary>
            Get the filename of the symbols for this module.
            This will attempt to load symbols if not already loaded.
            </summary>
            <return>
            If successful, returns the full path and filename for the symbols loaded for this 
            module. If no symbols are loaded or if symbols are loaded but it can't determine the filename, 
            returns null. </return>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgModule.MatchesModuleName(System.String)">
            <summary>
            Checks if the module name string matches this module.
            This will attempt to load symbols if not already loaded.
            </summary>
            <param name="moduleName">Name of the module in one of supported formats.</param>
            <return>
            True if string matches this module name.
            </return>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgModule.ReloadSymbols(System.Boolean)">
            <summary>
            Reloads the symbols for the module.
            </summary>
            <param name="force">Forces reloading of symbols that have already been successfully loaded.</param>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgModule.UpdateSymbols(System.Runtime.InteropServices.ComTypes.IStream)">
            <summary>
            Updates the symbols for the module given the raw PDB symbol stream.
            </summary>
            <param name="symbolStream">New IStream to use for symbol reading.
            If this is null, unloads the symbols for this module.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgModule.UpdateSymbols(System.Diagnostics.SymbolStore.ISymbolReader)">
            <summary>
            Updates the symbols for a module given a new reader object
            </summary>
            <param name="newSymReader">The new symbol reader object</param>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgModule.ApplyEdit(System.String,System.String,System.String,System.String)">
            <summary>
            Apply an edit.  (Edit and Continue feature)
            </summary>
            <param name="deltaMetadataFile">File containing the Metadata delta.</param>
            <param name="deltaILFile">File containing the IL delta.</param>
            <param name="deltaPdbFile">File containing the PDB delta.</param>
            <param name="editSourceFile">The edited source file. WARNING - this param may be removed in next release.</param>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgModule.GetFunction(Microsoft.Samples.Debugging.CorDebug.CorFunction)">
            <summary>
            Gets the MDbgFunction for a given CorFunction.
            </summary>
            <param name="managedFunction">The CorFunction to lookup.</param>
            <returns>The coresponding MDbgFunction.</returns>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgModule.GetFunction(System.Int32)">
            <summary>
            Gets the MDbgFunction for a given Function Token.
            </summary>
            <param name="functionToken">The Function Token to lookup.</param>
            <returns>The coresponding MDbgFunction.</returns>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgModule.EditsCounter">
            <summary>
            Gets the number of edits performed on a module.
            </summary>
            <value>The number of edits.</value>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgModule.GetEditsSourceFile(System.Int32)">
            <summary>
            Gets the name of edit file that was to used to do specified edits.
            </summary>
            <param name="editNumber">Which edit to lookup.</param>
            <returns>The source file used to perform the given edit number.</returns>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.ProcessCollectionChangedEventArgs">
            <summary>
            ProcessCollectionChangedEventArgs class.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.ProcessCollectionChangedEventArgs.Process">
            <value>
                Process that has been newly created.
            </value>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.ProcessCollectionChangedEventHandler">
            <summary>
            Delegate for notification of engine about starting new processes.
            </summary>
            <param name="sender">Object that sent the event.</param>
            <param name="e">ProcessCollectionChangedEventArgs for the event.</param>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcessCollection">
            <summary>
            MDbg Process Collection class for grouping Processes.
            </summary>
        </member>
        <member name="E:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcessCollection.ProcessAdded">
             <summary> Event fired when a process is added to this collection 
             and has an underlying valid CorProcess object. </summary>
             <remarks> Extensions can subscribe to this so that they have a chance to 
             inspect a process when it's first created and subscribe to more specific state.
             There is no ProcessRemoved because extensions can use the Proecss Exited callback.
            </remarks>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcessCollection.Lookup(Microsoft.Samples.Debugging.CorDebug.CorProcess)">
            <summary>
            Lookup an MDbgProcss from a CorProcess.
            </summary>
            <param name="process">The CorProcess.</param>
            <returns>The MDbgProcess.</returns>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcessCollection.Count">
            <summary>
            How many Processes are in the Collection.
            </summary>
            <value>How many Processes.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcessCollection.Active">
            <summary>
            Gets or Sets which MDbgProcess is active.
            </summary>
            <value>The Active Process.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcessCollection.HaveActive">
            <summary>
            Gets if there is an Active process in the Collection.
            </summary>
            <value>true if it has an Active Process, else false.</value>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcessCollection.CreateLocalProcess">
            <summary>
            OBSOLETE - Use CreateLocalProcess(CorDebugger)
            Creates a Local Process and adds it to the Collection.
            </summary>
            <remarks>
            This method was obsoleted because it accepted null version strings and 
            then used a very arbitrary versioning policy. Versioning policy should be
            decided by the caller.
            </remarks>
            <returns>The Process that got created.</returns>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcessCollection.CreateLocalProcess(System.String)">
            <summary>
            OBSOLETE - Use CreateLocalProcess(CorDebugger)
            Creates a local process object that will be able to debug specified program.
            </summary>
            <remarks>The created process object will be empty -- you still have to call
            CreateProcess method on it to start debugging
            This method was obsoleted because it accepted null version strings and
            then used a very arbitrary versioning policy. Versioning policy should be
            decided by the caller.
            </remarks>
            <param name="version">version of CLR to use for the process</param>
            <returns>The Process that got created.</returns>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcessCollection.CreateLocalProcess(Microsoft.Samples.Debugging.CorDebug.CorDebugger)">
            <summary>
            Creates a new process which can be debugged using the given ICorDebug instance
            </summary>
            <param name="debugger">CorDebugger to use for the process</param>
            <returns>The Process that got created.</returns>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcessCollection.CreateProcess">
            <summary>
            Creates a process which can use the new native pipeline
            debugging architecture
            </summary>
            <returns>The Process that got created.</returns>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcessCollection.RegisterDebuggerForCleanup(Microsoft.Samples.Debugging.CorDebug.CorDebugger)">
            <summary>
            Adds the specified CorDebugger object to the cleanup list
            </summary>
            <param name="debugger"></param>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcessCollection.FreeStaleUnmanagedResources">
            <summary>
            Explicitly free any stale unmanaged resources associated with this process collection.
            This mainly means calling ICorDebug::Terminate on all orphaned CorDebugger objects. </summary>
            <remarks>
            ICorDebug::Terminate can not safely be called on the finalizer thread or debugger callback thread.
            Thus we maintain a queue of objects to delete, and then flush that queue once we know we can safely 
            delete them.
            </remarks>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcessCollection.RegisterProcess(Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess)">
            <summary>
            Called by MDbgProcess constructor to register a process into process collection
            </summary>
            <param name="process">process to register</param>
            <returns>Logical process number that should be assigned to the registered process.</returns>
            <remarks>This will update the Active process to the current process.</remarks>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcessCollection.DeleteProcess(Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess)">
            <summary>
            Removes process from the process collection.
            </summary>
            <param name="process">process to unregister from collection</param>
            <remarks>
            If the process was active, the active process is set to none
            </remarks>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.DebugModeFlag">
            <summary>
            Debug Mode Flags.
            </summary>
        </member>
        <member name="F:Microsoft.Samples.Debugging.MdbgEngine.DebugModeFlag.Default">
            <summary>
            Run in the same mode as without debugger.
            </summary>
        </member>
        <member name="F:Microsoft.Samples.Debugging.MdbgEngine.DebugModeFlag.Optimized">
            <summary>
            Run in forced optimized mode.
            </summary>
        </member>
        <member name="F:Microsoft.Samples.Debugging.MdbgEngine.DebugModeFlag.Debug">
            <summary>
            Run in debug mode (easy inspection) but slower.
            </summary>
        </member>
        <member name="F:Microsoft.Samples.Debugging.MdbgEngine.DebugModeFlag.Enc">
            <summary>
            Run in ENC mode (ENC possible) but even slower than debug 
            </summary>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.IStopGoController">
            <summary>
            Stop-Go controller abstracts out details of how a debuggee is stopped and resumed for
            debug events. This allows for abstractions like non-invasive debugging. 
            </summary>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.IStopGoController.CanExecute">
            <summary>
            Whether the taget can execute (go/stop work). Returns false if target
            is non-invasive, otherwise true.  This is an immutable property of
            the controller. 
            </summary>
            <remarks>This can be used as an early check before other invasive commands
            like stepping, funceval, go, break. Technically, this isn't needed
            since other invasive operations would just throw; but this gives
            us a chance to provide more meaningful errors to the user.</remarks>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.IStopGoController.IsRunning">
            <summary>
            Returns true iff the debuggee is running. This is after Continue()
            but before the process is stopped. 
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.IStopGoController.MarkAsStopped">
            <summary>
            Called when debuggee is stopped. This may also be called after
            the debuggee is exited (which can be viewed as a kind
            of "stopped" state).
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.IStopGoController.AsyncBreak">
            <summary>
            Do an asynchronous break of the debuggee.
            Usually called when debuggee is running. 
            This blocks and does not return until the debuggee is in a stopped
            state.
            </summary>
            <remarks>AsyncBreak can be called on non-invasive targets (which are always
            conceptually stopped). In this case, AsyncBreak may be called even though CanExecute
            returns false.</remarks>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.IStopGoController.Continue">
            <summary>
            Called when debuggee is stopped and we want it to resume executing.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.IStopGoController.Kill(System.Int32)">
            <summary>
            Terminate the debuggee with the specified exit code.
            Called when debuggee is stopped. 
            </summary>
            <param name="exitCode">exit code that debuggee will terminate
            with.</param>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.IStopGoController.Detach">
            <summary>
            Stop debugging the debuggee; but don't terminate it.
            Called when debuggee is stopped.
            </summary>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.NoninvasiveStopGoController">
            <summary>
            Stop Go controller which provides non-invasive execution control
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.NoninvasiveStopGoController.#ctor">
            <summary>
            Constuctor
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.NoninvasiveStopGoController.Init(Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess)">
            <summary>
            Connect this controller to the MDbgProcess object that it controls.
            </summary>
            <param name="process">process being controlled by this execution policy</param>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.NoninvasiveStopGoController.CanExecute">
            <summary>
            Always false for a non-invasive target
            implementation of IStopGoController.CanExecute.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.NoninvasiveStopGoController.IsRunning">
            <summary>
            Always false for a non-invasive target because the target is always conceptually in break-mode.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.NoninvasiveStopGoController.MarkAsStopped">
            <summary>
            implementation of IStopGoController.MarkAsStopped
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.NoninvasiveStopGoController.AsyncBreak">
            <summary>
            implementation of IStopGoController.AsyncBreak.
            This is a nop for non-invasive targets.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.NoninvasiveStopGoController.Continue">
            <summary>
            implementation of IStopGoController.Continue.
            This fails for non-invasive targets.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.NoninvasiveStopGoController.Kill(System.Int32)">
            <summary>
            implementation of IStopGoController.Kill
            This fails for non-invasive targets.
            </summary>
            <param name="exitCode">ignored for non-invasive targets since this operation will fail</param>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.NoninvasiveStopGoController.Detach">
            <summary>
            Detach from the target.
            </summary>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.V2StopGoController">
            <summary>
            StopGo controller for a live debuggee, using ICorDebugProcess.Stop and ICorDebugProcess.Continue.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.V2StopGoController.#ctor(Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess)">
            <summary>
            Constructor
            </summary>
            <param name="process">process object that this controller is for</param>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.V2StopGoController.CanExecute">
            <summary>
            Implementation of IStopGoController.CanExecute.
            </summary>        
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.V2StopGoController.IsRunning">
            <summary>
            Implementation of IStopGoController.IsRunning.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.V2StopGoController.MarkAsStopped">
            <summary>
            Implementation of IStopGoController.MarkAsStopped.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.V2StopGoController.AsyncBreak">
            <summary>
            Implementation of IStopGoController.AsyncBreak.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.V2StopGoController.Continue">
            <summary>
            Implementation of IStopGoController.Continue.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.V2StopGoController.Kill(System.Int32)">
            <summary>
            Implementation of IStopGoController.Kill.
            </summary>
            <param name="exitCode">exit code to terminate the process with</param>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.V2StopGoController.Detach">
            <summary>
            Implementation of IStopGoController.Detach.
            </summary>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess">
            <summary>
            MDbg Process Class
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.#ctor(Microsoft.Samples.Debugging.MdbgEngine.MDbgEngine,Microsoft.Samples.Debugging.CorDebug.CorDebugger)">
            <summary>Creates an empty process object.
            This object can be used to start a debugging session by calling
            CreateProcess or Attach method on it.
            </summary>
            <param name="engine">Root engine object that manages this process.</param>
            <param name="debugger">CorDebugger object that will be used to do an actual
            debugging</param>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.#ctor(Microsoft.Samples.Debugging.MdbgEngine.MDbgEngine)">
            <summary>
            Creates an MdbgProcess that can be compatible with the native pipeline
            debugging architecture
            </summary>
            <param name="engine">owning engine object</param>
            <param name="stopGo">stopGo controller to provide policy for execution of process.</param>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.#ctor(Microsoft.Samples.Debugging.MdbgEngine.MDbgEngine,Microsoft.Samples.Debugging.MdbgEngine.IStopGoController)">
            <summary>
            Creates an MdbgProcess that can be compatible with dump debuggees.
            </summary>
            <param name="engine">owning engine object</param>
            <param name="stopGo">stopGo controller to provide policy for execution of process.</param>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.BindToExistingClrInTarget(Microsoft.Samples.Debugging.CorDebug.CorProcess)">
            <summary>
            Called to bind this MdbgProcess instance to a specific CLR in the target.
            </summary>
            <param name="process">process object representing managed debuggee</param>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.CorDebugger">
            <summary>
            Gets the ICorDebug wrapper. This may not be available for all
            ICorDebugProcess implementations.
            </summary>
            <value>The CorDebugger if available. This may be null</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.CorProcess">
            <summary>
            Gets the CorProcess represented by this MDbg Process.
            </summary>
            <value>The CorProcess.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.DumpReader">
            <summary>
            Gets the DumpReader used to implement the data target, when this process
            is really just a dump file (null otherwise)
            </summary>
            <value>The DumpReader in use when this process is a dump file.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.Threads">
            <summary>
            Gets the MDbgThreadCollection in this Process.
            </summary>
            <value>The MDbgThreadCollection.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.Breakpoints">
            <summary>
            Gets the MDbgBreakpointCollection for this Process.
            </summary>
            <value>The MDbgBreakpointCollection.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.Modules">
            <summary>
            Gets the MDbgModuleCollection for this Process.
            </summary>
            <value>The MDbgModuleCollection.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.AppDomains">
            <summary>
            Gets the MDbgAppDomainCollection for this Process.
            </summary>
            <value>The MDbgAppDomainCollection.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.DebuggerVars">
            <summary>
            Gets the MDbgDebuggerVarCollection for this Process.
            </summary>
            <value>The MDbgDebuggerVarCollection.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.IsAlive">
            <summary>
            Gets if the Process is Alive.  A process is considered to be alive when it has an underlying
            native process.  See the comment for m_isAlive for more information.
            </summary>
            <value>true if Alive, else false.</value>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.NativeProcessCreated">
            <summary>
            This method is called to indicate that the underlying native process for this instance of 
            MDbgProcess has been created.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.IsRunning">
            <summary>
            Gets if the Process is Running.
            </summary>
            <value>true if Running, else false.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.Number">
            <summary>
             Gets the Number for this process.  This is not the PID.  A debugger may run multiple processes simultaneously.
            </summary>
            <value>The Number.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.Name">
            <summary>
            Returns command line that started this process or null if the process has been attached to.
            </summary>
            <value>The Command Line.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.StopReason">
            <summary>
            Returns the reason why the Process is stopped.
            </summary>
            <value>The Reason for stopping, or throws if the process is not stopped.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.StopCounter">
            <summary>
            Gets how many times the process has stopped. Objects can cache
            the stop-count and use that later to determine if the process
            was continued since the count was last cached.
            </summary>
            <value>How many times.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.StopEvent">
            <summary>
            Gets the Stop Event. This is high when the debuggee is stopped,
            and low when the debuggee is running. Shells can wait on this
            to wait for the debuggee to stop.
            </summary>
            <value>The Stop Event.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.SymbolPath">
            <summary>
            Gets or sets the Symbol Path.
            </summary>
            <value>The Symbol Path.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.DebugMode">
            <summary>
            Gets or sets the DebugMode Flags.  You can only set these before the process starts.
            </summary>
            <value>The DebugMode Flags.</value>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.RawMode">
            <summary>
            RawMode enumeration.
            </summary>
        </member>
        <member name="F:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.RawMode.None">
            <summary>
            No setting.
            </summary>
        </member>
        <member name="F:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.RawMode.AlwaysStop">
            <summary>
            Always Stop.
            </summary>
        </member>
        <member name="F:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.RawMode.NeverStop">
            <summary>
            Never Stop.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.RawModeType">
            <summary>
             Gets or sets the RawModeType for the Process.
            </summary>
            <value>The RawModeType.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.EnableUserEntryBreakpoint">
            <summary>
             Gets or sets wheter the debugged program should automatically stop
             on user-entry breakpoint.
            </summary>
            <value> True if debugged process should stop on user-entry breakpoint as
            saved in .pdb.
            </value>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.CreateProcess(System.String,System.String)">
            <summary>
            Creates a new process.
            </summary>
            <param name="commandLine">The commandline to run.</param>
            <param name="commandArguments">The arguments to pass.</param>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.CreateProcess(System.String,System.String,System.String)">
            <summary>
            Creates a new process.
            </summary>
            <param name="commandLine">The commandline to run.</param>
            <param name="commandArguments">The arguments to pass.</param>
            <param name="workingDirectory">The working directory for the new process.</param>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.Attach(System.Int32)">
            <summary>
            Attach to a process by Process ID (PID)
            </summary>
            <param name="processId">The PID to attach to.</param>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.Attach(System.Int32,Microsoft.Samples.Debugging.Native.SafeWin32Handle)">
            <summary>
            Attach to a process by Process ID (PID)
            </summary>
            <param name="processId">The PID to attach to.</param>
            <param name="attachContinuationEvent">A OS event handle which must be set to unblock the debuggee
            when first continuing from attach</param>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.AttachToDump(Microsoft.Samples.Debugging.Native.DumpReader,System.Nullable{System.Int64})">
            <summary>
            Attaches the process to a dump
            </summary>
            <param name="dumpReader">A reader for the dump</param>
            <param name="clrInstanceId">The moduleBaseAddress of the CLR to debug or null
            to debug the first CLR encountered</param>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.AttachToDump(Microsoft.Samples.Debugging.Native.DumpReader,System.Nullable{System.Int64},Microsoft.Samples.Debugging.CorDebug.NativeApi.ICorDebugDataTarget)">
            <summary>
            Attaches the process to a dump using the specified DumpDataTarget
            </summary>
            <param name="dumpReader">A reader for the dump</param>
            <param name="clrInstanceId">The moduleBaseAddress of the CLR to debug or null
            to debug the first CLR encountered</param>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.EnsureIsAlive">
            <summary>
            Ensure the debuggee is alive (CorProcess != null); and throw if it is not.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.CanExecute">
            <summary>
            Helper to check if the target can execute.
            </summary>
            <returns>A boolean representing whether the target can execute.</returns>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.EnsureCanExecute(System.String)">
            <summary>
            Helper to throw if the target is non-invasive. Nop if the target
            is invasive.
            </summary>
            <param name="operationDescription">hint of operation that was
            attempted that required invasive access. This is useful for error
            strings.</param>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.Detach">
            <summary>
            Detach from the Process.
            </summary>
            <returns>A WaitHandle for the Stop Event.</returns>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.Kill">
            <summary>
            Kill the Process.
            </summary>
            <returns>A WaitHandle for the Stop event.</returns>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.Go">
            <summary>
            Have the Process Go.
            </summary>
            <returns>A WaitHandle for the Stop event.</returns>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.SetActiveStepper(Microsoft.Samples.Debugging.CorDebug.CorStepper)">
            <summary>
            Sets a stepper for the process. Process will stop with step complete,
            once this stepper completes the step.
            This function just sets the active stepper, but it doesn't continue the process.
            Once the stepper is set, a Go() command needs to be called.
            The 'active stepper' is also exclusive with registering a custom stepper.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.StepOver(System.Boolean)">
            <summary>
            Have the Process Step Over.
            </summary>
            <param name="stepNativeCode">false to step source lines, true to single step instructions.</param>
            <returns>A WaitHandle for the Stop event.</returns>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.StepInto(System.Boolean)">
            <summary>
            Have the Process Step Into.
            </summary>
            <param name="stepNativeCode">false to step source lines, true to single step instructions.</param>
            <returns>A WaitHandle for the Stop event.</returns>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.StepOut">
            <summary>
            Have the Process Step Out.
            </summary>
            <returns>A WaitHandle for the Stop event.</returns>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.AsyncStop">
            <summary>
            Have the Process Asynchronously Stop.
            </summary>
            <returns>A WaitHandle for the Stop event.</returns>
        </member>
        <member name="E:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.PostDebugEvent">
            <summary> Event fired after all debug events. </summary>
            <remarks> This event gives extensions a general purpose hook for all debug events.
            </remarks>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.RegisterCustomStepper(Microsoft.Samples.Debugging.CorDebug.CorStepper,Microsoft.Samples.Debugging.MdbgEngine.CustomStepperEventHandler)">
            <summary>
            Registers a Custom Stepper
            Registrations are valid only for one callback, i.e. the object is
            automatically deregistered after the callback is fired. If the user wishes to
            receive additional callback, the registration has to be done again in the
            callback.
            </summary>
            <param name="stepper">The CorStepper to run.</param>
            <param name="handler">The CustomStepperEventHandler to use.</param>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.RegisterCustomBreakpoint(Microsoft.Samples.Debugging.CorDebug.CorBreakpoint,Microsoft.Samples.Debugging.MdbgEngine.CustomBreakpointEventHandler)">
             <summary>
             Register a handler to be invoked when a Custom Breakpoint is hit.
             </summary>
             <param name="breakpoint">The CorBreakpoint to register.</param>
             <param name="handler">The CustomBreakpointEventHandler to run when the Breakpoint is hit.
             	If this is null, this breakpoints callback is explicitly deregistered.
             </param>
             <remarks>
             	Only one handler can be specified per breakpoint. The handler could be a 
             	multicast delegate. To change a breakpoints handler, first deregister it and then set
             	a new one.
             	The handler has the same lifespan semantics as the underlying CorBreakpoint object.
             	That means it is alive and the same handler will be invoked every time the breakpoint is hit
             	until the handler is explicitly deregistered. 
            
             	A handler can stop the shell at the breakpoint by calling Controller.Stop on the
            		CustomBreakpointEventArgs parameter passed into the delegate.
            </remarks>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.RegisterCustomEval(Microsoft.Samples.Debugging.CorDebug.CorEval,Microsoft.Samples.Debugging.MdbgEngine.CustomEvalEventHandler)">
            <summary>
            Register a Custom Eval.
            </summary>
            <param name="eval">The CorEval to register.</param>
            <param name="handler">The CustomEvalEventHandler to use.</param>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.ResolveType(System.String)">
            <summary>
            Resolves a type from a Variable Name.
            </summary>
            <param name="typeName">The name of the type to resolve.</param>
            <returns>The CorType of that Variable.</returns>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.ResolveType(System.String,Microsoft.Samples.Debugging.CorDebug.CorAppDomain)">
            <summary>
            Resolves a type from a Variable Name.
            </summary>
            <param name="typeName">The name of the type to resolve.</param>
            <param name="appDomain">The AppDomain to resolve the type in or null if any
            AppDomain is acceptable</param>
            <returns>The CorType of that Variable.</returns>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.ResolveClass(System.String)">
            <summary>
            Resolves a class from a Variable Name.
            </summary>
            <param name="typeName">The name of the type to resolve.</param>
            <returns>The CorClass of that Variable.</returns>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.ResolveClass(System.String,Microsoft.Samples.Debugging.MdbgEngine.MDbgModule@)">
            <summary>
            Resolves a class from a Variable Name.
            </summary>
            <param name="typeName">The name of the type to resolve.</param>
            <param name="mod">
              Returns the module in which the class was resolved. value is
              null if the resolution fails. 
            </param>
            <returns>The CorClass of that Variable.</returns>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.ResolveClass(System.String,Microsoft.Samples.Debugging.CorDebug.CorAppDomain,Microsoft.Samples.Debugging.MdbgEngine.MDbgModule@)">
            <summary>
            Resolves a class from a Variable Name.
            </summary>
            <param name="typeName">The name of the type to resolve.</param>
            <param name="appDomain">The AppDomain to resolve the type in or null if any AppDomain can be used</param>
            <param name="mod">
              Returns the module in which the class was resolved. value is
              null if the resolution fails. 
            </param>
            <returns>The CorClass of that Variable.</returns>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.ResolveFunctionName(Microsoft.Samples.Debugging.MdbgEngine.MDbgModule,System.String,System.String)">
            <summary>
            Resolves a Function from a Module, Class Name, and Function Name.
            </summary>
            <param name="mdbgModule">The Module that has the Function.</param>
            <param name="className">The name of the Class that has the Function.</param>
            <param name="functionName">The name of the Function.</param>
            <returns>The MDbgFunction that matches the given parameters.</returns>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.ResolveFunctionName(System.String,System.String,System.String,Microsoft.Samples.Debugging.CorDebug.CorAppDomain)">
            <summary>
            Resolves a Function from a Module, Class Name, Function Name, and AppDomain.
            </summary>
            <param name="moduleName">The Module name that has the Function.</param>
            <param name="className">The name of the Class that has the Function.</param>
            <param name="functionName">The name of the Function.</param>
            <param name="appDomain">The AppDomain to look in.</param>
            <returns>The MDbgFunction that matches the given parameters.</returns>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.ResolveFunctionNameFromScope(System.String)">
            <summary>
            Resolve Function name based on current thread's AppDomain.
            </summary>
            <param name="functionName">The name of the function to resolve.</param>
            <returns>The matching MDbgFunction.</returns>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.ResolveFunctionNameFromScope(System.String,Microsoft.Samples.Debugging.CorDebug.CorAppDomain)">
            <summary>
            Resolve Function name based on given AppDomain.
            </summary>
            <param name="functionName">The name of the function to resolve.</param>
            <param name="appDomain">The AppDomain to resolve in.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.ResolveVariable(System.String,Microsoft.Samples.Debugging.MdbgEngine.MDbgFrame)">
            <summary>
            Resolves a Variable name in a given scope.
            </summary>
            <param name="variableName">The name of the variable to resolve.</param>
            <param name="scope">The MDbgFrame to look in for that variable.</param>
            <returns>The MDbgValue that the given variable has in the given scope.</returns>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.CustomNotificationEventHandler(System.Object,Microsoft.Samples.Debugging.CorDebug.CorCustomNotificationEventArgs)">
            <summary>
            Handler for CustomNotification events
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">Event arguments (thread and appdomain</param>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.OnPreContinue">
            <summary>
            Called just before the process continues
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.BeginManagedDebugEvent">
            <summary>
            This must be called at the beginning of every debug event handler
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.EndManagedDebugEvent(Microsoft.Samples.Debugging.CorDebug.CorEventArgs)">
            <summary>
            This must be called at the end of every debug event handler
            </summary>
            <param name="args"></param>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess.LibraryProvider">
            <summary>
            Controls the policy for locating CLR version specific debugging
            components such as mscordacwks.dll and mscordbi.dll
            </summary>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.CustomEventArgs">
            <summary>
            Custom Event Arguments class.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.CustomEventArgs.#ctor(Microsoft.Samples.Debugging.MdbgEngine.IMDbgProcessController)">
            <summary>
            Creates a new instance of the CustomEventArgs object.
            </summary>
            <param name="processController">Which IMDbgProcessController to store in the Object.</param>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.CustomEventArgs.Controller">
            <summary>
            Gets the stored IMDbgProcessController.
            </summary>
            <value>The IMDbgProcessController.</value>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.CustomStepCompleteEventArgs">
            <summary>
            CustomStepCompleteEventArgs class.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.CustomStepCompleteEventArgs.#ctor(Microsoft.Samples.Debugging.MdbgEngine.IMDbgProcessController,Microsoft.Samples.Debugging.CorDebug.CorStepCompleteEventArgs)">
            <summary>
            Creates a new instance of the CustomStepCompleteEventArgs class.
            </summary>
            <param name="processController">Which IMDbgProcessController to store in the Object.</param>
            <param name="callbackArgs">Which CorStepCompleteEventArgs to encapsulate in this wrapper.</param>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.CustomStepCompleteEventArgs.StepCompleteCallbackArgs">
            <summary>
            Gets the CorStepCompleteEventArgs.
            </summary>
            <value>The CorStepCompleteEventArgs.</value>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.CustomStepperEventHandler">
            <summary>
            Delegate for creating Custom Steppers.
            </summary>
            <param name="sender">Object that sent the event.</param>
            <param name="e">CustomStepCompleteEventArgs for the event.</param>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.CustomBreakpointEventArgs">
            <summary>
            CustomBreakpointEventArgs class.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.CustomBreakpointEventArgs.#ctor(Microsoft.Samples.Debugging.MdbgEngine.IMDbgProcessController,Microsoft.Samples.Debugging.CorDebug.CorBreakpointEventArgs)">
            <summary>
            Creates a new instance of the CustomBreakpointEventArgs class.
            </summary>
            <param name="processController"></param>
            <param name="callbackArgs"></param>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.CustomBreakpointEventArgs.BreakpointHitCallbackArgs">
            <summary>
            Gets the CorBreakpointEventArgs.
            </summary>
            <value>The ConBreakpointEventArgs.</value>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.CustomBreakpointEventHandler">
            <summary>
            Delegate for creating Custom Breakpoints.
            </summary>
            <param name="sender">Object that tent the event.</param>
            <param name="e">CustomBreakpointEventArgs for the event.</param>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.CustomEvalEventArgs">
            <summary>
            CustomEvalEventArgs class.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.CustomEvalEventArgs.#ctor(Microsoft.Samples.Debugging.MdbgEngine.IMDbgProcessController,Microsoft.Samples.Debugging.CorDebug.CorEvalEventArgs,Microsoft.Samples.Debugging.MdbgEngine.CustomEvalEventArgs.EvalCallbackType)">
            <summary>
            Creates a new instance of the CustomEvalEventArgs class.
            </summary>
            <param name="processController">Which IMDbgProcessController to store in the Object.</param>
            <param name="callbackArgs">Which CorEvalEventArgs to encapsulate in this wrapper.</param>
            <param name="callbackType">What Callback type this was.</param>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.CustomEvalEventArgs.CallbackType">
            <summary>
            Gets the Callback Type
            </summary>
            <value>The Callback Type.</value>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.CustomEvalEventArgs.EvalCallbackType">
            <summary>
            Callback Type Enumeration.
            </summary>
        </member>
        <member name="F:Microsoft.Samples.Debugging.MdbgEngine.CustomEvalEventArgs.EvalCallbackType.EvalComplete">
            <summary>
            Eval completed.
            </summary>
        </member>
        <member name="F:Microsoft.Samples.Debugging.MdbgEngine.CustomEvalEventArgs.EvalCallbackType.EvalException">
            <summary>
            Eval completed with exception.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.CustomEvalEventArgs.EvalCallbackArgs">
            <summary>
            Gets the CorEvalEventArgs.
            </summary>
            <value>The CorEvalEventArgs.</value>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.CustomEvalEventHandler">
            <summary>
            Delegate for creating Custom Evals.
            </summary>
            <param name="sender">Object that sent the event.</param>
            <param name="e">CustomEvalEventArgs for the event.</param>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.CustomPostCallbackEventArgs">
            <summary>
            CustomPostCallbackEventArgs class.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.CustomPostCallbackEventArgs.#ctor(Microsoft.Samples.Debugging.MdbgEngine.IMDbgProcessController,Microsoft.Samples.Debugging.CorDebug.ManagedCallbackType,System.Object)">
            <summary>
            Creates a new instance of the CustomEvalEventArgs class.
            </summary>
            <param name="processController">Which IMDbgProcessController to store in the Object.</param>
            <param name="callbackArgs">Which CorEvalEventArgs to encapsulate in this wrapper.</param>
            <param name="callbackType">What Callback type this was.</param>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.CustomPostCallbackEventArgs.CallbackType">
            <summary>
            Gets the Callback Type
            </summary>
            <value>The Callback Type.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.CustomPostCallbackEventArgs.CallbackArgs">
            <summary>
            Gets the CorEvalEventArgs. 
            </summary>
            <value>The CorEventArgs.</value>
            <remarks> Multiple callback types may share the same Callback event args. Use the
            CallbackType to determine the exact type of debug event here instead of relying
            on the typeof the CallbackArgs object.
            </remarks>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.PostCallbackEventHandler">
            <summary>
            Delegate for custom handling of any debugger callbacks.
            </summary>
            <param name="sender">Object that sent the event.</param>
            <param name="e">CustomPostCallbackEventArgs for the event.</param>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.IMDbgProcessController">
            <summary>
            Interface for MDbg Process Controlling.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.IMDbgProcessController.Stop(Microsoft.Samples.Debugging.CorDebug.CorThread,System.Object)">
            <summary>
            Stops the Process on a given thread for a given stop reason.
            </summary>
            <param name="activeThread">Which thread to stop.</param>
            <param name="stopReason">What reason to stop.</param>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.StepperDescriptor">
            <summary>
            Describes a step operation for ICorDebugStepper. Default is essentially the smallest possible
            step for source-code.
            </summary>
            <remarks>ICorDebugStepper is very flexible and can be initialized with many different
            properties. This encapsulates the various properties and adds extra runtime error checking.
            The defaults is conceptually to single-step the next IL instruction, which means
            no step ranges, the current thread, no jmc, stop on all interceptors, etc. 
            </remarks> 
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.StepperDescriptor.#ctor(Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess)">
            <summary>
            Creates an empty stepper.
            </summary>
            <param name="process">non-null process that this is stepping</param>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.StepperDescriptor.CreateSourceLevelStep(Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess,Microsoft.Samples.Debugging.MdbgEngine.StepperType)">
            <summary>
            Creates a source level stepper
            </summary>
            <param name="process"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.StepperDescriptor.CreateSourceLevelStep(Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess,Microsoft.Samples.Debugging.MdbgEngine.StepperType,System.Boolean)">
            <summary>
            Creates a default 'source level step' on process with current active frame and active thread. 
            </summary>
            <param name="process">non-null process </param>
            <param name="type">type of step (in, out, over)</param>
            <param name="singleStepInstructions">false to step source level, true to step single instructions</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.StepperDescriptor.ToString">
            <summary>
            Converts the Stepper to a user-friendly string
            </summary>
            <returns>user-friendly string</returns>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.StepperDescriptor.Thread">
            <summary>
            Thread the stepper is on. Null for the current thread. This controls how the
            ICorDebugStepper is created.
            Default is null.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.StepperDescriptor.Frame">
            <summary>
            Frame the stepper is on within the Thread. Null for the leaf-most frame .
            This controls how the ICorDebugStepper is created.
            Default is null
            </summary>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.StepperDescriptor.IsJustMyCode">
            <summary>
            Enable or Disable Just-my-code (JMC) stepping. The stepper will only stop in functions that have been
            marked as JMC.
            Default is false.
            This affects ICorDebugStepper2::SetJMC.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.StepperDescriptor.StepperType">
            <summary>
            General type of stepper (in, out, over). Default is In.
            </summary>
            <remarks>
            This controls which ICorDebugStepper::Step*() method will be called.
            If this is Out, then it calls StepOut(). 
            If this is In, then it calls Step(true, *)
            If this is Over, then it calls Step(false, *)
            </remarks>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.StepperDescriptor.SetStepRanges(Microsoft.Samples.Debugging.CorDebug.NativeApi.COR_DEBUG_STEP_RANGE[],System.Boolean)">
            <summary>
            Sets step ranges for the stepper. 
            </summary>
            <param name="ranges">Ranges to step over</param>
            <param name="isRangeIl">True if the ranges are IL offsets, false if they are native offsets</param>
            <remarks>If no ranges are set, the stepper single steps an instruction.</remarks> 
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.StepperDescriptor.InterceptMask">
            <summary>
            Interception mask to determine what interceptors (eg, class-initializers) the stepper
            may step into. 
            </summary>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.StepperDescriptor.StopMask">
            <summary>
            Stop mask to determine what types of mappings the stepper may stop in (prolog, epilog,
            unmapped, etc)
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.StepperDescriptor.Step">
            <summary>
            Issue the step and creates the underlying ICorDebugStepper object. 
            This does not Continue the process, nor does it register for a
            step-complete handler.
            </summary>
            <remarks>No other flags can be set after this.</remarks> 
            <returns>A CorStepper object which can be associated with the StepComplete handler.</returns>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.StepperType">
            <summary>
            Source-level stepping type for managed stepping. Stepping behavior also depends on other stepping flags.
            </summary>
        </member>
        <member name="F:Microsoft.Samples.Debugging.MdbgEngine.StepperType.In">
            <summary>
            Step into a function 
            Set the Interceptor flags to control whether this stops in interecptors like Class constuction.
            </summary>
        </member>
        <member name="F:Microsoft.Samples.Debugging.MdbgEngine.StepperType.Out">
            <summary>
            Step out of the current function.
            </summary>
        </member>
        <member name="F:Microsoft.Samples.Debugging.MdbgEngine.StepperType.Over">
            <summary>
            Step over a source line, without stepping into function calls.
            At the end of the function, this becomes a step-out.
            </summary>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.BuiltInStopReason">
            <summary>
            Abstract Builtin Stop Reason class to make additional stop reasons.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.BuiltInStopReason.ToString">
            <summary>
            Makes the BuiltInStopReason look better when printed.
            </summary>
            <returns>For a Full.Namespace.ReasonForStoppingStopReason, this returns "ReasonForStopping"</returns>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.MDbgInitialContinueNotCalledStopReason">
            <summary>
            The default starting stop reason before continue has been called to really start the process.
            </summary>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.StepCompleteStopReason">
            <summary>
            The step is complete.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.StepCompleteStopReason.#ctor(Microsoft.Samples.Debugging.CorDebug.CorStepper,Microsoft.Samples.Debugging.CorDebug.NativeApi.CorDebugStepReason)">
            <summary>
            Create a new instance of the StepCompleteStopReason class.
            </summary>
            <param name="stepper">The stepper that has stepped.</param>
            <param name="stepReason">The reason that the stepper stepped.</param>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.StepCompleteStopReason.StepReason">
            <summary>
            The reason that the stepper stepped.
            </summary>
            <value>The CorDebugStepReason</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.StepCompleteStopReason.Stepper">
            <summary>
            The stepper that stepped.
            </summary>
            <value>The stepper.</value>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.ProcessExitedStopReason">
            <summary>
            The process has exited.
            </summary>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.ThreadCreatedStopReason">
            <summary>
            A new thread has been created.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.ThreadCreatedStopReason.#ctor(Microsoft.Samples.Debugging.MdbgEngine.MDbgThread)">
            <summary>
            Create a new instance of the ThreadCreatedStopReason class.
            </summary>
            <param name="thread">The thread that has been created.</param>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.ThreadCreatedStopReason.Thread">
            <summary>
            The thread that got created.
            </summary>
            <value>The thread.</value>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.BreakpointHitStopReason">
            <summary>
            A breakpoint has been hit.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.BreakpointHitStopReason.#ctor(Microsoft.Samples.Debugging.MdbgEngine.MDbgBreakpoint)">
            <summary>
            Create a new instance of the BreakpointHitStopReason class.
            </summary>
            <param name="breakpoint">The breakpoint that has been hit.</param>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.BreakpointHitStopReason.Breakpoint">
            <summary>
            The Breakpoint that has been hit.
            </summary>
            <value>The Breakpoint.</value>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.ModuleLoadedStopReason">
            <summary>
            A Module has been loaded.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.ModuleLoadedStopReason.#ctor(Microsoft.Samples.Debugging.MdbgEngine.MDbgModule)">
            <summary>
            Create a new instance of the ModuleLoadedStopReason class.
            </summary>
            <param name="managedModule">The module that has been loaded.</param>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.ModuleLoadedStopReason.Module">
            <summary>
            The Module that got loaded.
            </summary>
            <value>The Module.</value>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.ClassLoadedStopReason">
            <summary>
            A Class has been loaded.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.ClassLoadedStopReason.#ctor(Microsoft.Samples.Debugging.CorDebug.CorClass)">
            <summary>
            Create a new instance of the ClassLoadedStopReason class.
            </summary>
            <param name="managedClass">The class that has been loaded.</param>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.ClassLoadedStopReason.Class">
            <summary>
            The Class that got loaded.
            </summary>
            <value>The Class.</value>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.ClassUnloadedStopReason">
            <summary>
            A Class has been unloaded.
            </summary>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.AssemblyLoadedStopReason">
            <summary>
            An Assemble has been loaded.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.AssemblyLoadedStopReason.#ctor(Microsoft.Samples.Debugging.CorDebug.CorAssembly)">
            <summary>
            Create a new instance of the AssemblyLoadedStopReason class.
            </summary>
            <param name="assembly">The assembly that has been loaded.</param>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.AssemblyLoadedStopReason.Assembly">
            <summary>
            The Assembly that has been loaded.
            </summary>
            <value>The Assembly.</value>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.AssemblyUnloadedStopReason">
            <summary>
            An Assembly has been unloaded.
            </summary>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.ControlCTrappedStopReason">
            <summary>
            The Control-C Signal has been trapped.
            </summary>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.ExceptionUnwindStopReason">
            <summary>
            An exception is getting unwound.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.ExceptionUnwindStopReason.#ctor(Microsoft.Samples.Debugging.CorDebug.CorAppDomain,Microsoft.Samples.Debugging.CorDebug.CorThread,Microsoft.Samples.Debugging.CorDebug.NativeApi.CorDebugExceptionUnwindCallbackType,System.Int32)">
            <summary>
            Create a new instance of the ExceptionUnwindStopReason class.
            </summary>
            <param name="appDomain">The appDomain where exception has been thrown.</param>
            <param name="thread">The thread on which the exception has been thrown.</param>
            <param name="eventType">Reason for the notification.</param>
            <param name="flags">Flags passed to the exception callback.</param>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.ExceptionUnwindStopReason.AppDomain">
            <summary>
            AppDomain where exception occured.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.ExceptionUnwindStopReason.Thread">
            <summary>
            Thread where exception occured.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.ExceptionUnwindStopReason.EventType">
            <summary>
            The ExceptionUnwindCallbackType for the Exception that's getting unwound.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.ExceptionUnwindStopReason.Flags">
            <summary>
            Flags for the Exception Unwind.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.ExceptionThrownStopReason">
            <summary>
            An Exception has been thrown.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.ExceptionThrownStopReason.#ctor(Microsoft.Samples.Debugging.CorDebug.CorAppDomain,Microsoft.Samples.Debugging.CorDebug.CorThread,Microsoft.Samples.Debugging.CorDebug.CorFrame,System.Int32,Microsoft.Samples.Debugging.CorDebug.NativeApi.CorDebugExceptionCallbackType,System.Int32)">
            <summary>
            Create a new instance of the ExceptionThrownStopReason class.
            </summary>
            <param name="appDomain">The appDomain where exception has been thrown.</param>
            <param name="thread">The thread on which the exception has been thrown.</param>
            <param name="frame">The frame where the exception has been thrown.</param>
            <param name="offset">IL offset within the function where exception has been thrown.</param>
            <param name="eventType">Reason for the notification.</param>
            <param name="flags">Flags passed to the exception callback.</param>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.ExceptionThrownStopReason.#ctor(Microsoft.Samples.Debugging.CorDebug.CorAppDomain,Microsoft.Samples.Debugging.CorDebug.CorThread,Microsoft.Samples.Debugging.CorDebug.CorFrame,System.Int32,Microsoft.Samples.Debugging.CorDebug.NativeApi.CorDebugExceptionCallbackType,System.Int32,System.Boolean)">
            <summary>
            Create a new instance of the ExceptionThrownStopReason class.
            </summary>
            <param name="appDomain">The appDomain where exception has been thrown.</param>
            <param name="thread">The thread on which the exception has been thrown.</param>
            <param name="frame">The frame where the exception has been thrown.</param>
            <param name="offset">IL offset within the function where exception has been thrown.</param>
            <param name="eventType">Reason for the notification.</param>
            <param name="flags">Flags passed to the exception callback.</param>
            <param name="exceptionEnhancedOn">Whether or not Exception Enhanced has been turned
            on by the user for this exception.</param>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.ExceptionThrownStopReason.AppDomain">
            <summary>
            AppDomain where exception occured.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.ExceptionThrownStopReason.Thread">
            <summary>
            Thread where exception occured.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.ExceptionThrownStopReason.Frame">
            <summary>
             The Frame where the exception was thrown.
            </summary>
            <value>The Frame.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.ExceptionThrownStopReason.Offset">
            <summary>
            The Offset where the exception was thrown
            </summary>
            <value>The Offset.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.ExceptionThrownStopReason.EventType">
            <summary>
            The EventType for the Exception.
            </summary>
            <value>The EventType.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.ExceptionThrownStopReason.Flags">
            <summary>
            The Flags for the Exception.
            </summary>
            <value>The Flags.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.ExceptionThrownStopReason.ExceptionEnhancedOn">
            <summary>
            Whether or not Exception Enhanced has been turned
            on by the user for this Exception.
            </summary>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.UnhandledExceptionThrownStopReason">
            <summary>
            An Unhandled Exception has been thrown.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.UnhandledExceptionThrownStopReason.#ctor(Microsoft.Samples.Debugging.CorDebug.CorAppDomain,Microsoft.Samples.Debugging.CorDebug.CorThread,Microsoft.Samples.Debugging.CorDebug.CorFrame,System.Int32,Microsoft.Samples.Debugging.CorDebug.NativeApi.CorDebugExceptionCallbackType,System.Int32)">
            <summary>
            Create a new instance of the UnhandledExceptionThrownStopReason class.
            </summary>
            <param name="appDomain">The appDomain where exception has been thrown.</param>
            <param name="thread">The thread on which the exception has been thrown.</param>
            <param name="frame">The frame where the exception has been thrown.</param>
            <param name="offset">IL offset within the function where exception has been thrown.</param>
            <param name="eventType">Reason for the notification.</param>
            <param name="flags">Flags passed to the exception callback.</param>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.AsyncStopStopReason">
            <summary>
            The Debugger has Asynchronously stopped.
            </summary>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.AttachCompleteStopReason">
            <summary>
            At Attach has completed.
            </summary>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.UserBreakStopReason">
            <summary>
            A User Break has been hit.
            </summary>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.EvalCompleteStopReason">
            <summary>
             A Function Evaluation has completed.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.EvalCompleteStopReason.#ctor(Microsoft.Samples.Debugging.CorDebug.CorEval)">
            <summary>
            Creates a new instance of the EvalCompleteStopReason object.
            </summary>
            <param name="eval">The Function Evaluation that has completed.</param>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.EvalCompleteStopReason.Eval">
            <summary>
            The Function Evaluation that has completed.
            </summary>
            <value>The Function Evaluation.</value>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.EvalExceptionStopReason">
            <summary>
            A Function Evaluation has caused an Exception.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.EvalExceptionStopReason.#ctor(Microsoft.Samples.Debugging.CorDebug.CorEval)">
            <summary>
            Creates a new instance of the EvalExceptionStopReason object.
            </summary>
            <param name="eval">The Function Evaluation that caused the exception.</param>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.RemapOpportunityReachedStopReason">
            <summary>
            A Remap Opportunity has been reached
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.RemapOpportunityReachedStopReason.#ctor(Microsoft.Samples.Debugging.CorDebug.CorAppDomain,Microsoft.Samples.Debugging.CorDebug.CorThread,Microsoft.Samples.Debugging.CorDebug.CorFunction,Microsoft.Samples.Debugging.CorDebug.CorFunction,System.Int32)">
            <summary>
            Create a new instance of the RemapOpportunityReachedStopReason class.
            </summary>
            <param name="appDomain">The appDomain where remapping is occuring.</param>
            <param name="thread">The thread on which the remapping is occuring.</param>
            <param name="oldFunction">The old version of function we are remapping from.</param>
            <param name="newFunction">The latest version of function we are remapping to.</param>
            <param name="oldILOffset">The IL-offset of location in old function we're remaping from.</param>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.RemapOpportunityReachedStopReason.AppDomain">
            <summary>
            The AppDomain where the remap opportunity is.
            </summary>
            <value>The AppDomain.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.RemapOpportunityReachedStopReason.Thread">
            <summary>
            The Thread where the remap opportunity is.
            </summary>
            <value>The Thread.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.RemapOpportunityReachedStopReason.OldFunction">
            <summary>
            The Old Function before the remap.
            </summary>
            <value>The Old Function.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.RemapOpportunityReachedStopReason.NewFunction">
            <summary>
            The New Function after the remap.
            </summary>
            <value>The New Function.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.RemapOpportunityReachedStopReason.OldILOffset">
            <summary>
            The Old Intermediate Language Offset before the remap.
            </summary>
            <value>The Old IL Offset.</value>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.FunctionRemapCompleteStopReason">
            <summary>
            A Function Remap has completed.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.FunctionRemapCompleteStopReason.#ctor(Microsoft.Samples.Debugging.CorDebug.CorAppDomain,Microsoft.Samples.Debugging.CorDebug.CorThread,Microsoft.Samples.Debugging.CorDebug.CorFunction)">
            <summary>
            Create a new instance of the FunctionRemapCompleteStopReason class.
            </summary>
            <param name="appDomain">The appDomain where remapping is occuring.</param>
            <param name="thread">The thread on which the remapping is occuring.</param>
            <param name="managedFunction">The version of function the debugger remapped to.</param>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.FunctionRemapCompleteStopReason.AppDomain">
            <summary>
            The AppDomain of the Function Remap.
            </summary>
            <value>The AppDomain.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.FunctionRemapCompleteStopReason.Thread">
            <summary>
            The Thread of the Function Remap.
            </summary>
            <value>The Thread.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.FunctionRemapCompleteStopReason.Function">
            <summary>
            The Function that got remapped.
            </summary>
            <value>The Function.</value>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.MessageStopReason">
            <summary>
            Base class for message stop-reasons.
            Messages are just notes to the user (such as logging or MDAs) and can
            be ignored.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MessageStopReason.Name">
            <summary>
            Get name for category of this message.
            </summary>        
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MessageStopReason.Message">
            <summary>
            Get detailed message string.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MessageStopReason.ToString">
            <summary>
            Returns more detailed information about stop reason.
            </summary>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.LogMessageStopReason">
            <summary>
            A Message has been logged.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.LogMessageStopReason.#ctor(System.String,System.String)">
            <summary>
            Create a new instance of the LogMessageStopReason class.
            </summary>
            <param name="switchName">Name of switch (category) from Debugger.Log method call.</param>
            <param name="message">Message passed to the Debugger.Log method call.</param>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.LogMessageStopReason.Message">
            <summary>
            The Message that got logged.
            </summary>
            <value>The Message.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.LogMessageStopReason.SwitchName">
            <summary>
            The SwitchName for the Message Logging
            </summary>
            <value>The SwitchName.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.LogMessageStopReason.Name">
            <summary>
            Get name for category of this message.
            </summary>        
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.MDANotificationStopReason">
            <summary>
            A MDA (Managed Debug Assistant) has occured.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDANotificationStopReason.#ctor(Microsoft.Samples.Debugging.CorDebug.CorMDA)">
            <summary>
            Create a new instance of the MDANotificationStopReason class.
            </summary>
            <param name="mda">Generated MDA notification.</param>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDANotificationStopReason.Message">
            <summary>
            The Message that got logged.
            </summary> 
            <value>The Message.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDANotificationStopReason.Name">
            <summary>
            Get name for category of this message.
            </summary>        
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDANotificationStopReason.CorMDA">
            <summary>
            Mda object that caused the debugged program to stop.
            </summary>        
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.RawModeStopReason">
            <summary>
            In Raw Mode, all stop reasons are the same and this is what they are called.
            You may then decide for yourself what to do about the stop event.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.RawModeStopReason.Callback">
            <summary>
            What type of stop reason this would have been, if it weren't in Raw Mode.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.RawModeStopReason.Arguments">
            <summary>
            Arguments for the callback.
            </summary>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.DebuggerErrorStopReason">
            <summary>
            The Debugger has encountered an unrecoverable error, i.e. from a 
            ICorDebugManagedCallback::DebuggerError callback.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.DebuggerErrorStopReason.#ctor(System.Int32)">
            <summary>
            Create a DebuggerErrorStopReason
            </summary>
            <param name="hresult">The hresult representing the reason for the error.</param>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.DebuggerErrorStopReason.ToString">
            <summary>
            Create a string representation of the error, including any information available about the hresult
            </summary>
            <returns>The descriptive error message</returns>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.MDbgErrorStopReason">
            <summary>
            Mdbg has encountered an Error.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgErrorStopReason.#ctor(System.Exception)">
            <summary>
            Create a new instance of the MDbgErrorStopReason class.
            </summary>
            <param name="e">Exception that caused errror in the debugger.</param>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgErrorStopReason.ExceptionThrown">
            <summary>
            The Exception for the error.
            </summary>
            <value>The Exception.</value>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.MDbgThread">
            <summary>
            MDbg Thread class.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgThread.Suspended">
            <summary>
            Gets or Sets if the Thread is Suspended.
            </summary>
            <value>NotImplementedException.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgThread.Number">
            <summary>
            Gets the Thread Number.
            </summary>
            <value>The Thread Number.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgThread.Id">
            <summary>
            Gets the Thread Id.
            </summary>
            <value>Gets the Thread Id.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgThread.CorThread">
            <summary>
            Gets the CorThread.
            </summary>
            <value>The CorThread.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgThread.CurrentException">
            <summary>
            Returns current exception on the thread or MDbgValue representing N/A if there is no exception on the thread.
            </summary>
            <value>The current Exception.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgThread.CurrentNotification">
            <summary>
            Returns current notification on the thread or MDbgValue representing N/A if there is no exception on the thread.
            </summary>
            <value>The current notification.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgThread.BottomFrame">
            <summary>
            The Bottom Frame in the stack for this Thread.
            </summary>
            <value>The Bottom Frame.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgThread.Frames">
            <summary>
            Returns all the frames for the thread.
            </summary>
            <value>The frames.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgThread.CurrentFrame">
            <summary>
            Gets or Sets the Current Logical Frame
            </summary>
            <value>The Current Frame.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgThread.HaveCurrentFrame">
            <summary>
            Gets if the Thread has a Current Logical Frame.
            </summary>
            <value>true if it has, else false.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgThread.CurrentSourcePosition">
            <summary>
            Gets the current Source Position.
            </summary>
            <value>The Source Ponition.</value>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgThread.MoveCurrentFrame(System.Boolean)">
            <summary>
            Moves the Current Frame up or down.
            </summary>
            <param name="down">Moves frame down if true, else up.</param>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgThread.LookupFrame(Microsoft.Samples.Debugging.CorDebug.CorFrame)">
            <summary>
            This will return an MDbgFrame for the corresponding CorFrame.
            Note (the frame needs to correspond to this thread!!!!)
            </summary>
            <param name="f">The CorFrame to look up.</param>
            <returns>The coresponding MDbgFrame.</returns>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgThread.InvalidateStackWalker">
            <summary>
            Clears the stack walker's frame cache, which will force the stack
            to be walked again with the next call that depends on the stack.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgThread.IsOSThreadPresentInDump">
            <summary>
            Runs some heuristics to determine whether the OS thread for this thread is
            present in the dump.  Since the EE notifies us of EE Threads which may still
            exist, but for which the OS thread has exited, it is quite possible
            to encounter dumps with an EE Thread, but no corresponding OS thread.
            </summary>
            <returns>Boolean indicating whether the OS thread for this thread is
            present in the dump</returns>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.MDbgThreadCollection">
            <summary>
            MDbg Thread Collection class.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgThreadCollection.Count">
            <summary>
            How many threads are in the collection.
            </summary>
            <value>How many threads.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgThreadCollection.Item(System.Int32)">
            <summary>
            Allows for indexing of the collection by thread number.
            </summary>
            <param name="threadNumber">Which thread number to access.</param>
            <returns>The MDbgThread at that number.</returns>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgThreadCollection.Lookup(Microsoft.Samples.Debugging.CorDebug.CorThread)">
            <summary>
            Lookup a MDbgThread using a CorThread.
            </summary>
            <param name="thread">The CorThread to use.</param>
            <returns>The rusulting MDbgThread with the same ID.</returns>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgThreadCollection.Active">
            <summary>
            Gets on sets the Active Thread.
            </summary>
            <value>The Active Thread.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgThreadCollection.HaveActive">
            <summary>
            Gets if the collection has an Active Thread.
            </summary>
            <value>true if it has an Active Thread, else false.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgThreadCollection.FrameFactory">
            <summary>
            Gets or sets the current FrameFactory object for MDbgEngine stackwalking implementation.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgThreadCollection.RefreshStack">
            <summary>
            This function needs to be called when we do "setip" so that callstack will get refreshed.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgThreadCollection.InvalidateAllStacks">
            <summary>
            Invalidates all stackwalkers
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgThreadCollection.GetThreadFromThreadId(System.Int32)">
            <summary>
            Gets the MDbgThread with the given ThreadId.
            </summary>
            <param name="threadId">The ThreadId to look up.</param>
            <returns>The MDbgThread.</returns>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.MDbgFrame">
            <summary>
            MDbg Frame class
            MDbgFrame is defined as abstract so that we can have
            different kind of frames.  There could be e.g. ManagedFrames
            (IL code) and NativeFrames (native) corresponding to native
            code.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgFrame.CorFrame">
            <summary>
            Returns cor-wrapper for frame or throws an exception if N/A.
            </summary>
            <value>The cor-wrapper for the frame.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgFrame.Thread">
            <summary>
            Returns thread owning this frame.
            </summary>
            <value>The Thread.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgFrame.IsManaged">
            <summary>
            Return true if frame has a managed IL code behind it.
            </summary>
            <value>true if frame is managed, else false.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgFrame.IsInfoOnly">
            <summary>
            Returns true if the frame is informational (i.e. informative/internal).
            </summary>
            <value>true if frame is informational, else false.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgFrame.SourcePosition">
            <summary>
            Returns source position for the frame or null if not available.
            </summary>
            <value>The Source Position.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgFrame.Function">
            <summary>
            Returns function whose code is executed in this frame.
            </summary>
            <value>The Function.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgFrame.NextUp">
            <summary>
            Returns next frame up the stack or null if topmost frame.
            </summary>
            <value>The next frame up.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgFrame.NextDown">
            <summary>
            Returns next frame down the stack or null if bottom frame.
            </summary>
            <value>The next frame up.</value>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgFrame.ToString(System.String)">
            <summary>
            Returns a string that represents current frame
            Currently supported formats:
            null or empty string: returns short frame format (just frame name)
            "v"                 : returns long frame format (including module &amp; arguments)
            </summary>
            <param name="format">Which format to use.</param>
            <returns>The formatted string that represtents the current frame.</returns>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgFrame.op_Equality(Microsoft.Samples.Debugging.MdbgEngine.MDbgFrame,Microsoft.Samples.Debugging.MdbgEngine.MDbgFrame)">
            <summary>
            Equality testing.  Allows for things like "if(thing1 == thing2)" to work properly.
            </summary>
            <param name="operand">First Operand.</param>
            <param name="operand2">Second Operand.</param>
            <returns>true if equal, else false.</returns>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgFrame.op_Inequality(Microsoft.Samples.Debugging.MdbgEngine.MDbgFrame,Microsoft.Samples.Debugging.MdbgEngine.MDbgFrame)">
            <summary>
            Inequality testing.  Allows for things like "if(thing1 != thing2)" to work properly.
            </summary>
            <param name="operand">First Operand.</param>
            <param name="operand2">Second Operand.</param>
            <returns>true if not equal, else false.</returns>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgFrame.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the other object.
            </summary>
            <param name="value">The object to compare with the current frame.</param>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgFrame.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.MDbgFrameBase">
            <summary>
            The MDbgILFrame class is a frame with Intermediate Language code behind it.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgFrameBase.#ctor(Microsoft.Samples.Debugging.MdbgEngine.MDbgThread)">
            <summary>
            Creates an instance of class MDbgFramebase.
            </summary>
            <param name="thread"></param>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgFrameBase.Thread">
            <summary>
            Returns thread owning this frame.
            </summary>
            <value>The Thread.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgFrameBase.NextUp">
            <summary>
            Returns next frame up the stack or null if topmost frame.
            </summary>
            <value>The next frame up.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgFrameBase.NextDown">
            <summary>
            Returns next frame down the stack or null if bottom frame.
            </summary>
            <value>The next frame up.</value>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgFrameBase.ToString">
            <summary>
            Returns a string that represents current frame using default formatting.
            </summary>
            <returns>The default formatted string that represtents the current frame.</returns>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.MDbgILFrame">
            <summary>
            The MDbgILFrame class is a frame with Intermediate Language code behind it.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgILFrame.Equals(System.Object)">
            <summary>
            Determines if the wrapped object is equal to another.
            </summary>
            <param name="value">The object to compare to.</param>
            <returns>true if equal, else false.</returns>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgILFrame.GetHashCode">
            <summary>
            Required to implement MarshalByRefObject.
            </summary>
            <returns>Hash Code.</returns>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgILFrame.CorFrame">
            <summary>
            Returns cor-wrapper for frame or throws an exception if N/A.
            </summary>
            <value>The cor-wrapper for the frame.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgILFrame.IsManaged">
            <summary>
            Return true if frame has a managed IL code behind it.
            </summary>
            <value>true if frame is managed, else false.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgILFrame.IsInfoOnly">
            <summary>
            Returns true if the frame is informational (i.e. informative/internal).
            MDbg does not allow users to set an informational frame as the current frame.
            </summary>
            <value>true if frame is informational, else false.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgILFrame.SourcePosition">
            <summary>
            Returns source position for the frame or null if not available.
            </summary>
            <value>The Source Position.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgILFrame.Function">
            <summary>
            Returns function whose code is executed in this frame.
            </summary>
            <value>The Function.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgILFrame.FunctionType">
            <summary>
            Get a CorType that function for this frame is declared in.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgILFrame.FunctionTypeParameters">
            <summary> Return an enumerator that enumerates through just the generic args on this frame's method </summary>
            <remarks>Enumerating generic args on the frame gives a single collection including both
            class and function args. This is a helper to skip past the class and use just the funciton args.</remarks>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgILFrame.ToString(System.String)">
            <summary>
            Returns a string that represents current frame
            Currently supported formats:
            null or empty string: returns short frame format (just frame name)
            "v"                 : returns long frame format (including module &amp; arguments)
            </summary>
            <param name="format">Which format to use.</param>
            <returns>The formatted string that represtents the current frame.</returns>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.MDbgValue">
            <summary>
            MDbg Value class.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgValue.#ctor(Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess,Microsoft.Samples.Debugging.CorDebug.CorValue)">
            <summary>
            Creates a new instance of the MDbgValue Object.
            This constructor is public so that applications can use this class to print values (CorValue).
            CorValue's can be returned for example by funceval(CorEval.Result).
            </summary>
            <param name="process">The Process that will own the Value.</param>
            <param name="value">The CorValue that this MDbgValue will start with.</param>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgValue.#ctor(Microsoft.Samples.Debugging.MdbgEngine.MDbgProcess,System.String,Microsoft.Samples.Debugging.CorDebug.CorValue)">
            <summary>
            Creates a new instance of the MDbgValue Object.
            This constructor is public so that applications can use this class to print values (CorValue).
            CorValue's can be returned for example by funceval(CorEval.Result).
            </summary>
            <param name="process">The Process that will own the Value.</param>
            <param name="name">The name of the variable.</param>
            <param name="value">The CorValue that this MDbgValue will start with.</param>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgValue.CorValue">
            <summary>
            The CorValue stored in the MDbgValue.
            </summary>
            <value>The CorValue.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgValue.Process">
            <summary>
            The Process that owns this Value.
            </summary>
            <value>The Process.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgValue.Name">
            <summary>
            The Name of this Value.
            </summary>
            <value>The Name.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgValue.TypeName">
            <summary>
            The Name of this Type.
            </summary>
            <value>The TypeName.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgValue.IsComplexType">
            <summary>
            Is this type a complex type.
            </summary>
            <value>true if it is complex, else false.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgValue.IsArrayType">
            <summary>
            Is this type an array type.
            </summary>
            <value>true if it is an array type, else false.</value>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgValue.IsNull">
            <summary>
            Is this Value Null.
            </summary>
            <value>true if it is Null, else false.</value>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgValue.GetStringValue(System.Boolean)">
            <summary>
            Gets the Value.
            </summary>
            <param name="expand">Should it expand inner objects.</param>
            <returns>A string representation of the Value.</returns>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgValue.GetStringValue(System.Int32)">
            <summary>
            Gets the Value.
            </summary>
            <param name="expandDepth">How deep inner objects should be expanded. Value
            0 means don't expand at all.</param>
            <returns>A string representation of the Value.</returns>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgValue.GetStringValue(System.Int32,System.Boolean)">
            <summary>
            Gets the Value.
            </summary>
            <param name="expandDepth">How deep inner objects should be expanded. Value
            0 means don't expand at all.</param>
            <param name="canDoFunceval">Set to true if ToString() should be called to get better description.</param>
            <returns>A string representation of the Value.</returns>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgValue.GetField(System.String)">
            <summary>
            Gets the specified Field.
            </summary>
            <param name="name">The Name of the Field to get.</param>
            <returns>The Value of the specified Field.</returns>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgValue.GetFields">
            <summary>
            Gets all the Fields
            </summary>
            <returns>An array of all Fields.</returns>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgValue.GetArrayItems">
            <summary>
            Gets Array Items.  This function can be called only on one dimensional arrays.
            </summary>
            <returns>An array of the values for the Array Items.</returns>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgValue.GetArrayItem(System.Int32[])">
            <summary>
            Gets the Array Item for the specified indexes
            </summary>
            <param name="indexes">Which indexes to get the Array Item for.</param>
            <returns>The Value for the given indexes.</returns>
        </member>
        <member name="P:Microsoft.Samples.Debugging.MdbgEngine.MDbgValue.Value">
            <summary>
            Gets or Sets the Value of the MDbgValue to the given value.
            </summary>
            <value>This is exposed as an Object but can a primitive type, CorReferenceValue, or CorGenericValue.</value>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgValue.MakePrefixFromPtrStringBuilder(System.Text.StringBuilder)">
            <summary>
            Small helper used by InternalGetValue to put parens around the
            ptrstring generated by Dereference()
            </summary>
            <param name="ptrStrBuilder">ptrstring generated by Dereference()</param>
            <returns>String with parens around the input string</returns>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.MDbgValue.Dereference(Microsoft.Samples.Debugging.CorDebug.CorValue,System.Text.StringBuilder)">
            <summary>
            Recursively dereference the input value until we finally find a non-dereferenceable
            value.  Along the way, optionally build up a "ptr string" that shows the addresses
            we dereference, separated by "->".
            </summary>
            <param name="value">Value to dereference</param>
            <param name="ptrStringBuilder">StringBuilder if caller wants us to generate
            a "ptr string" (in which case we'll stick it there).  If caller doesn't want
            a ptr string, this can be null</param>
            <returns>CorValue we arrive at after dereferencing as many times as we can</returns>
        </member>
        <member name="T:Microsoft.Samples.Debugging.MdbgEngine.WrapperWrapperBase">
            <summary>
            Base class for Wrappers
            </summary>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.WrapperWrapperBase.#ctor(Microsoft.Samples.Debugging.CorDebug.WrapperBase)">
            <summary>
            Creates a new instance of the WrapperWrapperBase object.
            </summary>
            <param name="value">The WrapperBase to Wrap.</param>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.WrapperWrapperBase.Equals(System.Object)">
            <summary>
            Determines if the wrapped object is equal to another.
            </summary>
            <param name="value">The object to compare to.</param>
            <returns>true if equal, else false.</returns>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.WrapperWrapperBase.GetHashCode">
            <summary>
            Required to implement MarshalByRefObject.
            </summary>
            <returns>Hash Code.</returns>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.WrapperWrapperBase.op_Equality(Microsoft.Samples.Debugging.MdbgEngine.WrapperWrapperBase,Microsoft.Samples.Debugging.MdbgEngine.WrapperWrapperBase)">
            <summary>
            Equality testing.  Allows for things like "if(thing1 == thing2)" to work properly.
            </summary>
            <param name="operand">First Operand.</param>
            <param name="operand2">Second Operand.</param>
            <returns>true if equal, else false.</returns>
        </member>
        <member name="M:Microsoft.Samples.Debugging.MdbgEngine.WrapperWrapperBase.op_Inequality(Microsoft.Samples.Debugging.MdbgEngine.WrapperWrapperBase,Microsoft.Samples.Debugging.MdbgEngine.WrapperWrapperBase)">
            <summary>
            Inequality testing.  Allows for things like "if(thing1 != thing2)" to work properly.
            </summary>
            <param name="operand">First Operand.</param>
            <param name="operand2">Second Operand.</param>
            <returns>true if not equal, else false.</returns>
        </member>
    </members>
</doc>
