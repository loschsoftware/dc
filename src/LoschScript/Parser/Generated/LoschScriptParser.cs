//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Jonas\source\repos\lsc\src\LoschScript\Parser\LoschScriptParser.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LoschScript.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class LoschScriptParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Ws=1, NewLine=2, Single_Line_Comment=3, Delimited_Comment=4, Import=5, 
		Export=6, Assembly=7, Type=8, Module=9, Template=10, Global=11, Local=12, 
		Internal=13, Static=14, Protected=15, Partial=16, Open=17, Closed=18, 
		Auto=19, Virtual=20, Extern=21, Int8=22, UInt8=23, Int16=24, UInt16=25, 
		Int32=26, UInt32=27, Int64=28, UInt64=29, Native=30, UNative=31, Float32=32, 
		Float64=33, Decimal=34, Bool=35, String=36, Char=37, Dynamic=38, Object=39, 
		Infix=40, Inline=41, Ref=42, Var=43, Val=44, Const=45, Base=46, Override=47, 
		Try=48, Raise=49, Catch=50, Finally=51, Fault=52, True=53, False=54, This=55, 
		Open_Paren=56, Close_Paren=57, Open_Paren_Bar=58, Bar_Close_Paren=59, 
		Open_Bracket=60, Close_Bracket=61, Open_Brace=62, Close_Brace=63, Comma=64, 
		Double_Comma=65, Dot=66, Double_Dot=67, Double_Dot_Question_Mark=68, Dot_Equals=69, 
		Colon=70, Double_Colon=71, Triple_Colon=72, Semicolon=73, Underscore=74, 
		Single_Quote=75, Double_Quote=76, Question_Mark=77, Exclamation_Mark=78, 
		Exclamation_Question=79, Exclamation_Colon=80, At_Sign=81, Exclamation_At=82, 
		Dollar_Sign=83, Caret=84, Caret_Backslash=85, Percent_Caret=86, Dollar_Backslash=87, 
		Bar=88, Bar_GreaterThan=89, LessThan_Bar=90, Double_Bar=91, Bar_Equals=92, 
		Double_Bar_Equals=93, Ampersand=94, Ampersand_Greater=95, Less_Ampersand=96, 
		Double_Ampersand=97, Double_Ampersand_Equals=98, Ampersand_Equals=99, 
		Less_Than=100, Greater_Than=101, Less_Equals=102, Greater_Equals=103, 
		Double_Equals=104, Exclamation_Equals=105, Plus=106, Plus_Equals=107, 
		Minus=108, Minus_Equals=109, Asterisk=110, Asterisk_Equals=111, Double_Asterisk=112, 
		Double_Asterisk_Equals=113, Slash=114, Backslash=115, Slash_Equals=116, 
		Percent=117, Percent_Equals=118, Equals=119, Tilde=120, Double_Tilde=121, 
		Tilde_Equals=122, Double_Less_Than=123, Double_Less_Than_Equals=124, Double_Greater_Than=125, 
		Double_Greater_Than_Equals=126, Arrow_Right=127, Arrow_Left=128, Double_Backtick=129, 
		Identifier=130, Integer_Literal=131, Hex_Integer_Literal=132, Binary_Integer_Literal=133, 
		Real_Literal=134, Character_Literal=135, String_Literal=136, Verbatim_String_Literal=137;
	public const int
		RULE_compilation_unit = 0, RULE_file_body = 1, RULE_top_level_statements = 2, 
		RULE_full_program = 3, RULE_import_directive = 4, RULE_export_directive = 5, 
		RULE_full_identifier = 6, RULE_code_block = 7, RULE_expression = 8, RULE_atom = 9, 
		RULE_this_atom = 10, RULE_expression_atom = 11, RULE_integer_atom = 12, 
		RULE_real_atom = 13, RULE_boolean_atom = 14, RULE_string_atom = 15, RULE_character_atom = 16, 
		RULE_empty_atom = 17, RULE_wildcard_atom = 18, RULE_identifier_atom = 19, 
		RULE_type_name = 20, RULE_builtin_type_alias = 21, RULE_param_list_type = 22, 
		RULE_if_branch = 23, RULE_postfix_if_branch = 24, RULE_elif_branch = 25, 
		RULE_else_branch = 26, RULE_unless_branch = 27, RULE_else_unless_branch = 28, 
		RULE_postfix_unless_branch = 29, RULE_range = 30, RULE_index = 31, RULE_arglist = 32, 
		RULE_attribute = 33, RULE_generic_identifier = 34, RULE_field_access_modifier = 35, 
		RULE_field_declaration = 36, RULE_placeholder = 37, RULE_type_access_modifier = 38, 
		RULE_nested_type_access_modifier = 39, RULE_type_special_modifier = 40, 
		RULE_type = 41, RULE_type_parameter_list = 42, RULE_type_parameter = 43, 
		RULE_type_parameter_constraint = 44, RULE_inheritance_list = 45, RULE_type_kind = 46, 
		RULE_member_access_modifier = 47, RULE_member_oop_modifier = 48, RULE_member_special_modifier = 49, 
		RULE_type_member = 50, RULE_parameter_list = 51, RULE_parameter_modifier = 52, 
		RULE_parameter = 53, RULE_parameter_constraint = 54, RULE_type_block = 55, 
		RULE_try_branch = 56, RULE_catch_branch = 57, RULE_finally_branch = 58, 
		RULE_fault_branch = 59;
	public static readonly string[] ruleNames = {
		"compilation_unit", "file_body", "top_level_statements", "full_program", 
		"import_directive", "export_directive", "full_identifier", "code_block", 
		"expression", "atom", "this_atom", "expression_atom", "integer_atom", 
		"real_atom", "boolean_atom", "string_atom", "character_atom", "empty_atom", 
		"wildcard_atom", "identifier_atom", "type_name", "builtin_type_alias", 
		"param_list_type", "if_branch", "postfix_if_branch", "elif_branch", "else_branch", 
		"unless_branch", "else_unless_branch", "postfix_unless_branch", "range", 
		"index", "arglist", "attribute", "generic_identifier", "field_access_modifier", 
		"field_declaration", "placeholder", "type_access_modifier", "nested_type_access_modifier", 
		"type_special_modifier", "type", "type_parameter_list", "type_parameter", 
		"type_parameter_constraint", "inheritance_list", "type_kind", "member_access_modifier", 
		"member_oop_modifier", "member_special_modifier", "type_member", "parameter_list", 
		"parameter_modifier", "parameter", "parameter_constraint", "type_block", 
		"try_branch", "catch_branch", "finally_branch", "fault_branch"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'import'", "'export'", "'assembly'", "'type'", 
		"'module'", "'template'", "'global'", "'local'", "'internal'", "'static'", 
		"'protected'", "'partial'", "'open'", "'closed'", "'auto'", "'virtual'", 
		"'extern'", "'int8'", "'uint8'", "'int16'", "'uint16'", "'int32'", "'uint32'", 
		"'int64'", "'uint64'", "'native'", "'unative'", "'float32'", "'float64'", 
		"'decimal'", "'bool'", "'string'", "'char'", "'dynamic'", "'object'", 
		"'infix'", "'inline'", "'ref'", "'var'", "'val'", "'const'", "'base'", 
		"'override'", "'try'", "'throw'", "'catch'", "'finally'", "'fault'", "'true'", 
		"'false'", "'this'", "'('", "')'", "'(|'", "'|)'", "'['", "']'", "'{'", 
		"'}'", "','", "',,'", "'.'", "'..'", "'..?'", "'.='", "':'", "'::'", "':::'", 
		"';'", "'_'", "'''", "'\"'", "'?'", "'!'", "'!?'", "'!:'", "'@'", "'!@'", 
		"'$'", "'^'", "'^\\'", "'%^'", "'$\\'", "'|'", "'|>'", "'<|'", "'||'", 
		"'|='", "'||='", "'&'", "'&>'", "'<&'", "'&&'", "'&&='", "'&='", "'<'", 
		"'>'", "'<='", "'>='", "'=='", "'!='", "'+'", "'+='", "'-'", "'-='", "'*'", 
		"'*='", "'**'", "'**='", "'/'", "'\\'", "'/='", "'%'", "'%='", "'='", 
		"'~'", "'~~'", "'~='", "'<<'", "'<<='", "'>>'", "'>>='", "'->'", "'<-'", 
		"'``'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Ws", "NewLine", "Single_Line_Comment", "Delimited_Comment", "Import", 
		"Export", "Assembly", "Type", "Module", "Template", "Global", "Local", 
		"Internal", "Static", "Protected", "Partial", "Open", "Closed", "Auto", 
		"Virtual", "Extern", "Int8", "UInt8", "Int16", "UInt16", "Int32", "UInt32", 
		"Int64", "UInt64", "Native", "UNative", "Float32", "Float64", "Decimal", 
		"Bool", "String", "Char", "Dynamic", "Object", "Infix", "Inline", "Ref", 
		"Var", "Val", "Const", "Base", "Override", "Try", "Raise", "Catch", "Finally", 
		"Fault", "True", "False", "This", "Open_Paren", "Close_Paren", "Open_Paren_Bar", 
		"Bar_Close_Paren", "Open_Bracket", "Close_Bracket", "Open_Brace", "Close_Brace", 
		"Comma", "Double_Comma", "Dot", "Double_Dot", "Double_Dot_Question_Mark", 
		"Dot_Equals", "Colon", "Double_Colon", "Triple_Colon", "Semicolon", "Underscore", 
		"Single_Quote", "Double_Quote", "Question_Mark", "Exclamation_Mark", "Exclamation_Question", 
		"Exclamation_Colon", "At_Sign", "Exclamation_At", "Dollar_Sign", "Caret", 
		"Caret_Backslash", "Percent_Caret", "Dollar_Backslash", "Bar", "Bar_GreaterThan", 
		"LessThan_Bar", "Double_Bar", "Bar_Equals", "Double_Bar_Equals", "Ampersand", 
		"Ampersand_Greater", "Less_Ampersand", "Double_Ampersand", "Double_Ampersand_Equals", 
		"Ampersand_Equals", "Less_Than", "Greater_Than", "Less_Equals", "Greater_Equals", 
		"Double_Equals", "Exclamation_Equals", "Plus", "Plus_Equals", "Minus", 
		"Minus_Equals", "Asterisk", "Asterisk_Equals", "Double_Asterisk", "Double_Asterisk_Equals", 
		"Slash", "Backslash", "Slash_Equals", "Percent", "Percent_Equals", "Equals", 
		"Tilde", "Double_Tilde", "Tilde_Equals", "Double_Less_Than", "Double_Less_Than_Equals", 
		"Double_Greater_Than", "Double_Greater_Than_Equals", "Arrow_Right", "Arrow_Left", 
		"Double_Backtick", "Identifier", "Integer_Literal", "Hex_Integer_Literal", 
		"Binary_Integer_Literal", "Real_Literal", "Character_Literal", "String_Literal", 
		"Verbatim_String_Literal"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LoschScriptParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LoschScriptParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LoschScriptParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LoschScriptParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Compilation_unitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public File_bodyContext file_body() {
			return GetRuleContext<File_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(LoschScriptParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Import_directiveContext[] import_directive() {
			return GetRuleContexts<Import_directiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Import_directiveContext import_directive(int i) {
			return GetRuleContext<Import_directiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(LoschScriptParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(LoschScriptParser.NewLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Export_directiveContext export_directive() {
			return GetRuleContext<Export_directiveContext>(0);
		}
		public Compilation_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilation_unit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterCompilation_unit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitCompilation_unit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilation_unit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compilation_unitContext compilation_unit() {
		Compilation_unitContext _localctx = new Compilation_unitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilation_unit);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 122;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case Import:
					case Exclamation_Mark:
						{
						State = 120;
						import_directive();
						}
						break;
					case NewLine:
						{
						State = 121;
						Match(NewLine);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 126;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 134;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Export) {
				{
				State = 127;
				export_directive();
				State = 131;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 128;
						Match(NewLine);
						}
						} 
					}
					State = 133;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
				}
				}
			}

			State = 136;
			file_body();
			State = 137;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementsContext top_level_statements() {
			return GetRuleContext<Top_level_statementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Full_programContext full_program() {
			return GetRuleContext<Full_programContext>(0);
		}
		public File_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterFile_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitFile_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public File_bodyContext file_body() {
		File_bodyContext _localctx = new File_bodyContext(Context, State);
		EnterRule(_localctx, 2, RULE_file_body);
		try {
			State = 141;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 139;
				top_level_statements();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 140;
				full_program();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_level_statementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(LoschScriptParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(LoschScriptParser.NewLine, i);
		}
		public Top_level_statementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_level_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterTop_level_statements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitTop_level_statements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_level_statements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Top_level_statementsContext top_level_statements() {
		Top_level_statementsContext _localctx = new Top_level_statementsContext(Context, State);
		EnterRule(_localctx, 4, RULE_top_level_statements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 5900586325064548356L) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & -9214364828874384255L) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & 121L) != 0)) {
				{
				State = 145;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Var:
				case Val:
				case Try:
				case Raise:
				case True:
				case False:
				case This:
				case Open_Paren:
				case Open_Bracket:
				case Open_Brace:
				case Double_Dot:
				case Underscore:
				case Question_Mark:
				case Exclamation_Mark:
				case Exclamation_Question:
				case At_Sign:
				case Exclamation_At:
				case Caret:
				case Caret_Backslash:
				case Dollar_Backslash:
				case Ampersand:
				case Less_Than:
				case Tilde:
				case Identifier:
				case Integer_Literal:
				case Real_Literal:
				case Character_Literal:
				case String_Literal:
				case Verbatim_String_Literal:
					{
					State = 143;
					expression(0);
					}
					break;
				case NewLine:
					{
					State = 144;
					Match(NewLine);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 149;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Full_programContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(LoschScriptParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(LoschScriptParser.NewLine, i);
		}
		public Full_programContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_full_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterFull_program(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitFull_program(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFull_program(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Full_programContext full_program() {
		Full_programContext _localctx = new Full_programContext(Context, State);
		EnterRule(_localctx, 6, RULE_full_program);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			type();
			State = 154;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 151;
					Match(NewLine);
					}
					} 
				}
				State = 156;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			State = 161;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 21990232735492L) != 0)) {
				{
				State = 159;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Type:
				case Module:
				case Template:
				case Global:
				case Local:
				case Internal:
				case Protected:
				case Open:
				case Ref:
				case Val:
					{
					State = 157;
					type();
					}
					break;
				case NewLine:
					{
					State = 158;
					Match(NewLine);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 163;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_directiveContext : ParserRuleContext {
		public Import_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_directive; } }
	 
		public Import_directiveContext() { }
		public virtual void CopyFrom(Import_directiveContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Basic_importContext : Import_directiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Import() { return GetToken(LoschScriptParser.Import, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Full_identifierContext[] full_identifier() {
			return GetRuleContexts<Full_identifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Full_identifierContext full_identifier(int i) {
			return GetRuleContext<Full_identifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation_Mark() { return GetToken(LoschScriptParser.Exclamation_Mark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(LoschScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(LoschScriptParser.Comma, i);
		}
		public Basic_importContext(Import_directiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterBasic_import(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitBasic_import(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasic_import(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AliasContext : Import_directiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Import() { return GetToken(LoschScriptParser.Import, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(LoschScriptParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(LoschScriptParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Equals() { return GetTokens(LoschScriptParser.Equals); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals(int i) {
			return GetToken(LoschScriptParser.Equals, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Full_identifierContext[] full_identifier() {
			return GetRuleContexts<Full_identifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Full_identifierContext full_identifier(int i) {
			return GetRuleContext<Full_identifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation_Mark() { return GetToken(LoschScriptParser.Exclamation_Mark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(LoschScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(LoschScriptParser.Comma, i);
		}
		public AliasContext(Import_directiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlias(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Type_importContext : Import_directiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Import() { return GetToken(LoschScriptParser.Import, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Module() { return GetToken(LoschScriptParser.Module, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Full_identifierContext[] full_identifier() {
			return GetRuleContexts<Full_identifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Full_identifierContext full_identifier(int i) {
			return GetRuleContext<Full_identifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation_Mark() { return GetToken(LoschScriptParser.Exclamation_Mark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(LoschScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(LoschScriptParser.Comma, i);
		}
		public Type_importContext(Import_directiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterType_import(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitType_import(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_import(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Import_directiveContext import_directive() {
		Import_directiveContext _localctx = new Import_directiveContext(Context, State);
		EnterRule(_localctx, 8, RULE_import_directive);
		int _la;
		try {
			State = 205;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				_localctx = new Basic_importContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 165;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Exclamation_Mark) {
					{
					State = 164;
					Match(Exclamation_Mark);
					}
				}

				State = 167;
				Match(Import);
				State = 168;
				full_identifier();
				State = 173;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 169;
					Match(Comma);
					State = 170;
					full_identifier();
					}
					}
					State = 175;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new Type_importContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Exclamation_Mark) {
					{
					State = 176;
					Match(Exclamation_Mark);
					}
				}

				State = 179;
				Match(Import);
				State = 180;
				Match(Module);
				State = 181;
				full_identifier();
				State = 186;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 182;
					Match(Comma);
					State = 183;
					full_identifier();
					}
					}
					State = 188;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 3:
				_localctx = new AliasContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 190;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Exclamation_Mark) {
					{
					State = 189;
					Match(Exclamation_Mark);
					}
				}

				State = 192;
				Match(Import);
				State = 193;
				Match(Identifier);
				State = 194;
				Match(Equals);
				State = 195;
				full_identifier();
				State = 202;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 196;
					Match(Comma);
					State = 197;
					Match(Identifier);
					State = 198;
					Match(Equals);
					State = 199;
					full_identifier();
					}
					}
					State = 204;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Export_directiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Export() { return GetToken(LoschScriptParser.Export, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Full_identifierContext full_identifier() {
			return GetRuleContext<Full_identifierContext>(0);
		}
		public Export_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_export_directive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterExport_directive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitExport_directive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExport_directive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Export_directiveContext export_directive() {
		Export_directiveContext _localctx = new Export_directiveContext(Context, State);
		EnterRule(_localctx, 10, RULE_export_directive);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			Match(Export);
			State = 208;
			full_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Full_identifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(LoschScriptParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(LoschScriptParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dot() { return GetTokens(LoschScriptParser.Dot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot(int i) {
			return GetToken(LoschScriptParser.Dot, i);
		}
		public Full_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_full_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterFull_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitFull_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFull_identifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Full_identifierContext full_identifier() {
		Full_identifierContext _localctx = new Full_identifierContext(Context, State);
		EnterRule(_localctx, 12, RULE_full_identifier);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			Match(Identifier);
			State = 215;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 211;
					Match(Dot);
					State = 212;
					Match(Identifier);
					}
					} 
				}
				State = 217;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Code_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Brace() { return GetToken(LoschScriptParser.Open_Brace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Brace() { return GetToken(LoschScriptParser.Close_Brace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PlaceholderContext placeholder() {
			return GetRuleContext<PlaceholderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(LoschScriptParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(LoschScriptParser.NewLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Code_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterCode_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitCode_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCode_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Code_blockContext code_block() {
		Code_blockContext _localctx = new Code_blockContext(Context, State);
		EnterRule(_localctx, 14, RULE_code_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218;
			Match(Open_Brace);
			State = 227;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NewLine:
			case Var:
			case Val:
			case Try:
			case Raise:
			case True:
			case False:
			case This:
			case Open_Paren:
			case Open_Bracket:
			case Open_Brace:
			case Close_Brace:
			case Double_Dot:
			case Underscore:
			case Question_Mark:
			case Exclamation_Mark:
			case Exclamation_Question:
			case At_Sign:
			case Exclamation_At:
			case Caret:
			case Caret_Backslash:
			case Dollar_Backslash:
			case Ampersand:
			case Less_Than:
			case Tilde:
			case Identifier:
			case Integer_Literal:
			case Real_Literal:
			case Character_Literal:
			case String_Literal:
			case Verbatim_String_Literal:
				{
				State = 223;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 5900586325064548356L) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & -9214364828874384255L) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & 121L) != 0)) {
					{
					State = 221;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case NewLine:
						{
						State = 219;
						Match(NewLine);
						}
						break;
					case Var:
					case Val:
					case Try:
					case Raise:
					case True:
					case False:
					case This:
					case Open_Paren:
					case Open_Bracket:
					case Open_Brace:
					case Double_Dot:
					case Underscore:
					case Question_Mark:
					case Exclamation_Mark:
					case Exclamation_Question:
					case At_Sign:
					case Exclamation_At:
					case Caret:
					case Caret_Backslash:
					case Dollar_Backslash:
					case Ampersand:
					case Less_Than:
					case Tilde:
					case Identifier:
					case Integer_Literal:
					case Real_Literal:
					case Character_Literal:
					case String_Literal:
					case Verbatim_String_Literal:
						{
						State = 220;
						expression(0);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 225;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case Dot:
				{
				State = 226;
				placeholder();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 229;
			Match(Close_Brace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Subtraction_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(LoschScriptParser.Minus, 0); }
		public Subtraction_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterSubtraction_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitSubtraction_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtraction_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Bitwise_complement_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tilde() { return GetToken(LoschScriptParser.Tilde, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Bitwise_complement_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterBitwise_complement_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitBitwise_complement_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwise_complement_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Right_pipe_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Arrow_Right() { return GetToken(LoschScriptParser.Arrow_Right, 0); }
		public Right_pipe_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterRight_pipe_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitRight_pipe_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRight_pipe_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Array_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Bracket() { return GetToken(LoschScriptParser.Open_Bracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Bracket() { return GetToken(LoschScriptParser.Close_Bracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(LoschScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(LoschScriptParser.Comma, i);
		}
		public Array_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterArray_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitArray_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Multiply_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Asterisk() { return GetToken(LoschScriptParser.Asterisk, 0); }
		public Multiply_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterMultiply_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitMultiply_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiply_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Loop_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(LoschScriptParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(LoschScriptParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Arrow_Right() { return GetTokens(LoschScriptParser.Arrow_Right); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Arrow_Right(int i) {
			return GetToken(LoschScriptParser.Arrow_Right, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Loop_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterLoop_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitLoop_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoop_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Logical_or_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Bar() { return GetToken(LoschScriptParser.Double_Bar, 0); }
		public Logical_or_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterLogical_or_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitLogical_or_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_or_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Raise_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Raise() { return GetToken(LoschScriptParser.Raise, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Raise_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterRaise_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitRaise_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaise_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Block_postfix_unless_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Postfix_unless_branchContext postfix_unless_branch() {
			return GetRuleContext<Postfix_unless_branchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine() { return GetToken(LoschScriptParser.NewLine, 0); }
		public Block_postfix_unless_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterBlock_postfix_unless_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitBlock_postfix_unless_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock_postfix_unless_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class And_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ampersand() { return GetToken(LoschScriptParser.Ampersand, 0); }
		public And_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterAnd_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitAnd_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Newlined_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine() { return GetToken(LoschScriptParser.NewLine, 0); }
		public Newlined_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterNewlined_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitNewlined_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewlined_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Block_postfix_if_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Postfix_if_branchContext postfix_if_branch() {
			return GetRuleContext<Postfix_if_branchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine() { return GetToken(LoschScriptParser.NewLine, 0); }
		public Block_postfix_if_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterBlock_postfix_if_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitBlock_postfix_if_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock_postfix_if_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Postfix_unless_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Postfix_unless_branchContext postfix_unless_branch() {
			return GetRuleContext<Postfix_unless_branchContext>(0);
		}
		public Postfix_unless_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterPostfix_unless_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitPostfix_unless_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfix_unless_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Power_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Asterisk() { return GetToken(LoschScriptParser.Double_Asterisk, 0); }
		public Power_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterPower_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitPower_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPower_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Addition_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(LoschScriptParser.Plus, 0); }
		public Addition_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterAddition_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitAddition_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddition_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Atom_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public Atom_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterAtom_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitAtom_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Index_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode At_Sign() { return GetToken(LoschScriptParser.At_Sign, 0); }
		public Index_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterIndex_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitIndex_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Comparison_expressionContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less_Than() { return GetToken(LoschScriptParser.Less_Than, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less_Equals() { return GetToken(LoschScriptParser.Less_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater_Than() { return GetToken(LoschScriptParser.Greater_Than, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater_Equals() { return GetToken(LoschScriptParser.Greater_Equals, 0); }
		public Comparison_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterComparison_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitComparison_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Or_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bar() { return GetToken(LoschScriptParser.Bar, 0); }
		public Or_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterOr_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitOr_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Try_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Try_branchContext try_branch() {
			return GetRuleContext<Try_branchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Catch_branchContext[] catch_branch() {
			return GetRuleContexts<Catch_branchContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Catch_branchContext catch_branch(int i) {
			return GetRuleContext<Catch_branchContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fault_branchContext fault_branch() {
			return GetRuleContext<Fault_branchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Finally_branchContext finally_branch() {
			return GetRuleContext<Finally_branchContext>(0);
		}
		public Try_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterTry_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitTry_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTry_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Dotted_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(LoschScriptParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(LoschScriptParser.Identifier, 0); }
		public Dotted_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterDotted_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitDotted_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDotted_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Left_shift_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Less_Than() { return GetToken(LoschScriptParser.Double_Less_Than, 0); }
		public Left_shift_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterLeft_shift_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitLeft_shift_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeft_shift_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Attributed_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public Attributed_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterAttributed_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitAttributed_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributed_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Equality_expressionContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Equals() { return GetToken(LoschScriptParser.Double_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation_Equals() { return GetToken(LoschScriptParser.Exclamation_Equals, 0); }
		public Equality_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterEquality_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitEquality_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Until_loopContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation_At() { return GetToken(LoschScriptParser.Exclamation_At, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(LoschScriptParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		public Until_loopContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterUntil_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitUntil_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUntil_loop(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class While_loopContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode At_Sign() { return GetToken(LoschScriptParser.At_Sign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(LoschScriptParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		public While_loopContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterWhile_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitWhile_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_loop(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Xor_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Caret() { return GetToken(LoschScriptParser.Caret, 0); }
		public Xor_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterXor_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitXor_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXor_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Prefix_if_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public If_branchContext if_branch() {
			return GetRuleContext<If_branchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(LoschScriptParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(LoschScriptParser.NewLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Elif_branchContext[] elif_branch() {
			return GetRuleContexts<Elif_branchContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Elif_branchContext elif_branch(int i) {
			return GetRuleContext<Elif_branchContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_branchContext else_branch() {
			return GetRuleContext<Else_branchContext>(0);
		}
		public Prefix_if_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterPrefix_if_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitPrefix_if_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefix_if_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Logical_negation_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation_Mark() { return GetToken(LoschScriptParser.Exclamation_Mark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Logical_negation_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterLogical_negation_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitLogical_negation_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_negation_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Right_shift_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Greater_Than() { return GetToken(LoschScriptParser.Double_Greater_Than, 0); }
		public Right_shift_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterRight_shift_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitRight_shift_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRight_shift_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Rethrow_exceptionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Raise() { return GetToken(LoschScriptParser.Raise, 0); }
		public Rethrow_exceptionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterRethrow_exception(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitRethrow_exception(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRethrow_exception(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Range_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public Range_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterRange_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitRange_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Member_access_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dot() { return GetTokens(LoschScriptParser.Dot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot(int i) {
			return GetToken(LoschScriptParser.Dot, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(LoschScriptParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(LoschScriptParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArglistContext arglist() {
			return GetRuleContext<ArglistContext>(0);
		}
		public Member_access_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterMember_access_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitMember_access_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_access_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Remainder_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Percent() { return GetToken(LoschScriptParser.Percent, 0); }
		public Remainder_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterRemainder_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitRemainder_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemainder_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Typeof_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Caret_Backslash() { return GetToken(LoschScriptParser.Caret_Backslash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(LoschScriptParser.Identifier, 0); }
		public Typeof_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeof_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeof_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeof_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Block_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		public Block_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterBlock_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitBlock_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Left_pipe_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Arrow_Left() { return GetToken(LoschScriptParser.Arrow_Left, 0); }
		public Left_pipe_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterLeft_pipe_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitLeft_pipe_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeft_pipe_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Dictionary_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Open_Bracket() { return GetTokens(LoschScriptParser.Open_Bracket); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Bracket(int i) {
			return GetToken(LoschScriptParser.Open_Bracket, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Close_Bracket() { return GetTokens(LoschScriptParser.Close_Bracket); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Bracket(int i) {
			return GetToken(LoschScriptParser.Close_Bracket, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(LoschScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(LoschScriptParser.Comma, i);
		}
		public Dictionary_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterDictionary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitDictionary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictionary_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(LoschScriptParser.Equals, 0); }
		public AssignmentContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Prefix_unless_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unless_branchContext unless_branch() {
			return GetRuleContext<Unless_branchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(LoschScriptParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(LoschScriptParser.NewLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_unless_branchContext[] else_unless_branch() {
			return GetRuleContexts<Else_unless_branchContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_unless_branchContext else_unless_branch(int i) {
			return GetRuleContext<Else_unless_branchContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_branchContext else_branch() {
			return GetRuleContext<Else_branchContext>(0);
		}
		public Prefix_unless_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterPrefix_unless_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitPrefix_unless_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefix_unless_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Local_declaration_or_assignmentContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(LoschScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(LoschScriptParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(LoschScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Var() { return GetToken(LoschScriptParser.Var, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Val() { return GetToken(LoschScriptParser.Val, 0); }
		public Local_declaration_or_assignmentContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterLocal_declaration_or_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitLocal_declaration_or_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_declaration_or_assignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Tuple_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Paren() { return GetToken(LoschScriptParser.Open_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Paren() { return GetToken(LoschScriptParser.Close_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(LoschScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(LoschScriptParser.Comma, i);
		}
		public Tuple_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterTuple_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitTuple_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTuple_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Nameof_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dollar_Backslash() { return GetToken(LoschScriptParser.Dollar_Backslash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Nameof_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterNameof_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitNameof_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameof_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Postfix_if_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Postfix_if_branchContext postfix_if_branch() {
			return GetRuleContext<Postfix_if_branchContext>(0);
		}
		public Postfix_if_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterPostfix_if_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitPostfix_if_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfix_if_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Divide_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Slash() { return GetToken(LoschScriptParser.Slash, 0); }
		public Divide_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterDivide_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitDivide_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivide_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Byref_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ampersand() { return GetToken(LoschScriptParser.Ampersand, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Byref_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterByref_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitByref_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitByref_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Array_element_assignmentContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode At_Sign() { return GetToken(LoschScriptParser.At_Sign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(LoschScriptParser.Equals, 0); }
		public Array_element_assignmentContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterArray_element_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitArray_element_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_element_assignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Logical_and_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Ampersand() { return GetToken(LoschScriptParser.Double_Ampersand, 0); }
		public Logical_and_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterLogical_and_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitLogical_and_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_and_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Full_identifier_member_access_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Full_identifierContext full_identifier() {
			return GetRuleContext<Full_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArglistContext arglist() {
			return GetRuleContext<ArglistContext>(0);
		}
		public Full_identifier_member_access_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterFull_identifier_member_access_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitFull_identifier_member_access_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFull_identifier_member_access_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Implementation_query_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Dot_Question_Mark() { return GetToken(LoschScriptParser.Double_Dot_Question_Mark, 0); }
		public Implementation_query_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterImplementation_query_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitImplementation_query_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplementation_query_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 408;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				{
				_localctx = new Bitwise_complement_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 232;
				Match(Tilde);
				State = 233;
				expression(50);
				}
				break;
			case 2:
				{
				_localctx = new Logical_negation_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 234;
				Match(Exclamation_Mark);
				State = 235;
				expression(47);
				}
				break;
			case 3:
				{
				_localctx = new Byref_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 236;
				Match(Ampersand);
				State = 237;
				expression(32);
				}
				break;
			case 4:
				{
				_localctx = new Typeof_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 238;
				Match(Caret_Backslash);
				State = 239;
				Match(Identifier);
				}
				break;
			case 5:
				{
				_localctx = new Nameof_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 240;
				Match(Dollar_Backslash);
				State = 241;
				expression(30);
				}
				break;
			case 6:
				{
				_localctx = new Local_declaration_or_assignmentContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 243;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Var || _la==Val) {
					{
					State = 242;
					_la = TokenStream.LA(1);
					if ( !(_la==Var || _la==Val) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 245;
				Match(Identifier);
				State = 248;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 246;
					Match(Colon);
					State = 247;
					type_name();
					}
				}

				State = 250;
				Match(Equals);
				State = 251;
				expression(28);
				}
				break;
			case 7:
				{
				_localctx = new Range_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 252;
				range();
				}
				break;
			case 8:
				{
				_localctx = new Attributed_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 254;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 253;
						attribute();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 256;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 258;
				expression(22);
				}
				break;
			case 9:
				{
				_localctx = new Prefix_if_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 260;
				if_branch();
				State = 264;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 261;
						Match(NewLine);
						}
						} 
					}
					State = 266;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
				}
				State = 270;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 267;
						elif_branch();
						}
						} 
					}
					State = 272;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
				}
				State = 276;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 273;
						Match(NewLine);
						}
						} 
					}
					State = 278;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
				}
				State = 280;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
				case 1:
					{
					State = 279;
					else_branch();
					}
					break;
				}
				}
				break;
			case 10:
				{
				_localctx = new Block_postfix_if_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 282;
				code_block();
				State = 284;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NewLine) {
					{
					State = 283;
					Match(NewLine);
					}
				}

				State = 286;
				postfix_if_branch();
				}
				break;
			case 11:
				{
				_localctx = new Prefix_unless_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 288;
				unless_branch();
				State = 292;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 289;
						Match(NewLine);
						}
						} 
					}
					State = 294;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
				}
				State = 298;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 295;
						else_unless_branch();
						}
						} 
					}
					State = 300;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
				}
				State = 304;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 301;
						Match(NewLine);
						}
						} 
					}
					State = 306;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
				}
				State = 308;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
				case 1:
					{
					State = 307;
					else_branch();
					}
					break;
				}
				}
				break;
			case 12:
				{
				_localctx = new Block_postfix_unless_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 310;
				code_block();
				State = 312;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NewLine) {
					{
					State = 311;
					Match(NewLine);
					}
				}

				State = 314;
				postfix_unless_branch();
				}
				break;
			case 13:
				{
				_localctx = new Loop_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 316;
				Match(Identifier);
				State = 317;
				Match(Arrow_Right);
				State = 326;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
				case 1:
					{
					State = 322;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 318;
							Match(Identifier);
							State = 319;
							Match(Arrow_Right);
							}
							} 
						}
						State = 324;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
					}
					State = 325;
					Match(Identifier);
					}
					break;
				}
				State = 328;
				expression(15);
				}
				break;
			case 14:
				{
				_localctx = new While_loopContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 329;
				Match(At_Sign);
				State = 330;
				expression(0);
				State = 331;
				Match(Equals);
				State = 334;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
				case 1:
					{
					State = 332;
					code_block();
					}
					break;
				case 2:
					{
					State = 333;
					expression(0);
					}
					break;
				}
				}
				break;
			case 15:
				{
				_localctx = new Until_loopContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 336;
				Match(Exclamation_At);
				State = 337;
				expression(0);
				State = 338;
				Match(Equals);
				State = 341;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
				case 1:
					{
					State = 339;
					code_block();
					}
					break;
				case 2:
					{
					State = 340;
					expression(0);
					}
					break;
				}
				}
				break;
			case 16:
				{
				_localctx = new Try_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 343;
				try_branch();
				State = 347;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 344;
						catch_branch();
						}
						} 
					}
					State = 349;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
				}
				State = 351;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
				case 1:
					{
					State = 350;
					fault_branch();
					}
					break;
				}
				State = 354;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
				case 1:
					{
					State = 353;
					finally_branch();
					}
					break;
				}
				}
				break;
			case 17:
				{
				_localctx = new Raise_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 356;
				Match(Raise);
				State = 357;
				expression(11);
				}
				break;
			case 18:
				{
				_localctx = new Rethrow_exceptionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 358;
				Match(Raise);
				}
				break;
			case 19:
				{
				_localctx = new Array_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 359;
				Match(Open_Bracket);
				State = 368;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 43)) & ~0x3f) == 0 && ((1L << (_la - 43)) & 146392124203088995L) != 0) || ((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 248833L) != 0)) {
					{
					State = 360;
					expression(0);
					State = 365;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==Comma) {
						{
						{
						State = 361;
						Match(Comma);
						State = 362;
						expression(0);
						}
						}
						State = 367;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 370;
				Match(Close_Bracket);
				}
				break;
			case 20:
				{
				_localctx = new Tuple_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 371;
				Match(Open_Paren);
				State = 372;
				expression(0);
				State = 375;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 373;
					Match(Comma);
					State = 374;
					expression(0);
					}
					}
					State = 377;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Comma );
				State = 379;
				Match(Close_Paren);
				}
				break;
			case 21:
				{
				_localctx = new Dictionary_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 381;
				Match(Open_Bracket);
				State = 399;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Open_Bracket) {
					{
					State = 382;
					Match(Open_Bracket);
					State = 383;
					expression(0);
					State = 384;
					Match(Comma);
					State = 385;
					expression(0);
					State = 386;
					Match(Close_Bracket);
					State = 396;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==Comma) {
						{
						{
						State = 387;
						Match(Comma);
						State = 388;
						Match(Open_Bracket);
						State = 389;
						expression(0);
						State = 390;
						Match(Comma);
						State = 391;
						expression(0);
						State = 392;
						Match(Close_Bracket);
						}
						}
						State = 398;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 401;
				Match(Close_Bracket);
				}
				break;
			case 22:
				{
				_localctx = new Atom_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 402;
				atom();
				}
				break;
			case 23:
				{
				_localctx = new Block_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 403;
				code_block();
				}
				break;
			case 24:
				{
				_localctx = new Full_identifier_member_access_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 404;
				full_identifier();
				State = 406;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
				case 1:
					{
					State = 405;
					arglist();
					}
					break;
				}
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 497;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 495;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
					case 1:
						{
						_localctx = new Array_element_assignmentContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 410;
						if (!(Precpred(Context, 49))) throw new FailedPredicateException(this, "Precpred(Context, 49)");
						State = 411;
						Match(At_Sign);
						State = 412;
						expression(0);
						State = 413;
						Match(Equals);
						State = 414;
						expression(50);
						}
						break;
					case 2:
						{
						_localctx = new Power_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 416;
						if (!(Precpred(Context, 48))) throw new FailedPredicateException(this, "Precpred(Context, 48)");
						State = 417;
						Match(Double_Asterisk);
						State = 418;
						expression(49);
						}
						break;
					case 3:
						{
						_localctx = new Multiply_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 419;
						if (!(Precpred(Context, 46))) throw new FailedPredicateException(this, "Precpred(Context, 46)");
						State = 420;
						Match(Asterisk);
						State = 421;
						expression(47);
						}
						break;
					case 4:
						{
						_localctx = new Divide_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 422;
						if (!(Precpred(Context, 45))) throw new FailedPredicateException(this, "Precpred(Context, 45)");
						State = 423;
						Match(Slash);
						State = 424;
						expression(46);
						}
						break;
					case 5:
						{
						_localctx = new Remainder_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 425;
						if (!(Precpred(Context, 44))) throw new FailedPredicateException(this, "Precpred(Context, 44)");
						State = 426;
						Match(Percent);
						State = 427;
						expression(45);
						}
						break;
					case 6:
						{
						_localctx = new Addition_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 428;
						if (!(Precpred(Context, 43))) throw new FailedPredicateException(this, "Precpred(Context, 43)");
						State = 429;
						Match(Plus);
						State = 430;
						expression(44);
						}
						break;
					case 7:
						{
						_localctx = new Subtraction_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 431;
						if (!(Precpred(Context, 42))) throw new FailedPredicateException(this, "Precpred(Context, 42)");
						State = 432;
						Match(Minus);
						State = 433;
						expression(43);
						}
						break;
					case 8:
						{
						_localctx = new Left_shift_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 434;
						if (!(Precpred(Context, 41))) throw new FailedPredicateException(this, "Precpred(Context, 41)");
						State = 435;
						Match(Double_Less_Than);
						State = 436;
						expression(42);
						}
						break;
					case 9:
						{
						_localctx = new Right_shift_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 437;
						if (!(Precpred(Context, 40))) throw new FailedPredicateException(this, "Precpred(Context, 40)");
						State = 438;
						Match(Double_Greater_Than);
						State = 439;
						expression(41);
						}
						break;
					case 10:
						{
						_localctx = new Equality_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 440;
						if (!(Precpred(Context, 39))) throw new FailedPredicateException(this, "Precpred(Context, 39)");
						State = 441;
						((Equality_expressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==Double_Equals || _la==Exclamation_Equals) ) {
							((Equality_expressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 442;
						expression(40);
						}
						break;
					case 11:
						{
						_localctx = new Comparison_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 443;
						if (!(Precpred(Context, 38))) throw new FailedPredicateException(this, "Precpred(Context, 38)");
						State = 444;
						((Comparison_expressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & 15L) != 0)) ) {
							((Comparison_expressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 445;
						expression(39);
						}
						break;
					case 12:
						{
						_localctx = new And_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 446;
						if (!(Precpred(Context, 37))) throw new FailedPredicateException(this, "Precpred(Context, 37)");
						State = 447;
						Match(Ampersand);
						State = 448;
						expression(38);
						}
						break;
					case 13:
						{
						_localctx = new Logical_and_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 449;
						if (!(Precpred(Context, 36))) throw new FailedPredicateException(this, "Precpred(Context, 36)");
						State = 450;
						Match(Double_Ampersand);
						State = 451;
						expression(37);
						}
						break;
					case 14:
						{
						_localctx = new Or_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 452;
						if (!(Precpred(Context, 35))) throw new FailedPredicateException(this, "Precpred(Context, 35)");
						State = 453;
						Match(Bar);
						State = 454;
						expression(36);
						}
						break;
					case 15:
						{
						_localctx = new Logical_or_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 455;
						if (!(Precpred(Context, 34))) throw new FailedPredicateException(this, "Precpred(Context, 34)");
						State = 456;
						Match(Double_Bar);
						State = 457;
						expression(35);
						}
						break;
					case 16:
						{
						_localctx = new Xor_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 458;
						if (!(Precpred(Context, 33))) throw new FailedPredicateException(this, "Precpred(Context, 33)");
						State = 459;
						Match(Caret);
						State = 460;
						expression(34);
						}
						break;
					case 17:
						{
						_localctx = new Implementation_query_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 461;
						if (!(Precpred(Context, 29))) throw new FailedPredicateException(this, "Precpred(Context, 29)");
						State = 462;
						Match(Double_Dot_Question_Mark);
						State = 463;
						expression(30);
						}
						break;
					case 18:
						{
						_localctx = new Right_pipe_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 464;
						if (!(Precpred(Context, 27))) throw new FailedPredicateException(this, "Precpred(Context, 27)");
						State = 465;
						Match(Arrow_Right);
						State = 466;
						expression(28);
						}
						break;
					case 19:
						{
						_localctx = new Left_pipe_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 467;
						if (!(Precpred(Context, 26))) throw new FailedPredicateException(this, "Precpred(Context, 26)");
						State = 468;
						Match(Arrow_Left);
						State = 469;
						expression(27);
						}
						break;
					case 20:
						{
						_localctx = new Index_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 470;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 471;
						Match(At_Sign);
						State = 472;
						expression(24);
						}
						break;
					case 21:
						{
						_localctx = new AssignmentContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 473;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 474;
						Match(Equals);
						State = 475;
						expression(2);
						}
						break;
					case 22:
						{
						_localctx = new Dotted_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 476;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 477;
						Match(Dot);
						State = 478;
						Match(Identifier);
						}
						break;
					case 23:
						{
						_localctx = new Postfix_if_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 479;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 480;
						postfix_if_branch();
						}
						break;
					case 24:
						{
						_localctx = new Postfix_unless_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 481;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 482;
						postfix_unless_branch();
						}
						break;
					case 25:
						{
						_localctx = new Newlined_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 483;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 484;
						Match(NewLine);
						}
						break;
					case 26:
						{
						_localctx = new Member_access_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 485;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 488;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 486;
								Match(Dot);
								State = 487;
								Match(Identifier);
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 490;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						State = 493;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
						case 1:
							{
							State = 492;
							arglist();
							}
							break;
						}
						}
						break;
					}
					} 
				}
				State = 499;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression_atomContext expression_atom() {
			return GetRuleContext<Expression_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Integer_atomContext integer_atom() {
			return GetRuleContext<Integer_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Real_atomContext real_atom() {
			return GetRuleContext<Real_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Boolean_atomContext boolean_atom() {
			return GetRuleContext<Boolean_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_atomContext string_atom() {
			return GetRuleContext<String_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Character_atomContext character_atom() {
			return GetRuleContext<Character_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Empty_atomContext empty_atom() {
			return GetRuleContext<Empty_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Wildcard_atomContext wildcard_atom() {
			return GetRuleContext<Wildcard_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public This_atomContext this_atom() {
			return GetRuleContext<This_atomContext>(0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 18, RULE_atom);
		try {
			State = 509;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 500;
				expression_atom();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 501;
				integer_atom();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 502;
				real_atom();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 503;
				boolean_atom();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 504;
				string_atom();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 505;
				character_atom();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 506;
				empty_atom();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 507;
				wildcard_atom();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 508;
				this_atom();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class This_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode This() { return GetToken(LoschScriptParser.This, 0); }
		public This_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_this_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterThis_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitThis_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThis_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public This_atomContext this_atom() {
		This_atomContext _localctx = new This_atomContext(Context, State);
		EnterRule(_localctx, 20, RULE_this_atom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 511;
			Match(This);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Paren() { return GetToken(LoschScriptParser.Open_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Paren() { return GetToken(LoschScriptParser.Close_Paren, 0); }
		public Expression_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterExpression_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitExpression_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_atomContext expression_atom() {
		Expression_atomContext _localctx = new Expression_atomContext(Context, State);
		EnterRule(_localctx, 22, RULE_expression_atom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 513;
			Match(Open_Paren);
			State = 514;
			expression(0);
			State = 515;
			Match(Close_Paren);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Integer_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Integer_Literal() { return GetToken(LoschScriptParser.Integer_Literal, 0); }
		public Integer_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterInteger_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitInteger_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteger_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Integer_atomContext integer_atom() {
		Integer_atomContext _localctx = new Integer_atomContext(Context, State);
		EnterRule(_localctx, 24, RULE_integer_atom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 517;
			Match(Integer_Literal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Real_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Real_Literal() { return GetToken(LoschScriptParser.Real_Literal, 0); }
		public Real_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_real_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterReal_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitReal_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReal_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Real_atomContext real_atom() {
		Real_atomContext _localctx = new Real_atomContext(Context, State);
		EnterRule(_localctx, 26, RULE_real_atom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 519;
			Match(Real_Literal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Boolean_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode True() { return GetToken(LoschScriptParser.True, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode False() { return GetToken(LoschScriptParser.False, 0); }
		public Boolean_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterBoolean_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitBoolean_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Boolean_atomContext boolean_atom() {
		Boolean_atomContext _localctx = new Boolean_atomContext(Context, State);
		EnterRule(_localctx, 28, RULE_boolean_atom);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 521;
			_la = TokenStream.LA(1);
			if ( !(_la==True || _la==False) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String_Literal() { return GetToken(LoschScriptParser.String_Literal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Verbatim_String_Literal() { return GetToken(LoschScriptParser.Verbatim_String_Literal, 0); }
		public String_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterString_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitString_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_atomContext string_atom() {
		String_atomContext _localctx = new String_atomContext(Context, State);
		EnterRule(_localctx, 30, RULE_string_atom);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 523;
			_la = TokenStream.LA(1);
			if ( !(_la==String_Literal || _la==Verbatim_String_Literal) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Character_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Character_Literal() { return GetToken(LoschScriptParser.Character_Literal, 0); }
		public Character_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_character_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterCharacter_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitCharacter_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharacter_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Character_atomContext character_atom() {
		Character_atomContext _localctx = new Character_atomContext(Context, State);
		EnterRule(_localctx, 32, RULE_character_atom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 525;
			Match(Character_Literal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Empty_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Paren() { return GetToken(LoschScriptParser.Open_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Paren() { return GetToken(LoschScriptParser.Close_Paren, 0); }
		public Empty_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_empty_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterEmpty_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitEmpty_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmpty_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Empty_atomContext empty_atom() {
		Empty_atomContext _localctx = new Empty_atomContext(Context, State);
		EnterRule(_localctx, 34, RULE_empty_atom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 527;
			Match(Open_Paren);
			State = 528;
			Match(Close_Paren);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Wildcard_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Underscore() { return GetToken(LoschScriptParser.Underscore, 0); }
		public Wildcard_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wildcard_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterWildcard_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitWildcard_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWildcard_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Wildcard_atomContext wildcard_atom() {
		Wildcard_atomContext _localctx = new Wildcard_atomContext(Context, State);
		EnterRule(_localctx, 36, RULE_wildcard_atom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 530;
			Match(Underscore);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Identifier_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(LoschScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Full_identifierContext full_identifier() {
			return GetRuleContext<Full_identifierContext>(0);
		}
		public Identifier_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterIdentifier_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitIdentifier_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Identifier_atomContext identifier_atom() {
		Identifier_atomContext _localctx = new Identifier_atomContext(Context, State);
		EnterRule(_localctx, 38, RULE_identifier_atom);
		int _la;
		try {
			State = 546;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 535;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Less_Than) {
					{
					{
					State = 532;
					attribute();
					}
					}
					State = 537;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 538;
				Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 542;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Less_Than) {
					{
					{
					State = 539;
					attribute();
					}
					}
					State = 544;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 545;
				full_identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Builtin_type_aliasContext builtin_type_alias() {
			return GetRuleContext<Builtin_type_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ampersand() { return GetToken(LoschScriptParser.Ampersand, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Paren() { return GetToken(LoschScriptParser.Open_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext[] type_name() {
			return GetRuleContexts<Type_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name(int i) {
			return GetRuleContext<Type_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Paren() { return GetToken(LoschScriptParser.Close_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Bar() { return GetTokens(LoschScriptParser.Bar); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bar(int i) {
			return GetToken(LoschScriptParser.Bar, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_identifierContext generic_identifier() {
			return GetRuleContext<Generic_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_atomContext identifier_atom() {
			return GetRuleContext<Identifier_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Param_list_typeContext param_list_type() {
			return GetRuleContext<Param_list_typeContext>(0);
		}
		public Type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterType_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitType_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_nameContext type_name() {
		Type_nameContext _localctx = new Type_nameContext(Context, State);
		EnterRule(_localctx, 40, RULE_type_name);
		int _la;
		try {
			State = 571;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 548;
				builtin_type_alias();
				State = 550;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
				case 1:
					{
					State = 549;
					Match(Ampersand);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 552;
				Match(Open_Paren);
				State = 553;
				type_name();
				State = 556;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 554;
					Match(Bar);
					State = 555;
					type_name();
					}
					}
					State = 558;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Bar );
				State = 560;
				Match(Close_Paren);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 562;
				generic_identifier();
				State = 564;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
				case 1:
					{
					State = 563;
					Match(Ampersand);
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 566;
				identifier_atom();
				State = 568;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
				case 1:
					{
					State = 567;
					Match(Ampersand);
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 570;
				param_list_type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Builtin_type_aliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int8() { return GetToken(LoschScriptParser.Int8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UInt8() { return GetToken(LoschScriptParser.UInt8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int16() { return GetToken(LoschScriptParser.Int16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UInt16() { return GetToken(LoschScriptParser.UInt16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int32() { return GetToken(LoschScriptParser.Int32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UInt32() { return GetToken(LoschScriptParser.UInt32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int64() { return GetToken(LoschScriptParser.Int64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UInt64() { return GetToken(LoschScriptParser.UInt64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Native() { return GetToken(LoschScriptParser.Native, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNative() { return GetToken(LoschScriptParser.UNative, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Float32() { return GetToken(LoschScriptParser.Float32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Float64() { return GetToken(LoschScriptParser.Float64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Decimal() { return GetToken(LoschScriptParser.Decimal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Char() { return GetToken(LoschScriptParser.Char, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(LoschScriptParser.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bool() { return GetToken(LoschScriptParser.Bool, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Object() { return GetToken(LoschScriptParser.Object, 0); }
		public Builtin_type_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_builtin_type_alias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterBuiltin_type_alias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitBuiltin_type_alias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuiltin_type_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Builtin_type_aliasContext builtin_type_alias() {
		Builtin_type_aliasContext _localctx = new Builtin_type_aliasContext(Context, State);
		EnterRule(_localctx, 42, RULE_builtin_type_alias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 573;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 824629526528L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Param_list_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Paren_Bar() { return GetToken(LoschScriptParser.Open_Paren_Bar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext[] type_name() {
			return GetRuleContexts<Type_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name(int i) {
			return GetRuleContext<Type_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bar_Close_Paren() { return GetToken(LoschScriptParser.Bar_Close_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(LoschScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(LoschScriptParser.Comma, i);
		}
		public Param_list_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param_list_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterParam_list_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitParam_list_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam_list_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Param_list_typeContext param_list_type() {
		Param_list_typeContext _localctx = new Param_list_typeContext(Context, State);
		EnterRule(_localctx, 44, RULE_param_list_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 575;
			Match(Open_Paren_Bar);
			State = 576;
			type_name();
			State = 581;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 577;
				Match(Comma);
				State = 578;
				type_name();
				}
				}
				State = 583;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 584;
			Match(Bar_Close_Paren);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Question_Mark() { return GetToken(LoschScriptParser.Question_Mark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(LoschScriptParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		public If_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterIf_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitIf_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_branchContext if_branch() {
		If_branchContext _localctx = new If_branchContext(Context, State);
		EnterRule(_localctx, 46, RULE_if_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 586;
			Match(Question_Mark);
			State = 587;
			expression(0);
			State = 588;
			Match(Equals);
			State = 591;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				{
				State = 589;
				code_block();
				}
				break;
			case 2:
				{
				State = 590;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Postfix_if_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Question_Mark() { return GetToken(LoschScriptParser.Question_Mark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Postfix_if_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfix_if_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterPostfix_if_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitPostfix_if_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfix_if_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Postfix_if_branchContext postfix_if_branch() {
		Postfix_if_branchContext _localctx = new Postfix_if_branchContext(Context, State);
		EnterRule(_localctx, 48, RULE_postfix_if_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 593;
			Match(Question_Mark);
			State = 594;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Elif_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(LoschScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(LoschScriptParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		public Elif_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elif_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterElif_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitElif_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElif_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Elif_branchContext elif_branch() {
		Elif_branchContext _localctx = new Elif_branchContext(Context, State);
		EnterRule(_localctx, 50, RULE_elif_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 596;
			Match(Colon);
			State = 597;
			expression(0);
			State = 598;
			Match(Equals);
			State = 601;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				{
				State = 599;
				code_block();
				}
				break;
			case 2:
				{
				State = 600;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(LoschScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(LoschScriptParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Else_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterElse_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitElse_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_branchContext else_branch() {
		Else_branchContext _localctx = new Else_branchContext(Context, State);
		EnterRule(_localctx, 52, RULE_else_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 603;
			Match(Colon);
			State = 604;
			Match(Equals);
			State = 607;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
			case 1:
				{
				State = 605;
				code_block();
				}
				break;
			case 2:
				{
				State = 606;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unless_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation_Question() { return GetToken(LoschScriptParser.Exclamation_Question, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(LoschScriptParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		public Unless_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unless_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterUnless_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitUnless_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnless_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unless_branchContext unless_branch() {
		Unless_branchContext _localctx = new Unless_branchContext(Context, State);
		EnterRule(_localctx, 54, RULE_unless_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 609;
			Match(Exclamation_Question);
			State = 610;
			expression(0);
			State = 611;
			Match(Equals);
			State = 614;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				{
				State = 612;
				code_block();
				}
				break;
			case 2:
				{
				State = 613;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_unless_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation_Colon() { return GetToken(LoschScriptParser.Exclamation_Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(LoschScriptParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		public Else_unless_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_unless_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterElse_unless_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitElse_unless_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_unless_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_unless_branchContext else_unless_branch() {
		Else_unless_branchContext _localctx = new Else_unless_branchContext(Context, State);
		EnterRule(_localctx, 56, RULE_else_unless_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 616;
			Match(Exclamation_Colon);
			State = 617;
			expression(0);
			State = 618;
			Match(Equals);
			State = 621;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
			case 1:
				{
				State = 619;
				code_block();
				}
				break;
			case 2:
				{
				State = 620;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Postfix_unless_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation_Question() { return GetToken(LoschScriptParser.Exclamation_Question, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Postfix_unless_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfix_unless_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterPostfix_unless_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitPostfix_unless_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfix_unless_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Postfix_unless_branchContext postfix_unless_branch() {
		Postfix_unless_branchContext _localctx = new Postfix_unless_branchContext(Context, State);
		EnterRule(_localctx, 58, RULE_postfix_unless_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 623;
			Match(Exclamation_Question);
			State = 624;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Dot() { return GetToken(LoschScriptParser.Double_Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext[] index() {
			return GetRuleContexts<IndexContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index(int i) {
			return GetRuleContext<IndexContext>(i);
		}
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(Context, State);
		EnterRule(_localctx, 60, RULE_range);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 627;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Caret || _la==Integer_Literal) {
				{
				State = 626;
				index();
				}
			}

			State = 629;
			Match(Double_Dot);
			State = 631;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
			case 1:
				{
				State = 630;
				index();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Integer_atomContext integer_atom() {
			return GetRuleContext<Integer_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Caret() { return GetToken(LoschScriptParser.Caret, 0); }
		public IndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexContext index() {
		IndexContext _localctx = new IndexContext(Context, State);
		EnterRule(_localctx, 62, RULE_index);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 634;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Caret) {
				{
				State = 633;
				Match(Caret);
				}
			}

			State = 636;
			integer_atom();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArglistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(LoschScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(LoschScriptParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Comma() { return GetToken(LoschScriptParser.Double_Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(LoschScriptParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(LoschScriptParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Colon() { return GetTokens(LoschScriptParser.Colon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon(int i) {
			return GetToken(LoschScriptParser.Colon, i);
		}
		public ArglistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arglist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterArglist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitArglist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArglist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArglistContext arglist() {
		ArglistContext _localctx = new ArglistContext(Context, State);
		EnterRule(_localctx, 64, RULE_arglist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 640;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				{
				State = 638;
				Match(Identifier);
				State = 639;
				Match(Colon);
				}
				break;
			}
			State = 642;
			expression(0);
			}
			State = 652;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 644;
					Match(Comma);
					{
					State = 647;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
					case 1:
						{
						State = 645;
						Match(Identifier);
						State = 646;
						Match(Colon);
						}
						break;
					}
					State = 649;
					expression(0);
					}
					}
					} 
				}
				State = 654;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
			}
			State = 656;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
			case 1:
				{
				State = 655;
				Match(Double_Comma);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less_Than() { return GetToken(LoschScriptParser.Less_Than, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater_Than() { return GetToken(LoschScriptParser.Greater_Than, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArglistContext arglist() {
			return GetRuleContext<ArglistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(LoschScriptParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(LoschScriptParser.NewLine, i);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 66, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 658;
			Match(Less_Than);
			State = 659;
			type_name();
			State = 661;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 43)) & ~0x3f) == 0 && ((1L << (_la - 43)) & 146392124203088995L) != 0) || ((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 248833L) != 0)) {
				{
				State = 660;
				arglist();
				}
			}

			State = 663;
			Match(Greater_Than);
			State = 667;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NewLine) {
				{
				{
				State = 664;
				Match(NewLine);
				}
				}
				State = 669;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_identifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_atomContext[] identifier_atom() {
			return GetRuleContexts<Identifier_atomContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_atomContext identifier_atom(int i) {
			return GetRuleContext<Identifier_atomContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Bracket() { return GetToken(LoschScriptParser.Open_Bracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Bracket() { return GetToken(LoschScriptParser.Close_Bracket, 0); }
		public Generic_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterGeneric_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitGeneric_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneric_identifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Generic_identifierContext generic_identifier() {
		Generic_identifierContext _localctx = new Generic_identifierContext(Context, State);
		EnterRule(_localctx, 68, RULE_generic_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 670;
			identifier_atom();
			State = 671;
			Match(Open_Bracket);
			State = 672;
			identifier_atom();
			State = 673;
			Match(Close_Bracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_access_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Global() { return GetToken(LoschScriptParser.Global, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Partial() { return GetToken(LoschScriptParser.Partial, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Local() { return GetToken(LoschScriptParser.Local, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Internal() { return GetToken(LoschScriptParser.Internal, 0); }
		public Field_access_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_access_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterField_access_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitField_access_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField_access_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Field_access_modifierContext field_access_modifier() {
		Field_access_modifierContext _localctx = new Field_access_modifierContext(Context, State);
		EnterRule(_localctx, 70, RULE_field_access_modifier);
		int _la;
		try {
			State = 687;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Global:
				EnterOuterAlt(_localctx, 1);
				{
				State = 675;
				Match(Global);
				State = 677;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Partial) {
					{
					State = 676;
					Match(Partial);
					}
				}

				}
				break;
			case Local:
				EnterOuterAlt(_localctx, 2);
				{
				State = 679;
				Match(Local);
				State = 681;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Partial) {
					{
					State = 680;
					Match(Partial);
					}
				}

				}
				break;
			case Internal:
				EnterOuterAlt(_localctx, 3);
				{
				State = 683;
				Match(Internal);
				State = 685;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Partial) {
					{
					State = 684;
					Match(Partial);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Field_access_modifierContext field_access_modifier() {
			return GetRuleContext<Field_access_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(LoschScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(LoschScriptParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(LoschScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Var() { return GetToken(LoschScriptParser.Var, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Val() { return GetToken(LoschScriptParser.Val, 0); }
		public Field_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterField_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitField_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Field_declarationContext field_declaration() {
		Field_declarationContext _localctx = new Field_declarationContext(Context, State);
		EnterRule(_localctx, 72, RULE_field_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 689;
			field_access_modifier();
			State = 691;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Var || _la==Val) {
				{
				State = 690;
				_la = TokenStream.LA(1);
				if ( !(_la==Var || _la==Val) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 693;
			Match(Identifier);
			State = 696;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 694;
				Match(Colon);
				State = 695;
				type_name();
				}
			}

			State = 698;
			Match(Equals);
			State = 699;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlaceholderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(LoschScriptParser.Dot, 0); }
		public PlaceholderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_placeholder; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterPlaceholder(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitPlaceholder(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlaceholder(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlaceholderContext placeholder() {
		PlaceholderContext _localctx = new PlaceholderContext(Context, State);
		EnterRule(_localctx, 74, RULE_placeholder);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 701;
			Match(Dot);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_access_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Global() { return GetToken(LoschScriptParser.Global, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Internal() { return GetToken(LoschScriptParser.Internal, 0); }
		public Type_access_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_access_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterType_access_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitType_access_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_access_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_access_modifierContext type_access_modifier() {
		Type_access_modifierContext _localctx = new Type_access_modifierContext(Context, State);
		EnterRule(_localctx, 76, RULE_type_access_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 703;
			_la = TokenStream.LA(1);
			if ( !(_la==Global || _la==Internal) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nested_type_access_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_access_modifierContext type_access_modifier() {
			return GetRuleContext<Type_access_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Local() { return GetToken(LoschScriptParser.Local, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Protected() { return GetToken(LoschScriptParser.Protected, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Internal() { return GetToken(LoschScriptParser.Internal, 0); }
		public Nested_type_access_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nested_type_access_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterNested_type_access_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitNested_type_access_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNested_type_access_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Nested_type_access_modifierContext nested_type_access_modifier() {
		Nested_type_access_modifierContext _localctx = new Nested_type_access_modifierContext(Context, State);
		EnterRule(_localctx, 78, RULE_nested_type_access_modifier);
		int _la;
		try {
			State = 711;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Global:
			case Internal:
				EnterOuterAlt(_localctx, 1);
				{
				State = 705;
				type_access_modifier();
				}
				break;
			case Local:
				EnterOuterAlt(_localctx, 2);
				{
				State = 706;
				Match(Local);
				}
				break;
			case Protected:
				EnterOuterAlt(_localctx, 3);
				{
				State = 707;
				Match(Protected);
				State = 709;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Internal) {
					{
					State = 708;
					Match(Internal);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_special_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open() { return GetToken(LoschScriptParser.Open, 0); }
		public Type_special_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_special_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterType_special_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitType_special_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_special_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_special_modifierContext type_special_modifier() {
		Type_special_modifierContext _localctx = new Type_special_modifierContext(Context, State);
		EnterRule(_localctx, 80, RULE_type_special_modifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 713;
			Match(Open);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_kindContext type_kind() {
			return GetRuleContext<Type_kindContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(LoschScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(LoschScriptParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_blockContext type_block() {
			return GetRuleContext<Type_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_access_modifierContext type_access_modifier() {
			return GetRuleContext<Type_access_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Nested_type_access_modifierContext nested_type_access_modifier() {
			return GetRuleContext<Nested_type_access_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_special_modifierContext type_special_modifier() {
			return GetRuleContext<Type_special_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Inheritance_listContext inheritance_list() {
			return GetRuleContext<Inheritance_listContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 82, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 717;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,84,Context) ) {
			case 1:
				{
				State = 715;
				type_access_modifier();
				}
				break;
			case 2:
				{
				State = 716;
				nested_type_access_modifier();
				}
				break;
			}
			State = 720;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Open) {
				{
				State = 719;
				type_special_modifier();
				}
			}

			State = 722;
			type_kind();
			State = 723;
			Match(Identifier);
			State = 725;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Open_Bracket) {
				{
				State = 724;
				type_parameter_list();
				}
			}

			State = 728;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 727;
				inheritance_list();
				}
			}

			State = 730;
			Match(Equals);
			State = 731;
			type_block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameter_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Bracket() { return GetToken(LoschScriptParser.Open_Bracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameterContext[] type_parameter() {
			return GetRuleContexts<Type_parameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameterContext type_parameter(int i) {
			return GetRuleContext<Type_parameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Bracket() { return GetToken(LoschScriptParser.Close_Bracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(LoschScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(LoschScriptParser.Comma, i);
		}
		public Type_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterType_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitType_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_parameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameter_listContext type_parameter_list() {
		Type_parameter_listContext _localctx = new Type_parameter_listContext(Context, State);
		EnterRule(_localctx, 84, RULE_type_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 733;
			Match(Open_Bracket);
			State = 734;
			type_parameter();
			State = 739;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 735;
				Match(Comma);
				State = 736;
				type_parameter();
				}
				}
				State = 741;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 742;
			Match(Close_Bracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(LoschScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(LoschScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_constraintContext type_parameter_constraint() {
			return GetRuleContext<Type_parameter_constraintContext>(0);
		}
		public Type_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterType_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitType_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameterContext type_parameter() {
		Type_parameterContext _localctx = new Type_parameterContext(Context, State);
		EnterRule(_localctx, 86, RULE_type_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 744;
			Match(Identifier);
			State = 747;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 745;
				Match(Colon);
				State = 746;
				type_parameter_constraint();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameter_constraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_kindContext type_kind() {
			return GetRuleContext<Type_kindContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Type_parameter_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterType_parameter_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitType_parameter_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_parameter_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameter_constraintContext type_parameter_constraint() {
		Type_parameter_constraintContext _localctx = new Type_parameter_constraintContext(Context, State);
		EnterRule(_localctx, 88, RULE_type_parameter_constraint);
		try {
			State = 751;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Type:
			case Module:
			case Template:
			case Ref:
			case Val:
				EnterOuterAlt(_localctx, 1);
				{
				State = 749;
				type_kind();
				}
				break;
			case Int8:
			case UInt8:
			case Int16:
			case UInt16:
			case Int32:
			case UInt32:
			case Int64:
			case UInt64:
			case Native:
			case UNative:
			case Float32:
			case Float64:
			case Decimal:
			case Bool:
			case String:
			case Char:
			case Object:
			case Open_Paren:
			case Open_Paren_Bar:
			case Less_Than:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 750;
				type_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inheritance_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(LoschScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext[] type_name() {
			return GetRuleContexts<Type_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name(int i) {
			return GetRuleContext<Type_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(LoschScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(LoschScriptParser.Comma, i);
		}
		public Inheritance_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inheritance_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterInheritance_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitInheritance_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInheritance_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inheritance_listContext inheritance_list() {
		Inheritance_listContext _localctx = new Inheritance_listContext(Context, State);
		EnterRule(_localctx, 90, RULE_inheritance_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 753;
			Match(Colon);
			State = 754;
			type_name();
			State = 759;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 755;
				Match(Comma);
				State = 756;
				type_name();
				}
				}
				State = 761;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_kindContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Type() { return GetToken(LoschScriptParser.Type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ref() { return GetToken(LoschScriptParser.Ref, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Val() { return GetToken(LoschScriptParser.Val, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Template() { return GetToken(LoschScriptParser.Template, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Module() { return GetToken(LoschScriptParser.Module, 0); }
		public Type_kindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_kind; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterType_kind(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitType_kind(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_kind(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_kindContext type_kind() {
		Type_kindContext _localctx = new Type_kindContext(Context, State);
		EnterRule(_localctx, 92, RULE_type_kind);
		int _la;
		try {
			State = 770;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Type:
			case Ref:
				EnterOuterAlt(_localctx, 1);
				{
				State = 763;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Ref) {
					{
					State = 762;
					Match(Ref);
					}
				}

				State = 765;
				Match(Type);
				}
				break;
			case Val:
				EnterOuterAlt(_localctx, 2);
				{
				State = 766;
				Match(Val);
				State = 767;
				Match(Type);
				}
				break;
			case Template:
				EnterOuterAlt(_localctx, 3);
				{
				State = 768;
				Match(Template);
				}
				break;
			case Module:
				EnterOuterAlt(_localctx, 4);
				{
				State = 769;
				Match(Module);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_access_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Global() { return GetToken(LoschScriptParser.Global, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Local() { return GetToken(LoschScriptParser.Local, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Internal() { return GetToken(LoschScriptParser.Internal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Protected() { return GetToken(LoschScriptParser.Protected, 0); }
		public Member_access_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_access_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterMember_access_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitMember_access_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_access_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_access_modifierContext member_access_modifier() {
		Member_access_modifierContext _localctx = new Member_access_modifierContext(Context, State);
		EnterRule(_localctx, 94, RULE_member_access_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 772;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 47104L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_oop_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Virtual() { return GetToken(LoschScriptParser.Virtual, 0); }
		public Member_oop_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_oop_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterMember_oop_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitMember_oop_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_oop_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_oop_modifierContext member_oop_modifier() {
		Member_oop_modifierContext _localctx = new Member_oop_modifierContext(Context, State);
		EnterRule(_localctx, 96, RULE_member_oop_modifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 774;
			Match(Virtual);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_special_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extern() { return GetToken(LoschScriptParser.Extern, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Infix() { return GetToken(LoschScriptParser.Infix, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Inline() { return GetToken(LoschScriptParser.Inline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(LoschScriptParser.Static, 0); }
		public Member_special_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_special_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterMember_special_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitMember_special_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_special_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_special_modifierContext member_special_modifier() {
		Member_special_modifierContext _localctx = new Member_special_modifierContext(Context, State);
		EnterRule(_localctx, 98, RULE_member_special_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 776;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3298536996864L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_memberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(LoschScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(LoschScriptParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Member_access_modifierContext member_access_modifier() {
			return GetRuleContext<Member_access_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Member_oop_modifierContext member_oop_modifier() {
			return GetRuleContext<Member_oop_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Member_special_modifierContext[] member_special_modifier() {
			return GetRuleContexts<Member_special_modifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Member_special_modifierContext member_special_modifier(int i) {
			return GetRuleContext<Member_special_modifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_listContext parameter_list() {
			return GetRuleContext<Parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(LoschScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Type_memberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_member; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterType_member(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitType_member(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_member(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_memberContext type_member() {
		Type_memberContext _localctx = new Type_memberContext(Context, State);
		EnterRule(_localctx, 100, RULE_type_member);
		int _la;
		try {
			State = 827;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,106,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 779;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Less_Than) {
					{
					State = 778;
					attribute();
					}
				}

				State = 782;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 47104L) != 0)) {
					{
					State = 781;
					member_access_modifier();
					}
				}

				State = 785;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Virtual) {
					{
					State = 784;
					member_oop_modifier();
					}
				}

				State = 790;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3298536996864L) != 0)) {
					{
					{
					State = 787;
					member_special_modifier();
					}
					}
					State = 792;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 793;
				Match(Identifier);
				State = 795;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Open_Bracket) {
					{
					State = 794;
					type_parameter_list();
					}
				}

				State = 798;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Open_Paren || ((((_la - 94)) & ~0x3f) == 0 && ((1L << (_la - 94)) & 68719476807L) != 0)) {
					{
					State = 797;
					parameter_list();
					}
				}

				State = 802;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 800;
					Match(Colon);
					State = 801;
					type_name();
					}
				}

				State = 804;
				Match(Equals);
				State = 805;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 807;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Less_Than) {
					{
					State = 806;
					attribute();
					}
				}

				State = 810;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 47104L) != 0)) {
					{
					State = 809;
					member_access_modifier();
					}
				}

				State = 813;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Virtual) {
					{
					State = 812;
					member_oop_modifier();
					}
				}

				State = 818;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3298536996864L) != 0)) {
					{
					{
					State = 815;
					member_special_modifier();
					}
					}
					State = 820;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 821;
				Match(Identifier);
				State = 823;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Open_Bracket) {
					{
					State = 822;
					type_parameter_list();
					}
				}

				State = 825;
				Match(Colon);
				State = 826;
				type_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Paren() { return GetToken(LoschScriptParser.Open_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Paren() { return GetToken(LoschScriptParser.Close_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(LoschScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(LoschScriptParser.Comma, i);
		}
		public Parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterParameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitParameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_listContext parameter_list() {
		Parameter_listContext _localctx = new Parameter_listContext(Context, State);
		EnterRule(_localctx, 102, RULE_parameter_list);
		int _la;
		try {
			State = 849;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Open_Paren:
				EnterOuterAlt(_localctx, 1);
				{
				State = 829;
				Match(Open_Paren);
				State = 838;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 94)) & ~0x3f) == 0 && ((1L << (_la - 94)) & 68719476807L) != 0)) {
					{
					State = 830;
					parameter();
					State = 835;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==Comma) {
						{
						{
						State = 831;
						Match(Comma);
						State = 832;
						parameter();
						}
						}
						State = 837;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 840;
				Match(Close_Paren);
				}
				break;
			case Ampersand:
			case Ampersand_Greater:
			case Less_Ampersand:
			case Less_Than:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 841;
				parameter();
				State = 846;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 842;
					Match(Comma);
					State = 843;
					parameter();
					}
					}
					State = 848;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ampersand() { return GetToken(LoschScriptParser.Ampersand, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ampersand_Greater() { return GetToken(LoschScriptParser.Ampersand_Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less_Ampersand() { return GetToken(LoschScriptParser.Less_Ampersand, 0); }
		public Parameter_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterParameter_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitParameter_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_modifierContext parameter_modifier() {
		Parameter_modifierContext _localctx = new Parameter_modifierContext(Context, State);
		EnterRule(_localctx, 104, RULE_parameter_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 851;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 94)) & ~0x3f) == 0 && ((1L << (_la - 94)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(LoschScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_modifierContext parameter_modifier() {
			return GetRuleContext<Parameter_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Dot() { return GetToken(LoschScriptParser.Double_Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(LoschScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_constraintContext parameter_constraint() {
			return GetRuleContext<Parameter_constraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(LoschScriptParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 106, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 854;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Less_Than) {
				{
				State = 853;
				attribute();
				}
			}

			State = 857;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 94)) & ~0x3f) == 0 && ((1L << (_la - 94)) & 7L) != 0)) {
				{
				State = 856;
				parameter_modifier();
				}
			}

			State = 859;
			Match(Identifier);
			State = 861;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Double_Dot) {
				{
				State = 860;
				Match(Double_Dot);
				}
			}

			State = 865;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
			case 1:
				{
				State = 863;
				Match(Colon);
				State = 864;
				type_name();
				}
				break;
			}
			State = 868;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Open_Brace || _la==Question_Mark) {
				{
				State = 867;
				parameter_constraint();
				}
			}

			State = 872;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,116,Context) ) {
			case 1:
				{
				State = 870;
				Match(Equals);
				State = 871;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_constraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Brace() { return GetToken(LoschScriptParser.Open_Brace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Brace() { return GetToken(LoschScriptParser.Close_Brace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Question_Mark() { return GetToken(LoschScriptParser.Question_Mark, 0); }
		public Parameter_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterParameter_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitParameter_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_constraintContext parameter_constraint() {
		Parameter_constraintContext _localctx = new Parameter_constraintContext(Context, State);
		EnterRule(_localctx, 108, RULE_parameter_constraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 875;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Question_Mark) {
				{
				State = 874;
				Match(Question_Mark);
				}
			}

			State = 877;
			Match(Open_Brace);
			State = 878;
			expression(0);
			State = 879;
			Match(Close_Brace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Brace() { return GetToken(LoschScriptParser.Open_Brace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Brace() { return GetToken(LoschScriptParser.Close_Brace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_memberContext[] type_member() {
			return GetRuleContexts<Type_memberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_memberContext type_member(int i) {
			return GetRuleContext<Type_memberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(LoschScriptParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(LoschScriptParser.NewLine, i);
		}
		public Type_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterType_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitType_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_blockContext type_block() {
		Type_blockContext _localctx = new Type_blockContext(Context, State);
		EnterRule(_localctx, 110, RULE_type_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 881;
			Match(Open_Brace);
			State = 887;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 25288770780932L) != 0) || _la==Less_Than || _la==Identifier) {
				{
				State = 885;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,118,Context) ) {
				case 1:
					{
					State = 882;
					type_member();
					}
					break;
				case 2:
					{
					State = 883;
					type();
					}
					break;
				case 3:
					{
					State = 884;
					Match(NewLine);
					}
					break;
				}
				}
				State = 889;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 890;
			Match(Close_Brace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Try_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Try() { return GetToken(LoschScriptParser.Try, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(LoschScriptParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Try_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_try_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterTry_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitTry_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTry_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Try_branchContext try_branch() {
		Try_branchContext _localctx = new Try_branchContext(Context, State);
		EnterRule(_localctx, 112, RULE_try_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 892;
			Match(Try);
			State = 893;
			Match(Equals);
			State = 894;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Catch_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Catch() { return GetToken(LoschScriptParser.Catch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(LoschScriptParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(LoschScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(LoschScriptParser.Colon, 0); }
		public Catch_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catch_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterCatch_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitCatch_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatch_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Catch_branchContext catch_branch() {
		Catch_branchContext _localctx = new Catch_branchContext(Context, State);
		EnterRule(_localctx, 114, RULE_catch_branch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 896;
			Match(Catch);
			State = 902;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 360288794819166208L) != 0) || _la==Less_Than || _la==Identifier) {
				{
				State = 899;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,120,Context) ) {
				case 1:
					{
					State = 897;
					Match(Identifier);
					State = 898;
					Match(Colon);
					}
					break;
				}
				State = 901;
				type_name();
				}
			}

			State = 904;
			Match(Equals);
			State = 905;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Finally_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Finally() { return GetToken(LoschScriptParser.Finally, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(LoschScriptParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Finally_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finally_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterFinally_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitFinally_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinally_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Finally_branchContext finally_branch() {
		Finally_branchContext _localctx = new Finally_branchContext(Context, State);
		EnterRule(_localctx, 116, RULE_finally_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 907;
			Match(Finally);
			State = 908;
			Match(Equals);
			State = 909;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fault_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Fault() { return GetToken(LoschScriptParser.Fault, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(LoschScriptParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Fault_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fault_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterFault_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitFault_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFault_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fault_branchContext fault_branch() {
		Fault_branchContext _localctx = new Fault_branchContext(Context, State);
		EnterRule(_localctx, 118, RULE_fault_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 911;
			Match(Fault);
			State = 912;
			Match(Equals);
			State = 913;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 8: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 49);
		case 1: return Precpred(Context, 48);
		case 2: return Precpred(Context, 46);
		case 3: return Precpred(Context, 45);
		case 4: return Precpred(Context, 44);
		case 5: return Precpred(Context, 43);
		case 6: return Precpred(Context, 42);
		case 7: return Precpred(Context, 41);
		case 8: return Precpred(Context, 40);
		case 9: return Precpred(Context, 39);
		case 10: return Precpred(Context, 38);
		case 11: return Precpred(Context, 37);
		case 12: return Precpred(Context, 36);
		case 13: return Precpred(Context, 35);
		case 14: return Precpred(Context, 34);
		case 15: return Precpred(Context, 33);
		case 16: return Precpred(Context, 29);
		case 17: return Precpred(Context, 27);
		case 18: return Precpred(Context, 26);
		case 19: return Precpred(Context, 23);
		case 20: return Precpred(Context, 1);
		case 21: return Precpred(Context, 25);
		case 22: return Precpred(Context, 20);
		case 23: return Precpred(Context, 17);
		case 24: return Precpred(Context, 5);
		case 25: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,137,916,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,1,0,1,0,5,0,123,8,0,10,0,12,0,126,9,0,1,
		0,1,0,5,0,130,8,0,10,0,12,0,133,9,0,3,0,135,8,0,1,0,1,0,1,0,1,1,1,1,3,
		1,142,8,1,1,2,1,2,5,2,146,8,2,10,2,12,2,149,9,2,1,3,1,3,5,3,153,8,3,10,
		3,12,3,156,9,3,1,3,1,3,5,3,160,8,3,10,3,12,3,163,9,3,1,4,3,4,166,8,4,1,
		4,1,4,1,4,1,4,5,4,172,8,4,10,4,12,4,175,9,4,1,4,3,4,178,8,4,1,4,1,4,1,
		4,1,4,1,4,5,4,185,8,4,10,4,12,4,188,9,4,1,4,3,4,191,8,4,1,4,1,4,1,4,1,
		4,1,4,1,4,1,4,1,4,5,4,201,8,4,10,4,12,4,204,9,4,3,4,206,8,4,1,5,1,5,1,
		5,1,6,1,6,1,6,5,6,214,8,6,10,6,12,6,217,9,6,1,7,1,7,1,7,5,7,222,8,7,10,
		7,12,7,225,9,7,1,7,3,7,228,8,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
		1,8,1,8,1,8,1,8,3,8,244,8,8,1,8,1,8,1,8,3,8,249,8,8,1,8,1,8,1,8,1,8,4,
		8,255,8,8,11,8,12,8,256,1,8,1,8,1,8,1,8,5,8,263,8,8,10,8,12,8,266,9,8,
		1,8,5,8,269,8,8,10,8,12,8,272,9,8,1,8,5,8,275,8,8,10,8,12,8,278,9,8,1,
		8,3,8,281,8,8,1,8,1,8,3,8,285,8,8,1,8,1,8,1,8,1,8,5,8,291,8,8,10,8,12,
		8,294,9,8,1,8,5,8,297,8,8,10,8,12,8,300,9,8,1,8,5,8,303,8,8,10,8,12,8,
		306,9,8,1,8,3,8,309,8,8,1,8,1,8,3,8,313,8,8,1,8,1,8,1,8,1,8,1,8,1,8,5,
		8,321,8,8,10,8,12,8,324,9,8,1,8,3,8,327,8,8,1,8,1,8,1,8,1,8,1,8,1,8,3,
		8,335,8,8,1,8,1,8,1,8,1,8,1,8,3,8,342,8,8,1,8,1,8,5,8,346,8,8,10,8,12,
		8,349,9,8,1,8,3,8,352,8,8,1,8,3,8,355,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
		5,8,364,8,8,10,8,12,8,367,9,8,3,8,369,8,8,1,8,1,8,1,8,1,8,1,8,4,8,376,
		8,8,11,8,12,8,377,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
		1,8,1,8,5,8,395,8,8,10,8,12,8,398,9,8,3,8,400,8,8,1,8,1,8,1,8,1,8,1,8,
		3,8,407,8,8,3,8,409,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
		8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
		1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
		8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
		1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,4,8,489,8,8,11,
		8,12,8,490,1,8,3,8,494,8,8,5,8,496,8,8,10,8,12,8,499,9,8,1,9,1,9,1,9,1,
		9,1,9,1,9,1,9,1,9,1,9,3,9,510,8,9,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,
		12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,
		19,5,19,534,8,19,10,19,12,19,537,9,19,1,19,1,19,5,19,541,8,19,10,19,12,
		19,544,9,19,1,19,3,19,547,8,19,1,20,1,20,3,20,551,8,20,1,20,1,20,1,20,
		1,20,4,20,557,8,20,11,20,12,20,558,1,20,1,20,1,20,1,20,3,20,565,8,20,1,
		20,1,20,3,20,569,8,20,1,20,3,20,572,8,20,1,21,1,21,1,22,1,22,1,22,1,22,
		5,22,580,8,22,10,22,12,22,583,9,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,
		3,23,592,8,23,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,3,25,602,8,25,1,
		26,1,26,1,26,1,26,3,26,608,8,26,1,27,1,27,1,27,1,27,1,27,3,27,615,8,27,
		1,28,1,28,1,28,1,28,1,28,3,28,622,8,28,1,29,1,29,1,29,1,30,3,30,628,8,
		30,1,30,1,30,3,30,632,8,30,1,31,3,31,635,8,31,1,31,1,31,1,32,1,32,3,32,
		641,8,32,1,32,1,32,1,32,1,32,1,32,3,32,648,8,32,1,32,5,32,651,8,32,10,
		32,12,32,654,9,32,1,32,3,32,657,8,32,1,33,1,33,1,33,3,33,662,8,33,1,33,
		1,33,5,33,666,8,33,10,33,12,33,669,9,33,1,34,1,34,1,34,1,34,1,34,1,35,
		1,35,3,35,678,8,35,1,35,1,35,3,35,682,8,35,1,35,1,35,3,35,686,8,35,3,35,
		688,8,35,1,36,1,36,3,36,692,8,36,1,36,1,36,1,36,3,36,697,8,36,1,36,1,36,
		1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,39,1,39,3,39,710,8,39,3,39,712,8,
		39,1,40,1,40,1,41,1,41,3,41,718,8,41,1,41,3,41,721,8,41,1,41,1,41,1,41,
		3,41,726,8,41,1,41,3,41,729,8,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,5,
		42,738,8,42,10,42,12,42,741,9,42,1,42,1,42,1,43,1,43,1,43,3,43,748,8,43,
		1,44,1,44,3,44,752,8,44,1,45,1,45,1,45,1,45,5,45,758,8,45,10,45,12,45,
		761,9,45,1,46,3,46,764,8,46,1,46,1,46,1,46,1,46,1,46,3,46,771,8,46,1,47,
		1,47,1,48,1,48,1,49,1,49,1,50,3,50,780,8,50,1,50,3,50,783,8,50,1,50,3,
		50,786,8,50,1,50,5,50,789,8,50,10,50,12,50,792,9,50,1,50,1,50,3,50,796,
		8,50,1,50,3,50,799,8,50,1,50,1,50,3,50,803,8,50,1,50,1,50,1,50,3,50,808,
		8,50,1,50,3,50,811,8,50,1,50,3,50,814,8,50,1,50,5,50,817,8,50,10,50,12,
		50,820,9,50,1,50,1,50,3,50,824,8,50,1,50,1,50,3,50,828,8,50,1,51,1,51,
		1,51,1,51,5,51,834,8,51,10,51,12,51,837,9,51,3,51,839,8,51,1,51,1,51,1,
		51,1,51,5,51,845,8,51,10,51,12,51,848,9,51,3,51,850,8,51,1,52,1,52,1,53,
		3,53,855,8,53,1,53,3,53,858,8,53,1,53,1,53,3,53,862,8,53,1,53,1,53,3,53,
		866,8,53,1,53,3,53,869,8,53,1,53,1,53,3,53,873,8,53,1,54,3,54,876,8,54,
		1,54,1,54,1,54,1,54,1,55,1,55,1,55,1,55,5,55,886,8,55,10,55,12,55,889,
		9,55,1,55,1,55,1,56,1,56,1,56,1,56,1,57,1,57,1,57,3,57,900,8,57,1,57,3,
		57,903,8,57,1,57,1,57,1,57,1,58,1,58,1,58,1,58,1,59,1,59,1,59,1,59,1,59,
		0,1,16,60,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,
		44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,
		92,94,96,98,100,102,104,106,108,110,112,114,116,118,0,10,1,0,43,44,1,0,
		104,105,1,0,100,103,1,0,53,54,1,0,136,137,2,0,22,37,39,39,2,0,11,11,13,
		13,2,0,11,13,15,15,3,0,14,14,21,21,40,41,1,0,94,96,1040,0,124,1,0,0,0,
		2,141,1,0,0,0,4,147,1,0,0,0,6,150,1,0,0,0,8,205,1,0,0,0,10,207,1,0,0,0,
		12,210,1,0,0,0,14,218,1,0,0,0,16,408,1,0,0,0,18,509,1,0,0,0,20,511,1,0,
		0,0,22,513,1,0,0,0,24,517,1,0,0,0,26,519,1,0,0,0,28,521,1,0,0,0,30,523,
		1,0,0,0,32,525,1,0,0,0,34,527,1,0,0,0,36,530,1,0,0,0,38,546,1,0,0,0,40,
		571,1,0,0,0,42,573,1,0,0,0,44,575,1,0,0,0,46,586,1,0,0,0,48,593,1,0,0,
		0,50,596,1,0,0,0,52,603,1,0,0,0,54,609,1,0,0,0,56,616,1,0,0,0,58,623,1,
		0,0,0,60,627,1,0,0,0,62,634,1,0,0,0,64,640,1,0,0,0,66,658,1,0,0,0,68,670,
		1,0,0,0,70,687,1,0,0,0,72,689,1,0,0,0,74,701,1,0,0,0,76,703,1,0,0,0,78,
		711,1,0,0,0,80,713,1,0,0,0,82,717,1,0,0,0,84,733,1,0,0,0,86,744,1,0,0,
		0,88,751,1,0,0,0,90,753,1,0,0,0,92,770,1,0,0,0,94,772,1,0,0,0,96,774,1,
		0,0,0,98,776,1,0,0,0,100,827,1,0,0,0,102,849,1,0,0,0,104,851,1,0,0,0,106,
		854,1,0,0,0,108,875,1,0,0,0,110,881,1,0,0,0,112,892,1,0,0,0,114,896,1,
		0,0,0,116,907,1,0,0,0,118,911,1,0,0,0,120,123,3,8,4,0,121,123,5,2,0,0,
		122,120,1,0,0,0,122,121,1,0,0,0,123,126,1,0,0,0,124,122,1,0,0,0,124,125,
		1,0,0,0,125,134,1,0,0,0,126,124,1,0,0,0,127,131,3,10,5,0,128,130,5,2,0,
		0,129,128,1,0,0,0,130,133,1,0,0,0,131,129,1,0,0,0,131,132,1,0,0,0,132,
		135,1,0,0,0,133,131,1,0,0,0,134,127,1,0,0,0,134,135,1,0,0,0,135,136,1,
		0,0,0,136,137,3,2,1,0,137,138,5,0,0,1,138,1,1,0,0,0,139,142,3,4,2,0,140,
		142,3,6,3,0,141,139,1,0,0,0,141,140,1,0,0,0,142,3,1,0,0,0,143,146,3,16,
		8,0,144,146,5,2,0,0,145,143,1,0,0,0,145,144,1,0,0,0,146,149,1,0,0,0,147,
		145,1,0,0,0,147,148,1,0,0,0,148,5,1,0,0,0,149,147,1,0,0,0,150,154,3,82,
		41,0,151,153,5,2,0,0,152,151,1,0,0,0,153,156,1,0,0,0,154,152,1,0,0,0,154,
		155,1,0,0,0,155,161,1,0,0,0,156,154,1,0,0,0,157,160,3,82,41,0,158,160,
		5,2,0,0,159,157,1,0,0,0,159,158,1,0,0,0,160,163,1,0,0,0,161,159,1,0,0,
		0,161,162,1,0,0,0,162,7,1,0,0,0,163,161,1,0,0,0,164,166,5,78,0,0,165,164,
		1,0,0,0,165,166,1,0,0,0,166,167,1,0,0,0,167,168,5,5,0,0,168,173,3,12,6,
		0,169,170,5,64,0,0,170,172,3,12,6,0,171,169,1,0,0,0,172,175,1,0,0,0,173,
		171,1,0,0,0,173,174,1,0,0,0,174,206,1,0,0,0,175,173,1,0,0,0,176,178,5,
		78,0,0,177,176,1,0,0,0,177,178,1,0,0,0,178,179,1,0,0,0,179,180,5,5,0,0,
		180,181,5,9,0,0,181,186,3,12,6,0,182,183,5,64,0,0,183,185,3,12,6,0,184,
		182,1,0,0,0,185,188,1,0,0,0,186,184,1,0,0,0,186,187,1,0,0,0,187,206,1,
		0,0,0,188,186,1,0,0,0,189,191,5,78,0,0,190,189,1,0,0,0,190,191,1,0,0,0,
		191,192,1,0,0,0,192,193,5,5,0,0,193,194,5,130,0,0,194,195,5,119,0,0,195,
		202,3,12,6,0,196,197,5,64,0,0,197,198,5,130,0,0,198,199,5,119,0,0,199,
		201,3,12,6,0,200,196,1,0,0,0,201,204,1,0,0,0,202,200,1,0,0,0,202,203,1,
		0,0,0,203,206,1,0,0,0,204,202,1,0,0,0,205,165,1,0,0,0,205,177,1,0,0,0,
		205,190,1,0,0,0,206,9,1,0,0,0,207,208,5,6,0,0,208,209,3,12,6,0,209,11,
		1,0,0,0,210,215,5,130,0,0,211,212,5,66,0,0,212,214,5,130,0,0,213,211,1,
		0,0,0,214,217,1,0,0,0,215,213,1,0,0,0,215,216,1,0,0,0,216,13,1,0,0,0,217,
		215,1,0,0,0,218,227,5,62,0,0,219,222,5,2,0,0,220,222,3,16,8,0,221,219,
		1,0,0,0,221,220,1,0,0,0,222,225,1,0,0,0,223,221,1,0,0,0,223,224,1,0,0,
		0,224,228,1,0,0,0,225,223,1,0,0,0,226,228,3,74,37,0,227,223,1,0,0,0,227,
		226,1,0,0,0,228,229,1,0,0,0,229,230,5,63,0,0,230,15,1,0,0,0,231,232,6,
		8,-1,0,232,233,5,120,0,0,233,409,3,16,8,50,234,235,5,78,0,0,235,409,3,
		16,8,47,236,237,5,94,0,0,237,409,3,16,8,32,238,239,5,85,0,0,239,409,5,
		130,0,0,240,241,5,87,0,0,241,409,3,16,8,30,242,244,7,0,0,0,243,242,1,0,
		0,0,243,244,1,0,0,0,244,245,1,0,0,0,245,248,5,130,0,0,246,247,5,70,0,0,
		247,249,3,40,20,0,248,246,1,0,0,0,248,249,1,0,0,0,249,250,1,0,0,0,250,
		251,5,119,0,0,251,409,3,16,8,28,252,409,3,60,30,0,253,255,3,66,33,0,254,
		253,1,0,0,0,255,256,1,0,0,0,256,254,1,0,0,0,256,257,1,0,0,0,257,258,1,
		0,0,0,258,259,3,16,8,22,259,409,1,0,0,0,260,264,3,46,23,0,261,263,5,2,
		0,0,262,261,1,0,0,0,263,266,1,0,0,0,264,262,1,0,0,0,264,265,1,0,0,0,265,
		270,1,0,0,0,266,264,1,0,0,0,267,269,3,50,25,0,268,267,1,0,0,0,269,272,
		1,0,0,0,270,268,1,0,0,0,270,271,1,0,0,0,271,276,1,0,0,0,272,270,1,0,0,
		0,273,275,5,2,0,0,274,273,1,0,0,0,275,278,1,0,0,0,276,274,1,0,0,0,276,
		277,1,0,0,0,277,280,1,0,0,0,278,276,1,0,0,0,279,281,3,52,26,0,280,279,
		1,0,0,0,280,281,1,0,0,0,281,409,1,0,0,0,282,284,3,14,7,0,283,285,5,2,0,
		0,284,283,1,0,0,0,284,285,1,0,0,0,285,286,1,0,0,0,286,287,3,48,24,0,287,
		409,1,0,0,0,288,292,3,54,27,0,289,291,5,2,0,0,290,289,1,0,0,0,291,294,
		1,0,0,0,292,290,1,0,0,0,292,293,1,0,0,0,293,298,1,0,0,0,294,292,1,0,0,
		0,295,297,3,56,28,0,296,295,1,0,0,0,297,300,1,0,0,0,298,296,1,0,0,0,298,
		299,1,0,0,0,299,304,1,0,0,0,300,298,1,0,0,0,301,303,5,2,0,0,302,301,1,
		0,0,0,303,306,1,0,0,0,304,302,1,0,0,0,304,305,1,0,0,0,305,308,1,0,0,0,
		306,304,1,0,0,0,307,309,3,52,26,0,308,307,1,0,0,0,308,309,1,0,0,0,309,
		409,1,0,0,0,310,312,3,14,7,0,311,313,5,2,0,0,312,311,1,0,0,0,312,313,1,
		0,0,0,313,314,1,0,0,0,314,315,3,58,29,0,315,409,1,0,0,0,316,317,5,130,
		0,0,317,326,5,127,0,0,318,319,5,130,0,0,319,321,5,127,0,0,320,318,1,0,
		0,0,321,324,1,0,0,0,322,320,1,0,0,0,322,323,1,0,0,0,323,325,1,0,0,0,324,
		322,1,0,0,0,325,327,5,130,0,0,326,322,1,0,0,0,326,327,1,0,0,0,327,328,
		1,0,0,0,328,409,3,16,8,15,329,330,5,81,0,0,330,331,3,16,8,0,331,334,5,
		119,0,0,332,335,3,14,7,0,333,335,3,16,8,0,334,332,1,0,0,0,334,333,1,0,
		0,0,335,409,1,0,0,0,336,337,5,82,0,0,337,338,3,16,8,0,338,341,5,119,0,
		0,339,342,3,14,7,0,340,342,3,16,8,0,341,339,1,0,0,0,341,340,1,0,0,0,342,
		409,1,0,0,0,343,347,3,112,56,0,344,346,3,114,57,0,345,344,1,0,0,0,346,
		349,1,0,0,0,347,345,1,0,0,0,347,348,1,0,0,0,348,351,1,0,0,0,349,347,1,
		0,0,0,350,352,3,118,59,0,351,350,1,0,0,0,351,352,1,0,0,0,352,354,1,0,0,
		0,353,355,3,116,58,0,354,353,1,0,0,0,354,355,1,0,0,0,355,409,1,0,0,0,356,
		357,5,49,0,0,357,409,3,16,8,11,358,409,5,49,0,0,359,368,5,60,0,0,360,365,
		3,16,8,0,361,362,5,64,0,0,362,364,3,16,8,0,363,361,1,0,0,0,364,367,1,0,
		0,0,365,363,1,0,0,0,365,366,1,0,0,0,366,369,1,0,0,0,367,365,1,0,0,0,368,
		360,1,0,0,0,368,369,1,0,0,0,369,370,1,0,0,0,370,409,5,61,0,0,371,372,5,
		56,0,0,372,375,3,16,8,0,373,374,5,64,0,0,374,376,3,16,8,0,375,373,1,0,
		0,0,376,377,1,0,0,0,377,375,1,0,0,0,377,378,1,0,0,0,378,379,1,0,0,0,379,
		380,5,57,0,0,380,409,1,0,0,0,381,399,5,60,0,0,382,383,5,60,0,0,383,384,
		3,16,8,0,384,385,5,64,0,0,385,386,3,16,8,0,386,396,5,61,0,0,387,388,5,
		64,0,0,388,389,5,60,0,0,389,390,3,16,8,0,390,391,5,64,0,0,391,392,3,16,
		8,0,392,393,5,61,0,0,393,395,1,0,0,0,394,387,1,0,0,0,395,398,1,0,0,0,396,
		394,1,0,0,0,396,397,1,0,0,0,397,400,1,0,0,0,398,396,1,0,0,0,399,382,1,
		0,0,0,399,400,1,0,0,0,400,401,1,0,0,0,401,409,5,61,0,0,402,409,3,18,9,
		0,403,409,3,14,7,0,404,406,3,12,6,0,405,407,3,64,32,0,406,405,1,0,0,0,
		406,407,1,0,0,0,407,409,1,0,0,0,408,231,1,0,0,0,408,234,1,0,0,0,408,236,
		1,0,0,0,408,238,1,0,0,0,408,240,1,0,0,0,408,243,1,0,0,0,408,252,1,0,0,
		0,408,254,1,0,0,0,408,260,1,0,0,0,408,282,1,0,0,0,408,288,1,0,0,0,408,
		310,1,0,0,0,408,316,1,0,0,0,408,329,1,0,0,0,408,336,1,0,0,0,408,343,1,
		0,0,0,408,356,1,0,0,0,408,358,1,0,0,0,408,359,1,0,0,0,408,371,1,0,0,0,
		408,381,1,0,0,0,408,402,1,0,0,0,408,403,1,0,0,0,408,404,1,0,0,0,409,497,
		1,0,0,0,410,411,10,49,0,0,411,412,5,81,0,0,412,413,3,16,8,0,413,414,5,
		119,0,0,414,415,3,16,8,50,415,496,1,0,0,0,416,417,10,48,0,0,417,418,5,
		112,0,0,418,496,3,16,8,49,419,420,10,46,0,0,420,421,5,110,0,0,421,496,
		3,16,8,47,422,423,10,45,0,0,423,424,5,114,0,0,424,496,3,16,8,46,425,426,
		10,44,0,0,426,427,5,117,0,0,427,496,3,16,8,45,428,429,10,43,0,0,429,430,
		5,106,0,0,430,496,3,16,8,44,431,432,10,42,0,0,432,433,5,108,0,0,433,496,
		3,16,8,43,434,435,10,41,0,0,435,436,5,123,0,0,436,496,3,16,8,42,437,438,
		10,40,0,0,438,439,5,125,0,0,439,496,3,16,8,41,440,441,10,39,0,0,441,442,
		7,1,0,0,442,496,3,16,8,40,443,444,10,38,0,0,444,445,7,2,0,0,445,496,3,
		16,8,39,446,447,10,37,0,0,447,448,5,94,0,0,448,496,3,16,8,38,449,450,10,
		36,0,0,450,451,5,97,0,0,451,496,3,16,8,37,452,453,10,35,0,0,453,454,5,
		88,0,0,454,496,3,16,8,36,455,456,10,34,0,0,456,457,5,91,0,0,457,496,3,
		16,8,35,458,459,10,33,0,0,459,460,5,84,0,0,460,496,3,16,8,34,461,462,10,
		29,0,0,462,463,5,68,0,0,463,496,3,16,8,30,464,465,10,27,0,0,465,466,5,
		127,0,0,466,496,3,16,8,28,467,468,10,26,0,0,468,469,5,128,0,0,469,496,
		3,16,8,27,470,471,10,23,0,0,471,472,5,81,0,0,472,496,3,16,8,24,473,474,
		10,1,0,0,474,475,5,119,0,0,475,496,3,16,8,2,476,477,10,25,0,0,477,478,
		5,66,0,0,478,496,5,130,0,0,479,480,10,20,0,0,480,496,3,48,24,0,481,482,
		10,17,0,0,482,496,3,58,29,0,483,484,10,5,0,0,484,496,5,2,0,0,485,488,10,
		2,0,0,486,487,5,66,0,0,487,489,5,130,0,0,488,486,1,0,0,0,489,490,1,0,0,
		0,490,488,1,0,0,0,490,491,1,0,0,0,491,493,1,0,0,0,492,494,3,64,32,0,493,
		492,1,0,0,0,493,494,1,0,0,0,494,496,1,0,0,0,495,410,1,0,0,0,495,416,1,
		0,0,0,495,419,1,0,0,0,495,422,1,0,0,0,495,425,1,0,0,0,495,428,1,0,0,0,
		495,431,1,0,0,0,495,434,1,0,0,0,495,437,1,0,0,0,495,440,1,0,0,0,495,443,
		1,0,0,0,495,446,1,0,0,0,495,449,1,0,0,0,495,452,1,0,0,0,495,455,1,0,0,
		0,495,458,1,0,0,0,495,461,1,0,0,0,495,464,1,0,0,0,495,467,1,0,0,0,495,
		470,1,0,0,0,495,473,1,0,0,0,495,476,1,0,0,0,495,479,1,0,0,0,495,481,1,
		0,0,0,495,483,1,0,0,0,495,485,1,0,0,0,496,499,1,0,0,0,497,495,1,0,0,0,
		497,498,1,0,0,0,498,17,1,0,0,0,499,497,1,0,0,0,500,510,3,22,11,0,501,510,
		3,24,12,0,502,510,3,26,13,0,503,510,3,28,14,0,504,510,3,30,15,0,505,510,
		3,32,16,0,506,510,3,34,17,0,507,510,3,36,18,0,508,510,3,20,10,0,509,500,
		1,0,0,0,509,501,1,0,0,0,509,502,1,0,0,0,509,503,1,0,0,0,509,504,1,0,0,
		0,509,505,1,0,0,0,509,506,1,0,0,0,509,507,1,0,0,0,509,508,1,0,0,0,510,
		19,1,0,0,0,511,512,5,55,0,0,512,21,1,0,0,0,513,514,5,56,0,0,514,515,3,
		16,8,0,515,516,5,57,0,0,516,23,1,0,0,0,517,518,5,131,0,0,518,25,1,0,0,
		0,519,520,5,134,0,0,520,27,1,0,0,0,521,522,7,3,0,0,522,29,1,0,0,0,523,
		524,7,4,0,0,524,31,1,0,0,0,525,526,5,135,0,0,526,33,1,0,0,0,527,528,5,
		56,0,0,528,529,5,57,0,0,529,35,1,0,0,0,530,531,5,74,0,0,531,37,1,0,0,0,
		532,534,3,66,33,0,533,532,1,0,0,0,534,537,1,0,0,0,535,533,1,0,0,0,535,
		536,1,0,0,0,536,538,1,0,0,0,537,535,1,0,0,0,538,547,5,130,0,0,539,541,
		3,66,33,0,540,539,1,0,0,0,541,544,1,0,0,0,542,540,1,0,0,0,542,543,1,0,
		0,0,543,545,1,0,0,0,544,542,1,0,0,0,545,547,3,12,6,0,546,535,1,0,0,0,546,
		542,1,0,0,0,547,39,1,0,0,0,548,550,3,42,21,0,549,551,5,94,0,0,550,549,
		1,0,0,0,550,551,1,0,0,0,551,572,1,0,0,0,552,553,5,56,0,0,553,556,3,40,
		20,0,554,555,5,88,0,0,555,557,3,40,20,0,556,554,1,0,0,0,557,558,1,0,0,
		0,558,556,1,0,0,0,558,559,1,0,0,0,559,560,1,0,0,0,560,561,5,57,0,0,561,
		572,1,0,0,0,562,564,3,68,34,0,563,565,5,94,0,0,564,563,1,0,0,0,564,565,
		1,0,0,0,565,572,1,0,0,0,566,568,3,38,19,0,567,569,5,94,0,0,568,567,1,0,
		0,0,568,569,1,0,0,0,569,572,1,0,0,0,570,572,3,44,22,0,571,548,1,0,0,0,
		571,552,1,0,0,0,571,562,1,0,0,0,571,566,1,0,0,0,571,570,1,0,0,0,572,41,
		1,0,0,0,573,574,7,5,0,0,574,43,1,0,0,0,575,576,5,58,0,0,576,581,3,40,20,
		0,577,578,5,64,0,0,578,580,3,40,20,0,579,577,1,0,0,0,580,583,1,0,0,0,581,
		579,1,0,0,0,581,582,1,0,0,0,582,584,1,0,0,0,583,581,1,0,0,0,584,585,5,
		59,0,0,585,45,1,0,0,0,586,587,5,77,0,0,587,588,3,16,8,0,588,591,5,119,
		0,0,589,592,3,14,7,0,590,592,3,16,8,0,591,589,1,0,0,0,591,590,1,0,0,0,
		592,47,1,0,0,0,593,594,5,77,0,0,594,595,3,16,8,0,595,49,1,0,0,0,596,597,
		5,70,0,0,597,598,3,16,8,0,598,601,5,119,0,0,599,602,3,14,7,0,600,602,3,
		16,8,0,601,599,1,0,0,0,601,600,1,0,0,0,602,51,1,0,0,0,603,604,5,70,0,0,
		604,607,5,119,0,0,605,608,3,14,7,0,606,608,3,16,8,0,607,605,1,0,0,0,607,
		606,1,0,0,0,608,53,1,0,0,0,609,610,5,79,0,0,610,611,3,16,8,0,611,614,5,
		119,0,0,612,615,3,14,7,0,613,615,3,16,8,0,614,612,1,0,0,0,614,613,1,0,
		0,0,615,55,1,0,0,0,616,617,5,80,0,0,617,618,3,16,8,0,618,621,5,119,0,0,
		619,622,3,14,7,0,620,622,3,16,8,0,621,619,1,0,0,0,621,620,1,0,0,0,622,
		57,1,0,0,0,623,624,5,79,0,0,624,625,3,16,8,0,625,59,1,0,0,0,626,628,3,
		62,31,0,627,626,1,0,0,0,627,628,1,0,0,0,628,629,1,0,0,0,629,631,5,67,0,
		0,630,632,3,62,31,0,631,630,1,0,0,0,631,632,1,0,0,0,632,61,1,0,0,0,633,
		635,5,84,0,0,634,633,1,0,0,0,634,635,1,0,0,0,635,636,1,0,0,0,636,637,3,
		24,12,0,637,63,1,0,0,0,638,639,5,130,0,0,639,641,5,70,0,0,640,638,1,0,
		0,0,640,641,1,0,0,0,641,642,1,0,0,0,642,643,3,16,8,0,643,652,1,0,0,0,644,
		647,5,64,0,0,645,646,5,130,0,0,646,648,5,70,0,0,647,645,1,0,0,0,647,648,
		1,0,0,0,648,649,1,0,0,0,649,651,3,16,8,0,650,644,1,0,0,0,651,654,1,0,0,
		0,652,650,1,0,0,0,652,653,1,0,0,0,653,656,1,0,0,0,654,652,1,0,0,0,655,
		657,5,65,0,0,656,655,1,0,0,0,656,657,1,0,0,0,657,65,1,0,0,0,658,659,5,
		100,0,0,659,661,3,40,20,0,660,662,3,64,32,0,661,660,1,0,0,0,661,662,1,
		0,0,0,662,663,1,0,0,0,663,667,5,101,0,0,664,666,5,2,0,0,665,664,1,0,0,
		0,666,669,1,0,0,0,667,665,1,0,0,0,667,668,1,0,0,0,668,67,1,0,0,0,669,667,
		1,0,0,0,670,671,3,38,19,0,671,672,5,60,0,0,672,673,3,38,19,0,673,674,5,
		61,0,0,674,69,1,0,0,0,675,677,5,11,0,0,676,678,5,16,0,0,677,676,1,0,0,
		0,677,678,1,0,0,0,678,688,1,0,0,0,679,681,5,12,0,0,680,682,5,16,0,0,681,
		680,1,0,0,0,681,682,1,0,0,0,682,688,1,0,0,0,683,685,5,13,0,0,684,686,5,
		16,0,0,685,684,1,0,0,0,685,686,1,0,0,0,686,688,1,0,0,0,687,675,1,0,0,0,
		687,679,1,0,0,0,687,683,1,0,0,0,688,71,1,0,0,0,689,691,3,70,35,0,690,692,
		7,0,0,0,691,690,1,0,0,0,691,692,1,0,0,0,692,693,1,0,0,0,693,696,5,130,
		0,0,694,695,5,70,0,0,695,697,3,40,20,0,696,694,1,0,0,0,696,697,1,0,0,0,
		697,698,1,0,0,0,698,699,5,119,0,0,699,700,3,16,8,0,700,73,1,0,0,0,701,
		702,5,66,0,0,702,75,1,0,0,0,703,704,7,6,0,0,704,77,1,0,0,0,705,712,3,76,
		38,0,706,712,5,12,0,0,707,709,5,15,0,0,708,710,5,13,0,0,709,708,1,0,0,
		0,709,710,1,0,0,0,710,712,1,0,0,0,711,705,1,0,0,0,711,706,1,0,0,0,711,
		707,1,0,0,0,712,79,1,0,0,0,713,714,5,17,0,0,714,81,1,0,0,0,715,718,3,76,
		38,0,716,718,3,78,39,0,717,715,1,0,0,0,717,716,1,0,0,0,717,718,1,0,0,0,
		718,720,1,0,0,0,719,721,3,80,40,0,720,719,1,0,0,0,720,721,1,0,0,0,721,
		722,1,0,0,0,722,723,3,92,46,0,723,725,5,130,0,0,724,726,3,84,42,0,725,
		724,1,0,0,0,725,726,1,0,0,0,726,728,1,0,0,0,727,729,3,90,45,0,728,727,
		1,0,0,0,728,729,1,0,0,0,729,730,1,0,0,0,730,731,5,119,0,0,731,732,3,110,
		55,0,732,83,1,0,0,0,733,734,5,60,0,0,734,739,3,86,43,0,735,736,5,64,0,
		0,736,738,3,86,43,0,737,735,1,0,0,0,738,741,1,0,0,0,739,737,1,0,0,0,739,
		740,1,0,0,0,740,742,1,0,0,0,741,739,1,0,0,0,742,743,5,61,0,0,743,85,1,
		0,0,0,744,747,5,130,0,0,745,746,5,70,0,0,746,748,3,88,44,0,747,745,1,0,
		0,0,747,748,1,0,0,0,748,87,1,0,0,0,749,752,3,92,46,0,750,752,3,40,20,0,
		751,749,1,0,0,0,751,750,1,0,0,0,752,89,1,0,0,0,753,754,5,70,0,0,754,759,
		3,40,20,0,755,756,5,64,0,0,756,758,3,40,20,0,757,755,1,0,0,0,758,761,1,
		0,0,0,759,757,1,0,0,0,759,760,1,0,0,0,760,91,1,0,0,0,761,759,1,0,0,0,762,
		764,5,42,0,0,763,762,1,0,0,0,763,764,1,0,0,0,764,765,1,0,0,0,765,771,5,
		8,0,0,766,767,5,44,0,0,767,771,5,8,0,0,768,771,5,10,0,0,769,771,5,9,0,
		0,770,763,1,0,0,0,770,766,1,0,0,0,770,768,1,0,0,0,770,769,1,0,0,0,771,
		93,1,0,0,0,772,773,7,7,0,0,773,95,1,0,0,0,774,775,5,20,0,0,775,97,1,0,
		0,0,776,777,7,8,0,0,777,99,1,0,0,0,778,780,3,66,33,0,779,778,1,0,0,0,779,
		780,1,0,0,0,780,782,1,0,0,0,781,783,3,94,47,0,782,781,1,0,0,0,782,783,
		1,0,0,0,783,785,1,0,0,0,784,786,3,96,48,0,785,784,1,0,0,0,785,786,1,0,
		0,0,786,790,1,0,0,0,787,789,3,98,49,0,788,787,1,0,0,0,789,792,1,0,0,0,
		790,788,1,0,0,0,790,791,1,0,0,0,791,793,1,0,0,0,792,790,1,0,0,0,793,795,
		5,130,0,0,794,796,3,84,42,0,795,794,1,0,0,0,795,796,1,0,0,0,796,798,1,
		0,0,0,797,799,3,102,51,0,798,797,1,0,0,0,798,799,1,0,0,0,799,802,1,0,0,
		0,800,801,5,70,0,0,801,803,3,40,20,0,802,800,1,0,0,0,802,803,1,0,0,0,803,
		804,1,0,0,0,804,805,5,119,0,0,805,828,3,16,8,0,806,808,3,66,33,0,807,806,
		1,0,0,0,807,808,1,0,0,0,808,810,1,0,0,0,809,811,3,94,47,0,810,809,1,0,
		0,0,810,811,1,0,0,0,811,813,1,0,0,0,812,814,3,96,48,0,813,812,1,0,0,0,
		813,814,1,0,0,0,814,818,1,0,0,0,815,817,3,98,49,0,816,815,1,0,0,0,817,
		820,1,0,0,0,818,816,1,0,0,0,818,819,1,0,0,0,819,821,1,0,0,0,820,818,1,
		0,0,0,821,823,5,130,0,0,822,824,3,84,42,0,823,822,1,0,0,0,823,824,1,0,
		0,0,824,825,1,0,0,0,825,826,5,70,0,0,826,828,3,40,20,0,827,779,1,0,0,0,
		827,807,1,0,0,0,828,101,1,0,0,0,829,838,5,56,0,0,830,835,3,106,53,0,831,
		832,5,64,0,0,832,834,3,106,53,0,833,831,1,0,0,0,834,837,1,0,0,0,835,833,
		1,0,0,0,835,836,1,0,0,0,836,839,1,0,0,0,837,835,1,0,0,0,838,830,1,0,0,
		0,838,839,1,0,0,0,839,840,1,0,0,0,840,850,5,57,0,0,841,846,3,106,53,0,
		842,843,5,64,0,0,843,845,3,106,53,0,844,842,1,0,0,0,845,848,1,0,0,0,846,
		844,1,0,0,0,846,847,1,0,0,0,847,850,1,0,0,0,848,846,1,0,0,0,849,829,1,
		0,0,0,849,841,1,0,0,0,850,103,1,0,0,0,851,852,7,9,0,0,852,105,1,0,0,0,
		853,855,3,66,33,0,854,853,1,0,0,0,854,855,1,0,0,0,855,857,1,0,0,0,856,
		858,3,104,52,0,857,856,1,0,0,0,857,858,1,0,0,0,858,859,1,0,0,0,859,861,
		5,130,0,0,860,862,5,67,0,0,861,860,1,0,0,0,861,862,1,0,0,0,862,865,1,0,
		0,0,863,864,5,70,0,0,864,866,3,40,20,0,865,863,1,0,0,0,865,866,1,0,0,0,
		866,868,1,0,0,0,867,869,3,108,54,0,868,867,1,0,0,0,868,869,1,0,0,0,869,
		872,1,0,0,0,870,871,5,119,0,0,871,873,3,16,8,0,872,870,1,0,0,0,872,873,
		1,0,0,0,873,107,1,0,0,0,874,876,5,77,0,0,875,874,1,0,0,0,875,876,1,0,0,
		0,876,877,1,0,0,0,877,878,5,62,0,0,878,879,3,16,8,0,879,880,5,63,0,0,880,
		109,1,0,0,0,881,887,5,62,0,0,882,886,3,100,50,0,883,886,3,82,41,0,884,
		886,5,2,0,0,885,882,1,0,0,0,885,883,1,0,0,0,885,884,1,0,0,0,886,889,1,
		0,0,0,887,885,1,0,0,0,887,888,1,0,0,0,888,890,1,0,0,0,889,887,1,0,0,0,
		890,891,5,63,0,0,891,111,1,0,0,0,892,893,5,48,0,0,893,894,5,119,0,0,894,
		895,3,16,8,0,895,113,1,0,0,0,896,902,5,50,0,0,897,898,5,130,0,0,898,900,
		5,70,0,0,899,897,1,0,0,0,899,900,1,0,0,0,900,901,1,0,0,0,901,903,3,40,
		20,0,902,899,1,0,0,0,902,903,1,0,0,0,903,904,1,0,0,0,904,905,5,119,0,0,
		905,906,3,16,8,0,906,115,1,0,0,0,907,908,5,51,0,0,908,909,5,119,0,0,909,
		910,3,16,8,0,910,117,1,0,0,0,911,912,5,52,0,0,912,913,5,119,0,0,913,914,
		3,16,8,0,914,119,1,0,0,0,122,122,124,131,134,141,145,147,154,159,161,165,
		173,177,186,190,202,205,215,221,223,227,243,248,256,264,270,276,280,284,
		292,298,304,308,312,322,326,334,341,347,351,354,365,368,377,396,399,406,
		408,490,493,495,497,509,535,542,546,550,558,564,568,571,581,591,601,607,
		614,621,627,631,634,640,647,652,656,661,667,677,681,685,687,691,696,709,
		711,717,720,725,728,739,747,751,759,763,770,779,782,785,790,795,798,802,
		807,810,813,818,823,827,835,838,846,849,854,857,861,865,868,872,875,885,
		887,899,902
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace LoschScript.Parser
