//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Jonas\Source\Repos\lsc\src\LoschScript\Parser\LoschScriptParser.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LoschScript.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class LoschScriptParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INDENT=1, DEDENT=2, Ws=3, NewLine=4, Single_Line_Comment=5, Delimited_Comment=6, 
		Import=7, Export=8, Assembly=9, Type=10, Module=11, Global=12, Local=13, 
		Internal=14, Static=15, Protected=16, Sealed=17, Partial=18, Infix=19, 
		Inline=20, Var=21, Val=22, True=23, False=24, Of=25, Open_Paren=26, Close_Paren=27, 
		Open_Bracket=28, Close_Bracket=29, Open_Brace=30, Close_Brace=31, Comma=32, 
		Double_Comma=33, Dot=34, Double_Dot=35, Double_Dot_Question_Mark=36, Dot_Equals=37, 
		Colon=38, Underscore=39, Single_Quote=40, Double_Quote=41, Question_Mark=42, 
		Exclamation_Mark=43, Exclamation_Question=44, Exclamation_Colon=45, At_Sign=46, 
		Exclamation_At=47, Dollar_Sign=48, Caret=49, Percent_Caret=50, Bar=51, 
		Double_Bar=52, Bar_Equals=53, Double_Bar_Equals=54, Ampersand=55, Double_Ampersand=56, 
		Double_Ampersand_Equals=57, Ampersand_Equals=58, Less_Than=59, Greater_Than=60, 
		Less_Equals=61, Greater_Equals=62, Double_Equals=63, Exclamation_Equals=64, 
		Plus=65, Plus_Equals=66, Minus=67, Minus_Equals=68, Asterisk=69, Asterisk_Equals=70, 
		Double_Asterisk=71, Double_Asterisk_Equals=72, Slash=73, Slash_Equals=74, 
		Percent=75, Percent_Equals=76, Equals=77, Tilde=78, Double_Tilde=79, Tilde_Equals=80, 
		Double_Less_Than=81, Double_Less_Than_Equals=82, Double_Greater_Than=83, 
		Double_Greater_Than_Equals=84, Arrow_Right=85, Arrow_Left=86, Double_Backtick=87, 
		Identifier=88, Integer_Literal=89, Hex_Integer_Literal=90, Binary_Integer_Literal=91, 
		Real_Literal=92, Character_Literal=93, String_Literal=94, Verbatim_String_Literal=95;
	public const int
		RULE_compilation_unit = 0, RULE_file_body = 1, RULE_top_level_statements = 2, 
		RULE_full_program = 3, RULE_import_directive = 4, RULE_export_directive = 5, 
		RULE_full_identifier = 6, RULE_code_block = 7, RULE_expression = 8, RULE_atom = 9, 
		RULE_expression_atom = 10, RULE_integer_atom = 11, RULE_real_atom = 12, 
		RULE_boolean_atom = 13, RULE_string_atom = 14, RULE_character_atom = 15, 
		RULE_empty_atom = 16, RULE_wildcard_atom = 17, RULE_identifier_atom = 18, 
		RULE_assignment_operator = 19, RULE_type_name = 20, RULE_union_variable_type = 21, 
		RULE_if_branch = 22, RULE_postfix_if_branch = 23, RULE_elif_branch = 24, 
		RULE_else_branch = 25, RULE_unless_branch = 26, RULE_else_unless_branch = 27, 
		RULE_postfix_unless_branch = 28, RULE_range = 29, RULE_arglist = 30, RULE_attribute = 31, 
		RULE_type_definition = 32, RULE_generic_identifier = 33, RULE_field_access_modifier = 34, 
		RULE_field_declaration = 35;
	public static readonly string[] ruleNames = {
		"compilation_unit", "file_body", "top_level_statements", "full_program", 
		"import_directive", "export_directive", "full_identifier", "code_block", 
		"expression", "atom", "expression_atom", "integer_atom", "real_atom", 
		"boolean_atom", "string_atom", "character_atom", "empty_atom", "wildcard_atom", 
		"identifier_atom", "assignment_operator", "type_name", "union_variable_type", 
		"if_branch", "postfix_if_branch", "elif_branch", "else_branch", "unless_branch", 
		"else_unless_branch", "postfix_unless_branch", "range", "arglist", "attribute", 
		"type_definition", "generic_identifier", "field_access_modifier", "field_declaration"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, "'import'", "'export'", "'assembly'", 
		"'type'", "'module'", "'global'", "'local'", "'internal'", "'static'", 
		"'protected'", "'sealed'", "'partial'", "'infix'", "'inline'", "'var'", 
		"'val'", "'true'", "'false'", "'of'", "'('", "')'", "'['", "']'", "'{'", 
		"'}'", "','", "',,'", "'.'", "'..'", "'..?'", "'.='", "':'", "'_'", "'''", 
		"'\"'", "'?'", "'!'", "'!?'", "'!:'", "'@'", "'!@'", "'$'", "'^'", "'%^'", 
		"'|'", "'||'", "'|='", "'||='", "'&'", "'&&'", "'&&='", "'&='", "'<'", 
		"'>'", "'<='", "'>='", "'=='", "'!='", "'+'", "'+='", "'-'", "'-='", "'*'", 
		"'*='", "'**'", "'**='", "'/'", "'/='", "'%'", "'%='", "'='", "'~'", "'~~'", 
		"'~='", "'<<'", "'<<='", "'>>'", "'>>='", "'->'", "'<-'", "'``'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INDENT", "DEDENT", "Ws", "NewLine", "Single_Line_Comment", "Delimited_Comment", 
		"Import", "Export", "Assembly", "Type", "Module", "Global", "Local", "Internal", 
		"Static", "Protected", "Sealed", "Partial", "Infix", "Inline", "Var", 
		"Val", "True", "False", "Of", "Open_Paren", "Close_Paren", "Open_Bracket", 
		"Close_Bracket", "Open_Brace", "Close_Brace", "Comma", "Double_Comma", 
		"Dot", "Double_Dot", "Double_Dot_Question_Mark", "Dot_Equals", "Colon", 
		"Underscore", "Single_Quote", "Double_Quote", "Question_Mark", "Exclamation_Mark", 
		"Exclamation_Question", "Exclamation_Colon", "At_Sign", "Exclamation_At", 
		"Dollar_Sign", "Caret", "Percent_Caret", "Bar", "Double_Bar", "Bar_Equals", 
		"Double_Bar_Equals", "Ampersand", "Double_Ampersand", "Double_Ampersand_Equals", 
		"Ampersand_Equals", "Less_Than", "Greater_Than", "Less_Equals", "Greater_Equals", 
		"Double_Equals", "Exclamation_Equals", "Plus", "Plus_Equals", "Minus", 
		"Minus_Equals", "Asterisk", "Asterisk_Equals", "Double_Asterisk", "Double_Asterisk_Equals", 
		"Slash", "Slash_Equals", "Percent", "Percent_Equals", "Equals", "Tilde", 
		"Double_Tilde", "Tilde_Equals", "Double_Less_Than", "Double_Less_Than_Equals", 
		"Double_Greater_Than", "Double_Greater_Than_Equals", "Arrow_Right", "Arrow_Left", 
		"Double_Backtick", "Identifier", "Integer_Literal", "Hex_Integer_Literal", 
		"Binary_Integer_Literal", "Real_Literal", "Character_Literal", "String_Literal", 
		"Verbatim_String_Literal"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LoschScriptParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LoschScriptParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LoschScriptParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LoschScriptParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Compilation_unitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public File_bodyContext file_body() {
			return GetRuleContext<File_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(LoschScriptParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Import_directiveContext[] import_directive() {
			return GetRuleContexts<Import_directiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Import_directiveContext import_directive(int i) {
			return GetRuleContext<Import_directiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(LoschScriptParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(LoschScriptParser.NewLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Export_directiveContext export_directive() {
			return GetRuleContext<Export_directiveContext>(0);
		}
		public Compilation_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilation_unit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterCompilation_unit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitCompilation_unit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilation_unit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compilation_unitContext compilation_unit() {
		Compilation_unitContext _localctx = new Compilation_unitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilation_unit);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 74;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case Import:
					case Exclamation_Mark:
						{
						State = 72;
						import_directive();
						}
						break;
					case NewLine:
						{
						State = 73;
						Match(NewLine);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 78;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 86;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Export) {
				{
				State = 79;
				export_directive();
				State = 83;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 80;
						Match(NewLine);
						}
						} 
					}
					State = 85;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
				}
				}
			}

			State = 88;
			file_body();
			State = 89;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementsContext top_level_statements() {
			return GetRuleContext<Top_level_statementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Full_programContext full_program() {
			return GetRuleContext<Full_programContext>(0);
		}
		public File_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterFile_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitFile_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public File_bodyContext file_body() {
		File_bodyContext _localctx = new File_bodyContext(Context, State);
		EnterRule(_localctx, 2, RULE_file_body);
		try {
			State = 93;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 91;
				top_level_statements();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 92;
				full_program();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_level_statementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(LoschScriptParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(LoschScriptParser.NewLine, i);
		}
		public Top_level_statementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_level_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterTop_level_statements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitTop_level_statements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_level_statements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Top_level_statementsContext top_level_statements() {
		Top_level_statementsContext _localctx = new Top_level_statementsContext(Context, State);
		EnterRule(_localctx, 4, RULE_top_level_statements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 97;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
				case 1:
					{
					State = 95;
					expression(0);
					}
					break;
				case 2:
					{
					State = 96;
					Match(NewLine);
					}
					break;
				}
				}
				State = 99;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 578392045918355472L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2038439941L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Full_programContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_definitionContext[] type_definition() {
			return GetRuleContexts<Type_definitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_definitionContext type_definition(int i) {
			return GetRuleContext<Type_definitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(LoschScriptParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(LoschScriptParser.NewLine, i);
		}
		public Full_programContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_full_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterFull_program(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitFull_program(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFull_program(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Full_programContext full_program() {
		Full_programContext _localctx = new Full_programContext(Context, State);
		EnterRule(_localctx, 6, RULE_full_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 103;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Type:
					{
					State = 101;
					type_definition();
					}
					break;
				case NewLine:
					{
					State = 102;
					Match(NewLine);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 105;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==NewLine || _la==Type );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_directiveContext : ParserRuleContext {
		public Import_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_directive; } }
	 
		public Import_directiveContext() { }
		public virtual void CopyFrom(Import_directiveContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Basic_importContext : Import_directiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Import() { return GetToken(LoschScriptParser.Import, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Full_identifierContext[] full_identifier() {
			return GetRuleContexts<Full_identifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Full_identifierContext full_identifier(int i) {
			return GetRuleContext<Full_identifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation_Mark() { return GetToken(LoschScriptParser.Exclamation_Mark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(LoschScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(LoschScriptParser.Comma, i);
		}
		public Basic_importContext(Import_directiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterBasic_import(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitBasic_import(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasic_import(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AliasContext : Import_directiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Import() { return GetToken(LoschScriptParser.Import, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(LoschScriptParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(LoschScriptParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Equals() { return GetTokens(LoschScriptParser.Equals); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals(int i) {
			return GetToken(LoschScriptParser.Equals, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Full_identifierContext[] full_identifier() {
			return GetRuleContexts<Full_identifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Full_identifierContext full_identifier(int i) {
			return GetRuleContext<Full_identifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation_Mark() { return GetToken(LoschScriptParser.Exclamation_Mark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(LoschScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(LoschScriptParser.Comma, i);
		}
		public AliasContext(Import_directiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlias(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Type_importContext : Import_directiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Import() { return GetToken(LoschScriptParser.Import, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Type() { return GetToken(LoschScriptParser.Type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Full_identifierContext[] full_identifier() {
			return GetRuleContexts<Full_identifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Full_identifierContext full_identifier(int i) {
			return GetRuleContext<Full_identifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation_Mark() { return GetToken(LoschScriptParser.Exclamation_Mark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(LoschScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(LoschScriptParser.Comma, i);
		}
		public Type_importContext(Import_directiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterType_import(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitType_import(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_import(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Import_directiveContext import_directive() {
		Import_directiveContext _localctx = new Import_directiveContext(Context, State);
		EnterRule(_localctx, 8, RULE_import_directive);
		int _la;
		try {
			State = 148;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				_localctx = new Basic_importContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 108;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Exclamation_Mark) {
					{
					State = 107;
					Match(Exclamation_Mark);
					}
				}

				State = 110;
				Match(Import);
				State = 111;
				full_identifier();
				State = 116;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 112;
					Match(Comma);
					State = 113;
					full_identifier();
					}
					}
					State = 118;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new Type_importContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 120;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Exclamation_Mark) {
					{
					State = 119;
					Match(Exclamation_Mark);
					}
				}

				State = 122;
				Match(Import);
				State = 123;
				Match(Type);
				State = 124;
				full_identifier();
				State = 129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 125;
					Match(Comma);
					State = 126;
					full_identifier();
					}
					}
					State = 131;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 3:
				_localctx = new AliasContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 133;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Exclamation_Mark) {
					{
					State = 132;
					Match(Exclamation_Mark);
					}
				}

				State = 135;
				Match(Import);
				State = 136;
				Match(Identifier);
				State = 137;
				Match(Equals);
				State = 138;
				full_identifier();
				State = 145;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 139;
					Match(Comma);
					State = 140;
					Match(Identifier);
					State = 141;
					Match(Equals);
					State = 142;
					full_identifier();
					}
					}
					State = 147;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Export_directiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Export() { return GetToken(LoschScriptParser.Export, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Full_identifierContext full_identifier() {
			return GetRuleContext<Full_identifierContext>(0);
		}
		public Export_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_export_directive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterExport_directive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitExport_directive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExport_directive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Export_directiveContext export_directive() {
		Export_directiveContext _localctx = new Export_directiveContext(Context, State);
		EnterRule(_localctx, 10, RULE_export_directive);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			Match(Export);
			State = 151;
			full_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Full_identifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(LoschScriptParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(LoschScriptParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dot() { return GetTokens(LoschScriptParser.Dot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot(int i) {
			return GetToken(LoschScriptParser.Dot, i);
		}
		public Full_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_full_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterFull_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitFull_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFull_identifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Full_identifierContext full_identifier() {
		Full_identifierContext _localctx = new Full_identifierContext(Context, State);
		EnterRule(_localctx, 12, RULE_full_identifier);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			Match(Identifier);
			State = 158;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 154;
					Match(Dot);
					State = 155;
					Match(Identifier);
					}
					} 
				}
				State = 160;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Code_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(LoschScriptParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(LoschScriptParser.DEDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(LoschScriptParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(LoschScriptParser.NewLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Brace() { return GetToken(LoschScriptParser.Open_Brace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Brace() { return GetToken(LoschScriptParser.Close_Brace, 0); }
		public Code_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterCode_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitCode_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCode_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Code_blockContext code_block() {
		Code_blockContext _localctx = new Code_blockContext(Context, State);
		EnterRule(_localctx, 14, RULE_code_block);
		int _la;
		try {
			int _alt;
			State = 202;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 162;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 161;
					Match(NewLine);
					}
					}
					State = 164;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==NewLine );
				State = 166;
				Match(INDENT);
				State = 171;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 578392045918355472L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2038439941L) != 0)) {
					{
					State = 169;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
					case 1:
						{
						State = 167;
						Match(NewLine);
						}
						break;
					case 2:
						{
						State = 168;
						expression(0);
						}
						break;
					}
					}
					State = 173;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 174;
				Match(DEDENT);
				State = 178;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 175;
						Match(NewLine);
						}
						} 
					}
					State = 180;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 184;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NewLine) {
					{
					{
					State = 181;
					Match(NewLine);
					}
					}
					State = 186;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 187;
				Match(Open_Brace);
				State = 192;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 578392045918355472L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2038439941L) != 0)) {
					{
					State = 190;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
					case 1:
						{
						State = 188;
						Match(NewLine);
						}
						break;
					case 2:
						{
						State = 189;
						expression(0);
						}
						break;
					}
					}
					State = 194;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 195;
				Match(Close_Brace);
				State = 199;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 196;
						Match(NewLine);
						}
						} 
					}
					State = 201;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Attributed_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public Attributed_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterAttributed_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitAttributed_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributed_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Equality_expressionContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Equals() { return GetToken(LoschScriptParser.Double_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation_Equals() { return GetToken(LoschScriptParser.Exclamation_Equals, 0); }
		public Equality_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterEquality_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitEquality_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Subtraction_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(LoschScriptParser.Minus, 0); }
		public Subtraction_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterSubtraction_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitSubtraction_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtraction_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Implementation_query_exceptionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Dot_Question_Mark() { return GetToken(LoschScriptParser.Double_Dot_Question_Mark, 0); }
		public Implementation_query_exceptionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterImplementation_query_exception(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitImplementation_query_exception(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplementation_query_exception(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Bitwise_complement_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tilde() { return GetToken(LoschScriptParser.Tilde, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Bitwise_complement_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterBitwise_complement_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitBitwise_complement_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwise_complement_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Until_loopContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation_At() { return GetToken(LoschScriptParser.Exclamation_At, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(LoschScriptParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		public Until_loopContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterUntil_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitUntil_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUntil_loop(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class While_loopContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode At_Sign() { return GetToken(LoschScriptParser.At_Sign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(LoschScriptParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		public While_loopContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterWhile_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitWhile_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_loop(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Xor_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Caret() { return GetToken(LoschScriptParser.Caret, 0); }
		public Xor_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterXor_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitXor_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXor_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Prefix_if_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public If_branchContext if_branch() {
			return GetRuleContext<If_branchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Elif_branchContext[] elif_branch() {
			return GetRuleContexts<Elif_branchContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Elif_branchContext elif_branch(int i) {
			return GetRuleContext<Elif_branchContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_branchContext else_branch() {
			return GetRuleContext<Else_branchContext>(0);
		}
		public Prefix_if_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterPrefix_if_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitPrefix_if_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefix_if_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Logical_negation_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation_Mark() { return GetToken(LoschScriptParser.Exclamation_Mark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Logical_negation_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterLogical_negation_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitLogical_negation_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_negation_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Right_shift_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Greater_Than() { return GetToken(LoschScriptParser.Double_Greater_Than, 0); }
		public Right_shift_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterRight_shift_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitRight_shift_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRight_shift_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Multiply_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Asterisk() { return GetToken(LoschScriptParser.Asterisk, 0); }
		public Multiply_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterMultiply_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitMultiply_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiply_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Logical_or_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Bar() { return GetToken(LoschScriptParser.Double_Bar, 0); }
		public Logical_or_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterLogical_or_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitLogical_or_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_or_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Array_or_list_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Bracket() { return GetToken(LoschScriptParser.Open_Bracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Bracket() { return GetToken(LoschScriptParser.Close_Bracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(LoschScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(LoschScriptParser.Comma, i);
		}
		public Array_or_list_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterArray_or_list_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitArray_or_list_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_or_list_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Block_postfix_unless_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Postfix_unless_branchContext postfix_unless_branch() {
			return GetRuleContext<Postfix_unless_branchContext>(0);
		}
		public Block_postfix_unless_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterBlock_postfix_unless_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitBlock_postfix_unless_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock_postfix_unless_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class And_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ampersand() { return GetToken(LoschScriptParser.Ampersand, 0); }
		public And_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterAnd_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitAnd_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Range_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public Range_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterRange_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitRange_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Unary_negation_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(LoschScriptParser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Unary_negation_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterUnary_negation_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitUnary_negation_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_negation_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Member_access_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(LoschScriptParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(LoschScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArglistContext arglist() {
			return GetRuleContext<ArglistContext>(0);
		}
		public Member_access_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterMember_access_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitMember_access_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_access_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Newlined_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine() { return GetToken(LoschScriptParser.NewLine, 0); }
		public Newlined_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterNewlined_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitNewlined_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewlined_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class For_loopContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode At_Sign() { return GetToken(LoschScriptParser.At_Sign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(LoschScriptParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Arrow_Right() { return GetTokens(LoschScriptParser.Arrow_Right); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Arrow_Right(int i) {
			return GetToken(LoschScriptParser.Arrow_Right, i);
		}
		public For_loopContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterFor_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitFor_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_loop(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Remainder_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Percent() { return GetToken(LoschScriptParser.Percent, 0); }
		public Remainder_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterRemainder_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitRemainder_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemainder_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Identifier_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(LoschScriptParser.Identifier, 0); }
		public Identifier_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterIdentifier_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitIdentifier_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Typeof_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Caret() { return GetToken(LoschScriptParser.Caret, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(LoschScriptParser.Identifier, 0); }
		public Typeof_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeof_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeof_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeof_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Block_postfix_if_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Postfix_if_branchContext postfix_if_branch() {
			return GetRuleContext<Postfix_if_branchContext>(0);
		}
		public Block_postfix_if_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterBlock_postfix_if_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitBlock_postfix_if_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock_postfix_if_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Postfix_unless_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Postfix_unless_branchContext postfix_unless_branch() {
			return GetRuleContext<Postfix_unless_branchContext>(0);
		}
		public Postfix_unless_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterPostfix_unless_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitPostfix_unless_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfix_unless_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Power_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Asterisk() { return GetToken(LoschScriptParser.Double_Asterisk, 0); }
		public Power_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterPower_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitPower_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPower_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Dictionary_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Open_Bracket() { return GetTokens(LoschScriptParser.Open_Bracket); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Bracket(int i) {
			return GetToken(LoschScriptParser.Open_Bracket, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Close_Bracket() { return GetTokens(LoschScriptParser.Close_Bracket); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Bracket(int i) {
			return GetToken(LoschScriptParser.Close_Bracket, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(LoschScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(LoschScriptParser.Comma, i);
		}
		public Dictionary_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterDictionary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitDictionary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictionary_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public AssignmentContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Prefix_unless_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unless_branchContext unless_branch() {
			return GetRuleContext<Unless_branchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_unless_branchContext[] else_unless_branch() {
			return GetRuleContexts<Else_unless_branchContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_unless_branchContext else_unless_branch(int i) {
			return GetRuleContext<Else_unless_branchContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_branchContext else_branch() {
			return GetRuleContext<Else_branchContext>(0);
		}
		public Prefix_unless_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterPrefix_unless_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitPrefix_unless_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefix_unless_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Addition_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(LoschScriptParser.Plus, 0); }
		public Addition_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterAddition_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitAddition_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddition_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Atom_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public Atom_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterAtom_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitAtom_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Index_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode At_Sign() { return GetToken(LoschScriptParser.At_Sign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Export_directiveContext export_directive() {
			return GetRuleContext<Export_directiveContext>(0);
		}
		public Index_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterIndex_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitIndex_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Comparison_expressionContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less_Than() { return GetToken(LoschScriptParser.Less_Than, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less_Equals() { return GetToken(LoschScriptParser.Less_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater_Than() { return GetToken(LoschScriptParser.Greater_Than, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater_Equals() { return GetToken(LoschScriptParser.Greater_Equals, 0); }
		public Comparison_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterComparison_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitComparison_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Full_identifier_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Full_identifierContext full_identifier() {
			return GetRuleContext<Full_identifierContext>(0);
		}
		public Full_identifier_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterFull_identifier_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitFull_identifier_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFull_identifier_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Local_declarationContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(LoschScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(LoschScriptParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(LoschScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Var() { return GetToken(LoschScriptParser.Var, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Val() { return GetToken(LoschScriptParser.Val, 0); }
		public Local_declarationContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterLocal_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitLocal_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Tuple_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Paren() { return GetToken(LoschScriptParser.Open_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Paren() { return GetToken(LoschScriptParser.Close_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(LoschScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(LoschScriptParser.Comma, i);
		}
		public Tuple_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterTuple_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitTuple_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTuple_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Unary_plus_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(LoschScriptParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Unary_plus_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterUnary_plus_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitUnary_plus_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_plus_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Or_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bar() { return GetToken(LoschScriptParser.Bar, 0); }
		public Or_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterOr_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitOr_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Nameof_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Percent_Caret() { return GetToken(LoschScriptParser.Percent_Caret, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Nameof_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterNameof_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitNameof_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameof_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Postfix_if_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Postfix_if_branchContext postfix_if_branch() {
			return GetRuleContext<Postfix_if_branchContext>(0);
		}
		public Postfix_if_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterPostfix_if_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitPostfix_if_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfix_if_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Divide_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Slash() { return GetToken(LoschScriptParser.Slash, 0); }
		public Divide_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterDivide_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitDivide_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivide_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Logical_and_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Ampersand() { return GetToken(LoschScriptParser.Double_Ampersand, 0); }
		public Logical_and_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterLogical_and_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitLogical_and_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_and_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Dotted_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(LoschScriptParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(LoschScriptParser.Identifier, 0); }
		public Dotted_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterDotted_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitDotted_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDotted_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Left_shift_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Less_Than() { return GetToken(LoschScriptParser.Double_Less_Than, 0); }
		public Left_shift_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterLeft_shift_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitLeft_shift_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeft_shift_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Full_identifier_member_access_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Full_identifierContext full_identifier() {
			return GetRuleContext<Full_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArglistContext arglist() {
			return GetRuleContext<ArglistContext>(0);
		}
		public Full_identifier_member_access_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterFull_identifier_member_access_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitFull_identifier_member_access_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFull_identifier_member_access_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 339;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				{
				_localctx = new Full_identifier_member_access_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 205;
				full_identifier();
				State = 207;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
				case 1:
					{
					State = 206;
					arglist();
					}
					break;
				}
				}
				break;
			case 2:
				{
				_localctx = new Full_identifier_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 209;
				full_identifier();
				}
				break;
			case 3:
				{
				_localctx = new Identifier_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 210;
				Match(Identifier);
				}
				break;
			case 4:
				{
				_localctx = new Logical_negation_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 211;
				Match(Exclamation_Mark);
				State = 212;
				expression(43);
				}
				break;
			case 5:
				{
				_localctx = new Bitwise_complement_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 213;
				Match(Tilde);
				State = 214;
				expression(35);
				}
				break;
			case 6:
				{
				_localctx = new Unary_negation_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 215;
				Match(Minus);
				State = 216;
				expression(27);
				}
				break;
			case 7:
				{
				_localctx = new Unary_plus_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 217;
				Match(Plus);
				State = 218;
				expression(26);
				}
				break;
			case 8:
				{
				_localctx = new Typeof_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 219;
				Match(Caret);
				State = 220;
				Match(Identifier);
				}
				break;
			case 9:
				{
				_localctx = new Nameof_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 221;
				Match(Percent_Caret);
				State = 222;
				expression(23);
				}
				break;
			case 10:
				{
				_localctx = new Local_declarationContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 224;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Var || _la==Val) {
					{
					State = 223;
					_la = TokenStream.LA(1);
					if ( !(_la==Var || _la==Val) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 226;
				Match(Identifier);
				State = 229;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 227;
					Match(Colon);
					State = 228;
					type_name();
					}
				}

				State = 231;
				Match(Equals);
				State = 232;
				expression(21);
				}
				break;
			case 11:
				{
				_localctx = new Range_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 233;
				range();
				}
				break;
			case 12:
				{
				_localctx = new Attributed_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 235;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 234;
						attribute();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 237;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 239;
				expression(15);
				}
				break;
			case 13:
				{
				_localctx = new Prefix_if_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 241;
				if_branch();
				State = 245;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 242;
						elif_branch();
						}
						} 
					}
					State = 247;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
				}
				State = 249;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
				case 1:
					{
					State = 248;
					else_branch();
					}
					break;
				}
				}
				break;
			case 14:
				{
				_localctx = new Block_postfix_if_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 251;
				code_block();
				State = 252;
				postfix_if_branch();
				}
				break;
			case 15:
				{
				_localctx = new Prefix_unless_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 254;
				unless_branch();
				State = 258;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 255;
						else_unless_branch();
						}
						} 
					}
					State = 260;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
				}
				State = 262;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
				case 1:
					{
					State = 261;
					else_branch();
					}
					break;
				}
				}
				break;
			case 16:
				{
				_localctx = new Block_postfix_unless_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 264;
				code_block();
				State = 265;
				postfix_unless_branch();
				}
				break;
			case 17:
				{
				_localctx = new While_loopContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 267;
				Match(At_Sign);
				State = 268;
				expression(0);
				State = 269;
				Match(Equals);
				State = 272;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
				case 1:
					{
					State = 270;
					code_block();
					}
					break;
				case 2:
					{
					State = 271;
					expression(0);
					}
					break;
				}
				}
				break;
			case 18:
				{
				_localctx = new Until_loopContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 274;
				Match(Exclamation_At);
				State = 275;
				expression(0);
				State = 276;
				Match(Equals);
				State = 279;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
				case 1:
					{
					State = 277;
					code_block();
					}
					break;
				case 2:
					{
					State = 278;
					expression(0);
					}
					break;
				}
				}
				break;
			case 19:
				{
				_localctx = new For_loopContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 281;
				Match(At_Sign);
				State = 282;
				expression(0);
				State = 287;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Arrow_Right) {
					{
					{
					State = 283;
					Match(Arrow_Right);
					State = 284;
					expression(0);
					}
					}
					State = 289;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 290;
				Match(Equals);
				State = 293;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
				case 1:
					{
					State = 291;
					code_block();
					}
					break;
				case 2:
					{
					State = 292;
					expression(0);
					}
					break;
				}
				}
				break;
			case 20:
				{
				_localctx = new Array_or_list_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 295;
				Match(Open_Bracket);
				State = 304;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 578392045918355472L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2038439941L) != 0)) {
					{
					State = 296;
					expression(0);
					State = 301;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==Comma) {
						{
						{
						State = 297;
						Match(Comma);
						State = 298;
						expression(0);
						}
						}
						State = 303;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 306;
				Match(Close_Bracket);
				}
				break;
			case 21:
				{
				_localctx = new Tuple_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 307;
				Match(Open_Paren);
				State = 308;
				expression(0);
				State = 311;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 309;
					Match(Comma);
					State = 310;
					expression(0);
					}
					}
					State = 313;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Comma );
				State = 315;
				Match(Close_Paren);
				}
				break;
			case 22:
				{
				_localctx = new Dictionary_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 317;
				Match(Open_Bracket);
				State = 335;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Open_Bracket) {
					{
					State = 318;
					Match(Open_Bracket);
					State = 319;
					expression(0);
					State = 320;
					Match(Comma);
					State = 321;
					expression(0);
					State = 322;
					Match(Close_Bracket);
					State = 332;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==Comma) {
						{
						{
						State = 323;
						Match(Comma);
						State = 324;
						Match(Open_Bracket);
						State = 325;
						expression(0);
						State = 326;
						Match(Comma);
						State = 327;
						expression(0);
						State = 328;
						Match(Close_Bracket);
						}
						}
						State = 334;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 337;
				Match(Close_Bracket);
				}
				break;
			case 23:
				{
				_localctx = new Atom_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 338;
				atom();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 416;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 414;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
					case 1:
						{
						_localctx = new Power_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 341;
						if (!(Precpred(Context, 44))) throw new FailedPredicateException(this, "Precpred(Context, 44)");
						State = 342;
						Match(Double_Asterisk);
						State = 343;
						expression(45);
						}
						break;
					case 2:
						{
						_localctx = new Multiply_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 344;
						if (!(Precpred(Context, 42))) throw new FailedPredicateException(this, "Precpred(Context, 42)");
						State = 345;
						Match(Asterisk);
						State = 346;
						expression(43);
						}
						break;
					case 3:
						{
						_localctx = new Divide_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 347;
						if (!(Precpred(Context, 41))) throw new FailedPredicateException(this, "Precpred(Context, 41)");
						State = 348;
						Match(Slash);
						State = 349;
						expression(42);
						}
						break;
					case 4:
						{
						_localctx = new Remainder_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 350;
						if (!(Precpred(Context, 40))) throw new FailedPredicateException(this, "Precpred(Context, 40)");
						State = 351;
						Match(Percent);
						State = 352;
						expression(41);
						}
						break;
					case 5:
						{
						_localctx = new Addition_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 353;
						if (!(Precpred(Context, 39))) throw new FailedPredicateException(this, "Precpred(Context, 39)");
						State = 354;
						Match(Plus);
						State = 355;
						expression(40);
						}
						break;
					case 6:
						{
						_localctx = new Subtraction_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 356;
						if (!(Precpred(Context, 38))) throw new FailedPredicateException(this, "Precpred(Context, 38)");
						State = 357;
						Match(Minus);
						State = 358;
						expression(39);
						}
						break;
					case 7:
						{
						_localctx = new Left_shift_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 359;
						if (!(Precpred(Context, 37))) throw new FailedPredicateException(this, "Precpred(Context, 37)");
						State = 360;
						Match(Double_Less_Than);
						State = 361;
						expression(38);
						}
						break;
					case 8:
						{
						_localctx = new Right_shift_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 362;
						if (!(Precpred(Context, 36))) throw new FailedPredicateException(this, "Precpred(Context, 36)");
						State = 363;
						Match(Double_Greater_Than);
						State = 364;
						expression(37);
						}
						break;
					case 9:
						{
						_localctx = new Equality_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 365;
						if (!(Precpred(Context, 34))) throw new FailedPredicateException(this, "Precpred(Context, 34)");
						State = 366;
						((Equality_expressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==Double_Equals || _la==Exclamation_Equals) ) {
							((Equality_expressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 367;
						expression(35);
						}
						break;
					case 10:
						{
						_localctx = new Comparison_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 368;
						if (!(Precpred(Context, 33))) throw new FailedPredicateException(this, "Precpred(Context, 33)");
						State = 369;
						((Comparison_expressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 8646911284551352320L) != 0)) ) {
							((Comparison_expressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 370;
						expression(34);
						}
						break;
					case 11:
						{
						_localctx = new And_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 371;
						if (!(Precpred(Context, 32))) throw new FailedPredicateException(this, "Precpred(Context, 32)");
						State = 372;
						Match(Ampersand);
						State = 373;
						expression(33);
						}
						break;
					case 12:
						{
						_localctx = new Logical_and_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 374;
						if (!(Precpred(Context, 31))) throw new FailedPredicateException(this, "Precpred(Context, 31)");
						State = 375;
						Match(Double_Ampersand);
						State = 376;
						expression(32);
						}
						break;
					case 13:
						{
						_localctx = new Or_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 377;
						if (!(Precpred(Context, 30))) throw new FailedPredicateException(this, "Precpred(Context, 30)");
						State = 378;
						Match(Bar);
						State = 379;
						expression(31);
						}
						break;
					case 14:
						{
						_localctx = new Logical_or_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 380;
						if (!(Precpred(Context, 29))) throw new FailedPredicateException(this, "Precpred(Context, 29)");
						State = 381;
						Match(Double_Bar);
						State = 382;
						expression(30);
						}
						break;
					case 15:
						{
						_localctx = new Xor_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 383;
						if (!(Precpred(Context, 28))) throw new FailedPredicateException(this, "Precpred(Context, 28)");
						State = 384;
						Match(Caret);
						State = 385;
						expression(29);
						}
						break;
					case 16:
						{
						_localctx = new Implementation_query_exceptionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 386;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 387;
						Match(Double_Dot_Question_Mark);
						State = 388;
						expression(23);
						}
						break;
					case 17:
						{
						_localctx = new AssignmentContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 389;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 390;
						assignment_operator();
						State = 391;
						expression(21);
						}
						break;
					case 18:
						{
						_localctx = new Index_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 393;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 394;
						Match(At_Sign);
						State = 395;
						expression(17);
						}
						break;
					case 19:
						{
						_localctx = new Index_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 396;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 397;
						Match(At_Sign);
						State = 398;
						export_directive();
						}
						break;
					case 20:
						{
						_localctx = new Member_access_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 399;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 400;
						Match(Dot);
						State = 401;
						Match(Identifier);
						State = 403;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
						case 1:
							{
							State = 402;
							arglist();
							}
							break;
						}
						}
						break;
					case 21:
						{
						_localctx = new Dotted_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 405;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 406;
						Match(Dot);
						State = 407;
						Match(Identifier);
						}
						break;
					case 22:
						{
						_localctx = new Postfix_if_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 408;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 409;
						postfix_if_branch();
						}
						break;
					case 23:
						{
						_localctx = new Postfix_unless_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 410;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 411;
						postfix_unless_branch();
						}
						break;
					case 24:
						{
						_localctx = new Newlined_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 412;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 413;
						Match(NewLine);
						}
						break;
					}
					} 
				}
				State = 418;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression_atomContext expression_atom() {
			return GetRuleContext<Expression_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Integer_atomContext integer_atom() {
			return GetRuleContext<Integer_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Real_atomContext real_atom() {
			return GetRuleContext<Real_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Boolean_atomContext boolean_atom() {
			return GetRuleContext<Boolean_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_atomContext string_atom() {
			return GetRuleContext<String_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Character_atomContext character_atom() {
			return GetRuleContext<Character_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Empty_atomContext empty_atom() {
			return GetRuleContext<Empty_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Wildcard_atomContext wildcard_atom() {
			return GetRuleContext<Wildcard_atomContext>(0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 18, RULE_atom);
		try {
			State = 427;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 419;
				expression_atom();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 420;
				integer_atom();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 421;
				real_atom();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 422;
				boolean_atom();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 423;
				string_atom();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 424;
				character_atom();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 425;
				empty_atom();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 426;
				wildcard_atom();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Paren() { return GetToken(LoschScriptParser.Open_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Paren() { return GetToken(LoschScriptParser.Close_Paren, 0); }
		public Expression_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterExpression_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitExpression_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_atomContext expression_atom() {
		Expression_atomContext _localctx = new Expression_atomContext(Context, State);
		EnterRule(_localctx, 20, RULE_expression_atom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 429;
			Match(Open_Paren);
			State = 430;
			expression(0);
			State = 431;
			Match(Close_Paren);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Integer_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Integer_Literal() { return GetToken(LoschScriptParser.Integer_Literal, 0); }
		public Integer_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterInteger_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitInteger_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteger_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Integer_atomContext integer_atom() {
		Integer_atomContext _localctx = new Integer_atomContext(Context, State);
		EnterRule(_localctx, 22, RULE_integer_atom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 433;
			Match(Integer_Literal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Real_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Real_Literal() { return GetToken(LoschScriptParser.Real_Literal, 0); }
		public Real_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_real_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterReal_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitReal_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReal_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Real_atomContext real_atom() {
		Real_atomContext _localctx = new Real_atomContext(Context, State);
		EnterRule(_localctx, 24, RULE_real_atom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 435;
			Match(Real_Literal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Boolean_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode True() { return GetToken(LoschScriptParser.True, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode False() { return GetToken(LoschScriptParser.False, 0); }
		public Boolean_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterBoolean_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitBoolean_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Boolean_atomContext boolean_atom() {
		Boolean_atomContext _localctx = new Boolean_atomContext(Context, State);
		EnterRule(_localctx, 26, RULE_boolean_atom);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 437;
			_la = TokenStream.LA(1);
			if ( !(_la==True || _la==False) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String_Literal() { return GetToken(LoschScriptParser.String_Literal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Verbatim_String_Literal() { return GetToken(LoschScriptParser.Verbatim_String_Literal, 0); }
		public String_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterString_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitString_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_atomContext string_atom() {
		String_atomContext _localctx = new String_atomContext(Context, State);
		EnterRule(_localctx, 28, RULE_string_atom);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 439;
			_la = TokenStream.LA(1);
			if ( !(_la==String_Literal || _la==Verbatim_String_Literal) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Character_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Character_Literal() { return GetToken(LoschScriptParser.Character_Literal, 0); }
		public Character_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_character_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterCharacter_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitCharacter_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharacter_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Character_atomContext character_atom() {
		Character_atomContext _localctx = new Character_atomContext(Context, State);
		EnterRule(_localctx, 30, RULE_character_atom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 441;
			Match(Character_Literal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Empty_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Paren() { return GetToken(LoschScriptParser.Open_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Paren() { return GetToken(LoschScriptParser.Close_Paren, 0); }
		public Empty_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_empty_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterEmpty_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitEmpty_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmpty_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Empty_atomContext empty_atom() {
		Empty_atomContext _localctx = new Empty_atomContext(Context, State);
		EnterRule(_localctx, 32, RULE_empty_atom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 443;
			Match(Open_Paren);
			State = 444;
			Match(Close_Paren);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Wildcard_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Underscore() { return GetToken(LoschScriptParser.Underscore, 0); }
		public Wildcard_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wildcard_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterWildcard_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitWildcard_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWildcard_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Wildcard_atomContext wildcard_atom() {
		Wildcard_atomContext _localctx = new Wildcard_atomContext(Context, State);
		EnterRule(_localctx, 34, RULE_wildcard_atom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 446;
			Match(Underscore);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Identifier_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(LoschScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Full_identifierContext full_identifier() {
			return GetRuleContext<Full_identifierContext>(0);
		}
		public Identifier_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterIdentifier_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitIdentifier_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Identifier_atomContext identifier_atom() {
		Identifier_atomContext _localctx = new Identifier_atomContext(Context, State);
		EnterRule(_localctx, 36, RULE_identifier_atom);
		int _la;
		try {
			State = 462;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 451;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Less_Than) {
					{
					{
					State = 448;
					attribute();
					}
					}
					State = 453;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 454;
				Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 458;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Less_Than) {
					{
					{
					State = 455;
					attribute();
					}
					}
					State = 460;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 461;
				full_identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus_Equals() { return GetToken(LoschScriptParser.Plus_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus_Equals() { return GetToken(LoschScriptParser.Minus_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Asterisk_Equals() { return GetToken(LoschScriptParser.Asterisk_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Slash_Equals() { return GetToken(LoschScriptParser.Slash_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Percent_Equals() { return GetToken(LoschScriptParser.Percent_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot_Equals() { return GetToken(LoschScriptParser.Dot_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bar_Equals() { return GetToken(LoschScriptParser.Bar_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Bar_Equals() { return GetToken(LoschScriptParser.Double_Bar_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ampersand_Equals() { return GetToken(LoschScriptParser.Ampersand_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Ampersand_Equals() { return GetToken(LoschScriptParser.Double_Ampersand_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Less_Than_Equals() { return GetToken(LoschScriptParser.Double_Less_Than_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Greater_Than_Equals() { return GetToken(LoschScriptParser.Double_Greater_Than_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tilde_Equals() { return GetToken(LoschScriptParser.Tilde_Equals, 0); }
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterAssignment_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitAssignment_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_operatorContext assignment_operator() {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(Context, State);
		EnterRule(_localctx, 38, RULE_assignment_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 464;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 37)) & ~0x3f) == 0 && ((1L << (_la - 37)) & 185416425865217L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_atomContext identifier_atom() {
			return GetRuleContext<Identifier_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_identifierContext generic_identifier() {
			return GetRuleContext<Generic_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Union_variable_typeContext union_variable_type() {
			return GetRuleContext<Union_variable_typeContext>(0);
		}
		public Type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterType_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitType_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_nameContext type_name() {
		Type_nameContext _localctx = new Type_nameContext(Context, State);
		EnterRule(_localctx, 40, RULE_type_name);
		try {
			State = 469;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 466;
				identifier_atom();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 467;
				generic_identifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 468;
				union_variable_type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Union_variable_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Paren() { return GetToken(LoschScriptParser.Open_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext[] type_name() {
			return GetRuleContexts<Type_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name(int i) {
			return GetRuleContext<Type_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Paren() { return GetToken(LoschScriptParser.Close_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Bar() { return GetTokens(LoschScriptParser.Bar); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bar(int i) {
			return GetToken(LoschScriptParser.Bar, i);
		}
		public Union_variable_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_union_variable_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterUnion_variable_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitUnion_variable_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnion_variable_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Union_variable_typeContext union_variable_type() {
		Union_variable_typeContext _localctx = new Union_variable_typeContext(Context, State);
		EnterRule(_localctx, 42, RULE_union_variable_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 471;
			Match(Open_Paren);
			State = 472;
			type_name();
			State = 475;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 473;
				Match(Bar);
				State = 474;
				type_name();
				}
				}
				State = 477;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Bar );
			State = 479;
			Match(Close_Paren);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Question_Mark() { return GetToken(LoschScriptParser.Question_Mark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(LoschScriptParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		public If_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterIf_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitIf_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_branchContext if_branch() {
		If_branchContext _localctx = new If_branchContext(Context, State);
		EnterRule(_localctx, 44, RULE_if_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 481;
			Match(Question_Mark);
			State = 482;
			expression(0);
			State = 483;
			Match(Equals);
			State = 486;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				{
				State = 484;
				code_block();
				}
				break;
			case 2:
				{
				State = 485;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Postfix_if_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Question_Mark() { return GetToken(LoschScriptParser.Question_Mark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Postfix_if_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfix_if_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterPostfix_if_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitPostfix_if_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfix_if_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Postfix_if_branchContext postfix_if_branch() {
		Postfix_if_branchContext _localctx = new Postfix_if_branchContext(Context, State);
		EnterRule(_localctx, 46, RULE_postfix_if_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 488;
			Match(Question_Mark);
			State = 489;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Elif_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(LoschScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(LoschScriptParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		public Elif_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elif_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterElif_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitElif_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElif_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Elif_branchContext elif_branch() {
		Elif_branchContext _localctx = new Elif_branchContext(Context, State);
		EnterRule(_localctx, 48, RULE_elif_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 491;
			Match(Colon);
			State = 492;
			expression(0);
			State = 493;
			Match(Equals);
			State = 496;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				{
				State = 494;
				code_block();
				}
				break;
			case 2:
				{
				State = 495;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(LoschScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(LoschScriptParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Else_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterElse_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitElse_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_branchContext else_branch() {
		Else_branchContext _localctx = new Else_branchContext(Context, State);
		EnterRule(_localctx, 50, RULE_else_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 498;
			Match(Colon);
			State = 499;
			Match(Equals);
			State = 502;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				{
				State = 500;
				code_block();
				}
				break;
			case 2:
				{
				State = 501;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unless_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation_Question() { return GetToken(LoschScriptParser.Exclamation_Question, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(LoschScriptParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		public Unless_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unless_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterUnless_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitUnless_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnless_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unless_branchContext unless_branch() {
		Unless_branchContext _localctx = new Unless_branchContext(Context, State);
		EnterRule(_localctx, 52, RULE_unless_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 504;
			Match(Exclamation_Question);
			State = 505;
			expression(0);
			State = 506;
			Match(Equals);
			State = 509;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				{
				State = 507;
				code_block();
				}
				break;
			case 2:
				{
				State = 508;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_unless_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation_Colon() { return GetToken(LoschScriptParser.Exclamation_Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(LoschScriptParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		public Else_unless_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_unless_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterElse_unless_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitElse_unless_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_unless_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_unless_branchContext else_unless_branch() {
		Else_unless_branchContext _localctx = new Else_unless_branchContext(Context, State);
		EnterRule(_localctx, 54, RULE_else_unless_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 511;
			Match(Exclamation_Colon);
			State = 512;
			expression(0);
			State = 513;
			Match(Equals);
			State = 516;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				{
				State = 514;
				code_block();
				}
				break;
			case 2:
				{
				State = 515;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Postfix_unless_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation_Question() { return GetToken(LoschScriptParser.Exclamation_Question, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Postfix_unless_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfix_unless_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterPostfix_unless_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitPostfix_unless_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfix_unless_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Postfix_unless_branchContext postfix_unless_branch() {
		Postfix_unless_branchContext _localctx = new Postfix_unless_branchContext(Context, State);
		EnterRule(_localctx, 56, RULE_postfix_unless_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 518;
			Match(Exclamation_Question);
			State = 519;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Integer_Literal() { return GetTokens(LoschScriptParser.Integer_Literal); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Integer_Literal(int i) {
			return GetToken(LoschScriptParser.Integer_Literal, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Dot() { return GetToken(LoschScriptParser.Double_Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Caret() { return GetToken(LoschScriptParser.Caret, 0); }
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(Context, State);
		EnterRule(_localctx, 58, RULE_range);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 521;
			Match(Integer_Literal);
			State = 522;
			Match(Double_Dot);
			State = 524;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Caret) {
				{
				State = 523;
				Match(Caret);
				}
			}

			State = 526;
			Match(Integer_Literal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArglistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(LoschScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(LoschScriptParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Comma() { return GetToken(LoschScriptParser.Double_Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(LoschScriptParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(LoschScriptParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Colon() { return GetTokens(LoschScriptParser.Colon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon(int i) {
			return GetToken(LoschScriptParser.Colon, i);
		}
		public ArglistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arglist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterArglist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitArglist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArglist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArglistContext arglist() {
		ArglistContext _localctx = new ArglistContext(Context, State);
		EnterRule(_localctx, 60, RULE_arglist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 530;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				{
				State = 528;
				Match(Identifier);
				State = 529;
				Match(Colon);
				}
				break;
			}
			State = 532;
			expression(0);
			}
			State = 542;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 534;
					Match(Comma);
					{
					State = 537;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
					case 1:
						{
						State = 535;
						Match(Identifier);
						State = 536;
						Match(Colon);
						}
						break;
					}
					State = 539;
					expression(0);
					}
					}
					} 
				}
				State = 544;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
			}
			State = 546;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				{
				State = 545;
				Match(Double_Comma);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less_Than() { return GetToken(LoschScriptParser.Less_Than, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Full_identifierContext full_identifier() {
			return GetRuleContext<Full_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArglistContext arglist() {
			return GetRuleContext<ArglistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater_Than() { return GetToken(LoschScriptParser.Greater_Than, 0); }
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 62, RULE_attribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 548;
			Match(Less_Than);
			State = 549;
			full_identifier();
			State = 550;
			arglist();
			State = 551;
			Match(Greater_Than);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Type() { return GetToken(LoschScriptParser.Type, 0); }
		public Type_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterType_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitType_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_definitionContext type_definition() {
		Type_definitionContext _localctx = new Type_definitionContext(Context, State);
		EnterRule(_localctx, 64, RULE_type_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 553;
			Match(Type);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_identifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_atomContext[] identifier_atom() {
			return GetRuleContexts<Identifier_atomContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_atomContext identifier_atom(int i) {
			return GetRuleContext<Identifier_atomContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Bracket() { return GetToken(LoschScriptParser.Open_Bracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Bracket() { return GetToken(LoschScriptParser.Close_Bracket, 0); }
		public Generic_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterGeneric_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitGeneric_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneric_identifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Generic_identifierContext generic_identifier() {
		Generic_identifierContext _localctx = new Generic_identifierContext(Context, State);
		EnterRule(_localctx, 66, RULE_generic_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 555;
			identifier_atom();
			State = 556;
			Match(Open_Bracket);
			State = 557;
			identifier_atom();
			State = 558;
			Match(Close_Bracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_access_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Global() { return GetToken(LoschScriptParser.Global, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Partial() { return GetToken(LoschScriptParser.Partial, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Local() { return GetToken(LoschScriptParser.Local, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Internal() { return GetToken(LoschScriptParser.Internal, 0); }
		public Field_access_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_access_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterField_access_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitField_access_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField_access_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Field_access_modifierContext field_access_modifier() {
		Field_access_modifierContext _localctx = new Field_access_modifierContext(Context, State);
		EnterRule(_localctx, 68, RULE_field_access_modifier);
		int _la;
		try {
			State = 572;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Global:
				EnterOuterAlt(_localctx, 1);
				{
				State = 560;
				Match(Global);
				State = 562;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Partial) {
					{
					State = 561;
					Match(Partial);
					}
				}

				}
				break;
			case Local:
				EnterOuterAlt(_localctx, 2);
				{
				State = 564;
				Match(Local);
				State = 566;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Partial) {
					{
					State = 565;
					Match(Partial);
					}
				}

				}
				break;
			case Internal:
				EnterOuterAlt(_localctx, 3);
				{
				State = 568;
				Match(Internal);
				State = 570;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Partial) {
					{
					State = 569;
					Match(Partial);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Field_access_modifierContext field_access_modifier() {
			return GetRuleContext<Field_access_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(LoschScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(LoschScriptParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(LoschScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Var() { return GetToken(LoschScriptParser.Var, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Val() { return GetToken(LoschScriptParser.Val, 0); }
		public Field_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterField_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitField_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Field_declarationContext field_declaration() {
		Field_declarationContext _localctx = new Field_declarationContext(Context, State);
		EnterRule(_localctx, 70, RULE_field_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 574;
			field_access_modifier();
			State = 576;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Var || _la==Val) {
				{
				State = 575;
				_la = TokenStream.LA(1);
				if ( !(_la==Var || _la==Val) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 578;
			Match(Identifier);
			State = 581;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 579;
				Match(Colon);
				State = 580;
				type_name();
				}
			}

			State = 583;
			Match(Equals);
			State = 584;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 8: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 44);
		case 1: return Precpred(Context, 42);
		case 2: return Precpred(Context, 41);
		case 3: return Precpred(Context, 40);
		case 4: return Precpred(Context, 39);
		case 5: return Precpred(Context, 38);
		case 6: return Precpred(Context, 37);
		case 7: return Precpred(Context, 36);
		case 8: return Precpred(Context, 34);
		case 9: return Precpred(Context, 33);
		case 10: return Precpred(Context, 32);
		case 11: return Precpred(Context, 31);
		case 12: return Precpred(Context, 30);
		case 13: return Precpred(Context, 29);
		case 14: return Precpred(Context, 28);
		case 15: return Precpred(Context, 22);
		case 16: return Precpred(Context, 20);
		case 17: return Precpred(Context, 16);
		case 18: return Precpred(Context, 25);
		case 19: return Precpred(Context, 19);
		case 20: return Precpred(Context, 18);
		case 21: return Precpred(Context, 13);
		case 22: return Precpred(Context, 10);
		case 23: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,95,587,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		1,0,1,0,5,0,75,8,0,10,0,12,0,78,9,0,1,0,1,0,5,0,82,8,0,10,0,12,0,85,9,
		0,3,0,87,8,0,1,0,1,0,1,0,1,1,1,1,3,1,94,8,1,1,2,1,2,4,2,98,8,2,11,2,12,
		2,99,1,3,1,3,4,3,104,8,3,11,3,12,3,105,1,4,3,4,109,8,4,1,4,1,4,1,4,1,4,
		5,4,115,8,4,10,4,12,4,118,9,4,1,4,3,4,121,8,4,1,4,1,4,1,4,1,4,1,4,5,4,
		128,8,4,10,4,12,4,131,9,4,1,4,3,4,134,8,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
		1,4,5,4,144,8,4,10,4,12,4,147,9,4,3,4,149,8,4,1,5,1,5,1,5,1,6,1,6,1,6,
		5,6,157,8,6,10,6,12,6,160,9,6,1,7,4,7,163,8,7,11,7,12,7,164,1,7,1,7,1,
		7,5,7,170,8,7,10,7,12,7,173,9,7,1,7,1,7,5,7,177,8,7,10,7,12,7,180,9,7,
		1,7,5,7,183,8,7,10,7,12,7,186,9,7,1,7,1,7,1,7,5,7,191,8,7,10,7,12,7,194,
		9,7,1,7,1,7,5,7,198,8,7,10,7,12,7,201,9,7,3,7,203,8,7,1,8,1,8,1,8,3,8,
		208,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,
		8,225,8,8,1,8,1,8,1,8,3,8,230,8,8,1,8,1,8,1,8,1,8,4,8,236,8,8,11,8,12,
		8,237,1,8,1,8,1,8,1,8,5,8,244,8,8,10,8,12,8,247,9,8,1,8,3,8,250,8,8,1,
		8,1,8,1,8,1,8,1,8,5,8,257,8,8,10,8,12,8,260,9,8,1,8,3,8,263,8,8,1,8,1,
		8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,273,8,8,1,8,1,8,1,8,1,8,1,8,3,8,280,8,8,
		1,8,1,8,1,8,1,8,5,8,286,8,8,10,8,12,8,289,9,8,1,8,1,8,1,8,3,8,294,8,8,
		1,8,1,8,1,8,1,8,5,8,300,8,8,10,8,12,8,303,9,8,3,8,305,8,8,1,8,1,8,1,8,
		1,8,1,8,4,8,312,8,8,11,8,12,8,313,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
		1,8,1,8,1,8,1,8,1,8,1,8,5,8,331,8,8,10,8,12,8,334,9,8,3,8,336,8,8,1,8,
		1,8,3,8,340,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
		8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
		1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
		8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,404,8,8,1,8,
		1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,415,8,8,10,8,12,8,418,9,8,1,9,1,9,
		1,9,1,9,1,9,1,9,1,9,1,9,3,9,428,8,9,1,10,1,10,1,10,1,10,1,11,1,11,1,12,
		1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,18,5,18,
		450,8,18,10,18,12,18,453,9,18,1,18,1,18,5,18,457,8,18,10,18,12,18,460,
		9,18,1,18,3,18,463,8,18,1,19,1,19,1,20,1,20,1,20,3,20,470,8,20,1,21,1,
		21,1,21,1,21,4,21,476,8,21,11,21,12,21,477,1,21,1,21,1,22,1,22,1,22,1,
		22,1,22,3,22,487,8,22,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,3,24,497,
		8,24,1,25,1,25,1,25,1,25,3,25,503,8,25,1,26,1,26,1,26,1,26,1,26,3,26,510,
		8,26,1,27,1,27,1,27,1,27,1,27,3,27,517,8,27,1,28,1,28,1,28,1,29,1,29,1,
		29,3,29,525,8,29,1,29,1,29,1,30,1,30,3,30,531,8,30,1,30,1,30,1,30,1,30,
		1,30,3,30,538,8,30,1,30,5,30,541,8,30,10,30,12,30,544,9,30,1,30,3,30,547,
		8,30,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,34,
		1,34,3,34,563,8,34,1,34,1,34,3,34,567,8,34,1,34,1,34,3,34,571,8,34,3,34,
		573,8,34,1,35,1,35,3,35,577,8,35,1,35,1,35,1,35,3,35,582,8,35,1,35,1,35,
		1,35,1,35,0,1,16,36,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
		38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,0,6,1,0,21,22,1,0,63,
		64,1,0,59,62,1,0,23,24,1,0,94,95,11,0,37,37,53,54,57,58,66,66,68,68,70,
		70,74,74,76,76,80,80,82,82,84,84,671,0,76,1,0,0,0,2,93,1,0,0,0,4,97,1,
		0,0,0,6,103,1,0,0,0,8,148,1,0,0,0,10,150,1,0,0,0,12,153,1,0,0,0,14,202,
		1,0,0,0,16,339,1,0,0,0,18,427,1,0,0,0,20,429,1,0,0,0,22,433,1,0,0,0,24,
		435,1,0,0,0,26,437,1,0,0,0,28,439,1,0,0,0,30,441,1,0,0,0,32,443,1,0,0,
		0,34,446,1,0,0,0,36,462,1,0,0,0,38,464,1,0,0,0,40,469,1,0,0,0,42,471,1,
		0,0,0,44,481,1,0,0,0,46,488,1,0,0,0,48,491,1,0,0,0,50,498,1,0,0,0,52,504,
		1,0,0,0,54,511,1,0,0,0,56,518,1,0,0,0,58,521,1,0,0,0,60,530,1,0,0,0,62,
		548,1,0,0,0,64,553,1,0,0,0,66,555,1,0,0,0,68,572,1,0,0,0,70,574,1,0,0,
		0,72,75,3,8,4,0,73,75,5,4,0,0,74,72,1,0,0,0,74,73,1,0,0,0,75,78,1,0,0,
		0,76,74,1,0,0,0,76,77,1,0,0,0,77,86,1,0,0,0,78,76,1,0,0,0,79,83,3,10,5,
		0,80,82,5,4,0,0,81,80,1,0,0,0,82,85,1,0,0,0,83,81,1,0,0,0,83,84,1,0,0,
		0,84,87,1,0,0,0,85,83,1,0,0,0,86,79,1,0,0,0,86,87,1,0,0,0,87,88,1,0,0,
		0,88,89,3,2,1,0,89,90,5,0,0,1,90,1,1,0,0,0,91,94,3,4,2,0,92,94,3,6,3,0,
		93,91,1,0,0,0,93,92,1,0,0,0,94,3,1,0,0,0,95,98,3,16,8,0,96,98,5,4,0,0,
		97,95,1,0,0,0,97,96,1,0,0,0,98,99,1,0,0,0,99,97,1,0,0,0,99,100,1,0,0,0,
		100,5,1,0,0,0,101,104,3,64,32,0,102,104,5,4,0,0,103,101,1,0,0,0,103,102,
		1,0,0,0,104,105,1,0,0,0,105,103,1,0,0,0,105,106,1,0,0,0,106,7,1,0,0,0,
		107,109,5,43,0,0,108,107,1,0,0,0,108,109,1,0,0,0,109,110,1,0,0,0,110,111,
		5,7,0,0,111,116,3,12,6,0,112,113,5,32,0,0,113,115,3,12,6,0,114,112,1,0,
		0,0,115,118,1,0,0,0,116,114,1,0,0,0,116,117,1,0,0,0,117,149,1,0,0,0,118,
		116,1,0,0,0,119,121,5,43,0,0,120,119,1,0,0,0,120,121,1,0,0,0,121,122,1,
		0,0,0,122,123,5,7,0,0,123,124,5,10,0,0,124,129,3,12,6,0,125,126,5,32,0,
		0,126,128,3,12,6,0,127,125,1,0,0,0,128,131,1,0,0,0,129,127,1,0,0,0,129,
		130,1,0,0,0,130,149,1,0,0,0,131,129,1,0,0,0,132,134,5,43,0,0,133,132,1,
		0,0,0,133,134,1,0,0,0,134,135,1,0,0,0,135,136,5,7,0,0,136,137,5,88,0,0,
		137,138,5,77,0,0,138,145,3,12,6,0,139,140,5,32,0,0,140,141,5,88,0,0,141,
		142,5,77,0,0,142,144,3,12,6,0,143,139,1,0,0,0,144,147,1,0,0,0,145,143,
		1,0,0,0,145,146,1,0,0,0,146,149,1,0,0,0,147,145,1,0,0,0,148,108,1,0,0,
		0,148,120,1,0,0,0,148,133,1,0,0,0,149,9,1,0,0,0,150,151,5,8,0,0,151,152,
		3,12,6,0,152,11,1,0,0,0,153,158,5,88,0,0,154,155,5,34,0,0,155,157,5,88,
		0,0,156,154,1,0,0,0,157,160,1,0,0,0,158,156,1,0,0,0,158,159,1,0,0,0,159,
		13,1,0,0,0,160,158,1,0,0,0,161,163,5,4,0,0,162,161,1,0,0,0,163,164,1,0,
		0,0,164,162,1,0,0,0,164,165,1,0,0,0,165,166,1,0,0,0,166,171,5,1,0,0,167,
		170,5,4,0,0,168,170,3,16,8,0,169,167,1,0,0,0,169,168,1,0,0,0,170,173,1,
		0,0,0,171,169,1,0,0,0,171,172,1,0,0,0,172,174,1,0,0,0,173,171,1,0,0,0,
		174,178,5,2,0,0,175,177,5,4,0,0,176,175,1,0,0,0,177,180,1,0,0,0,178,176,
		1,0,0,0,178,179,1,0,0,0,179,203,1,0,0,0,180,178,1,0,0,0,181,183,5,4,0,
		0,182,181,1,0,0,0,183,186,1,0,0,0,184,182,1,0,0,0,184,185,1,0,0,0,185,
		187,1,0,0,0,186,184,1,0,0,0,187,192,5,30,0,0,188,191,5,4,0,0,189,191,3,
		16,8,0,190,188,1,0,0,0,190,189,1,0,0,0,191,194,1,0,0,0,192,190,1,0,0,0,
		192,193,1,0,0,0,193,195,1,0,0,0,194,192,1,0,0,0,195,199,5,31,0,0,196,198,
		5,4,0,0,197,196,1,0,0,0,198,201,1,0,0,0,199,197,1,0,0,0,199,200,1,0,0,
		0,200,203,1,0,0,0,201,199,1,0,0,0,202,162,1,0,0,0,202,184,1,0,0,0,203,
		15,1,0,0,0,204,205,6,8,-1,0,205,207,3,12,6,0,206,208,3,60,30,0,207,206,
		1,0,0,0,207,208,1,0,0,0,208,340,1,0,0,0,209,340,3,12,6,0,210,340,5,88,
		0,0,211,212,5,43,0,0,212,340,3,16,8,43,213,214,5,78,0,0,214,340,3,16,8,
		35,215,216,5,67,0,0,216,340,3,16,8,27,217,218,5,65,0,0,218,340,3,16,8,
		26,219,220,5,49,0,0,220,340,5,88,0,0,221,222,5,50,0,0,222,340,3,16,8,23,
		223,225,7,0,0,0,224,223,1,0,0,0,224,225,1,0,0,0,225,226,1,0,0,0,226,229,
		5,88,0,0,227,228,5,38,0,0,228,230,3,40,20,0,229,227,1,0,0,0,229,230,1,
		0,0,0,230,231,1,0,0,0,231,232,5,77,0,0,232,340,3,16,8,21,233,340,3,58,
		29,0,234,236,3,62,31,0,235,234,1,0,0,0,236,237,1,0,0,0,237,235,1,0,0,0,
		237,238,1,0,0,0,238,239,1,0,0,0,239,240,3,16,8,15,240,340,1,0,0,0,241,
		245,3,44,22,0,242,244,3,48,24,0,243,242,1,0,0,0,244,247,1,0,0,0,245,243,
		1,0,0,0,245,246,1,0,0,0,246,249,1,0,0,0,247,245,1,0,0,0,248,250,3,50,25,
		0,249,248,1,0,0,0,249,250,1,0,0,0,250,340,1,0,0,0,251,252,3,14,7,0,252,
		253,3,46,23,0,253,340,1,0,0,0,254,258,3,52,26,0,255,257,3,54,27,0,256,
		255,1,0,0,0,257,260,1,0,0,0,258,256,1,0,0,0,258,259,1,0,0,0,259,262,1,
		0,0,0,260,258,1,0,0,0,261,263,3,50,25,0,262,261,1,0,0,0,262,263,1,0,0,
		0,263,340,1,0,0,0,264,265,3,14,7,0,265,266,3,56,28,0,266,340,1,0,0,0,267,
		268,5,46,0,0,268,269,3,16,8,0,269,272,5,77,0,0,270,273,3,14,7,0,271,273,
		3,16,8,0,272,270,1,0,0,0,272,271,1,0,0,0,273,340,1,0,0,0,274,275,5,47,
		0,0,275,276,3,16,8,0,276,279,5,77,0,0,277,280,3,14,7,0,278,280,3,16,8,
		0,279,277,1,0,0,0,279,278,1,0,0,0,280,340,1,0,0,0,281,282,5,46,0,0,282,
		287,3,16,8,0,283,284,5,85,0,0,284,286,3,16,8,0,285,283,1,0,0,0,286,289,
		1,0,0,0,287,285,1,0,0,0,287,288,1,0,0,0,288,290,1,0,0,0,289,287,1,0,0,
		0,290,293,5,77,0,0,291,294,3,14,7,0,292,294,3,16,8,0,293,291,1,0,0,0,293,
		292,1,0,0,0,294,340,1,0,0,0,295,304,5,28,0,0,296,301,3,16,8,0,297,298,
		5,32,0,0,298,300,3,16,8,0,299,297,1,0,0,0,300,303,1,0,0,0,301,299,1,0,
		0,0,301,302,1,0,0,0,302,305,1,0,0,0,303,301,1,0,0,0,304,296,1,0,0,0,304,
		305,1,0,0,0,305,306,1,0,0,0,306,340,5,29,0,0,307,308,5,26,0,0,308,311,
		3,16,8,0,309,310,5,32,0,0,310,312,3,16,8,0,311,309,1,0,0,0,312,313,1,0,
		0,0,313,311,1,0,0,0,313,314,1,0,0,0,314,315,1,0,0,0,315,316,5,27,0,0,316,
		340,1,0,0,0,317,335,5,28,0,0,318,319,5,28,0,0,319,320,3,16,8,0,320,321,
		5,32,0,0,321,322,3,16,8,0,322,332,5,29,0,0,323,324,5,32,0,0,324,325,5,
		28,0,0,325,326,3,16,8,0,326,327,5,32,0,0,327,328,3,16,8,0,328,329,5,29,
		0,0,329,331,1,0,0,0,330,323,1,0,0,0,331,334,1,0,0,0,332,330,1,0,0,0,332,
		333,1,0,0,0,333,336,1,0,0,0,334,332,1,0,0,0,335,318,1,0,0,0,335,336,1,
		0,0,0,336,337,1,0,0,0,337,340,5,29,0,0,338,340,3,18,9,0,339,204,1,0,0,
		0,339,209,1,0,0,0,339,210,1,0,0,0,339,211,1,0,0,0,339,213,1,0,0,0,339,
		215,1,0,0,0,339,217,1,0,0,0,339,219,1,0,0,0,339,221,1,0,0,0,339,224,1,
		0,0,0,339,233,1,0,0,0,339,235,1,0,0,0,339,241,1,0,0,0,339,251,1,0,0,0,
		339,254,1,0,0,0,339,264,1,0,0,0,339,267,1,0,0,0,339,274,1,0,0,0,339,281,
		1,0,0,0,339,295,1,0,0,0,339,307,1,0,0,0,339,317,1,0,0,0,339,338,1,0,0,
		0,340,416,1,0,0,0,341,342,10,44,0,0,342,343,5,71,0,0,343,415,3,16,8,45,
		344,345,10,42,0,0,345,346,5,69,0,0,346,415,3,16,8,43,347,348,10,41,0,0,
		348,349,5,73,0,0,349,415,3,16,8,42,350,351,10,40,0,0,351,352,5,75,0,0,
		352,415,3,16,8,41,353,354,10,39,0,0,354,355,5,65,0,0,355,415,3,16,8,40,
		356,357,10,38,0,0,357,358,5,67,0,0,358,415,3,16,8,39,359,360,10,37,0,0,
		360,361,5,81,0,0,361,415,3,16,8,38,362,363,10,36,0,0,363,364,5,83,0,0,
		364,415,3,16,8,37,365,366,10,34,0,0,366,367,7,1,0,0,367,415,3,16,8,35,
		368,369,10,33,0,0,369,370,7,2,0,0,370,415,3,16,8,34,371,372,10,32,0,0,
		372,373,5,55,0,0,373,415,3,16,8,33,374,375,10,31,0,0,375,376,5,56,0,0,
		376,415,3,16,8,32,377,378,10,30,0,0,378,379,5,51,0,0,379,415,3,16,8,31,
		380,381,10,29,0,0,381,382,5,52,0,0,382,415,3,16,8,30,383,384,10,28,0,0,
		384,385,5,49,0,0,385,415,3,16,8,29,386,387,10,22,0,0,387,388,5,36,0,0,
		388,415,3,16,8,23,389,390,10,20,0,0,390,391,3,38,19,0,391,392,3,16,8,21,
		392,415,1,0,0,0,393,394,10,16,0,0,394,395,5,46,0,0,395,415,3,16,8,17,396,
		397,10,25,0,0,397,398,5,46,0,0,398,415,3,10,5,0,399,400,10,19,0,0,400,
		401,5,34,0,0,401,403,5,88,0,0,402,404,3,60,30,0,403,402,1,0,0,0,403,404,
		1,0,0,0,404,415,1,0,0,0,405,406,10,18,0,0,406,407,5,34,0,0,407,415,5,88,
		0,0,408,409,10,13,0,0,409,415,3,46,23,0,410,411,10,10,0,0,411,415,3,56,
		28,0,412,413,10,1,0,0,413,415,5,4,0,0,414,341,1,0,0,0,414,344,1,0,0,0,
		414,347,1,0,0,0,414,350,1,0,0,0,414,353,1,0,0,0,414,356,1,0,0,0,414,359,
		1,0,0,0,414,362,1,0,0,0,414,365,1,0,0,0,414,368,1,0,0,0,414,371,1,0,0,
		0,414,374,1,0,0,0,414,377,1,0,0,0,414,380,1,0,0,0,414,383,1,0,0,0,414,
		386,1,0,0,0,414,389,1,0,0,0,414,393,1,0,0,0,414,396,1,0,0,0,414,399,1,
		0,0,0,414,405,1,0,0,0,414,408,1,0,0,0,414,410,1,0,0,0,414,412,1,0,0,0,
		415,418,1,0,0,0,416,414,1,0,0,0,416,417,1,0,0,0,417,17,1,0,0,0,418,416,
		1,0,0,0,419,428,3,20,10,0,420,428,3,22,11,0,421,428,3,24,12,0,422,428,
		3,26,13,0,423,428,3,28,14,0,424,428,3,30,15,0,425,428,3,32,16,0,426,428,
		3,34,17,0,427,419,1,0,0,0,427,420,1,0,0,0,427,421,1,0,0,0,427,422,1,0,
		0,0,427,423,1,0,0,0,427,424,1,0,0,0,427,425,1,0,0,0,427,426,1,0,0,0,428,
		19,1,0,0,0,429,430,5,26,0,0,430,431,3,16,8,0,431,432,5,27,0,0,432,21,1,
		0,0,0,433,434,5,89,0,0,434,23,1,0,0,0,435,436,5,92,0,0,436,25,1,0,0,0,
		437,438,7,3,0,0,438,27,1,0,0,0,439,440,7,4,0,0,440,29,1,0,0,0,441,442,
		5,93,0,0,442,31,1,0,0,0,443,444,5,26,0,0,444,445,5,27,0,0,445,33,1,0,0,
		0,446,447,5,39,0,0,447,35,1,0,0,0,448,450,3,62,31,0,449,448,1,0,0,0,450,
		453,1,0,0,0,451,449,1,0,0,0,451,452,1,0,0,0,452,454,1,0,0,0,453,451,1,
		0,0,0,454,463,5,88,0,0,455,457,3,62,31,0,456,455,1,0,0,0,457,460,1,0,0,
		0,458,456,1,0,0,0,458,459,1,0,0,0,459,461,1,0,0,0,460,458,1,0,0,0,461,
		463,3,12,6,0,462,451,1,0,0,0,462,458,1,0,0,0,463,37,1,0,0,0,464,465,7,
		5,0,0,465,39,1,0,0,0,466,470,3,36,18,0,467,470,3,66,33,0,468,470,3,42,
		21,0,469,466,1,0,0,0,469,467,1,0,0,0,469,468,1,0,0,0,470,41,1,0,0,0,471,
		472,5,26,0,0,472,475,3,40,20,0,473,474,5,51,0,0,474,476,3,40,20,0,475,
		473,1,0,0,0,476,477,1,0,0,0,477,475,1,0,0,0,477,478,1,0,0,0,478,479,1,
		0,0,0,479,480,5,27,0,0,480,43,1,0,0,0,481,482,5,42,0,0,482,483,3,16,8,
		0,483,486,5,77,0,0,484,487,3,14,7,0,485,487,3,16,8,0,486,484,1,0,0,0,486,
		485,1,0,0,0,487,45,1,0,0,0,488,489,5,42,0,0,489,490,3,16,8,0,490,47,1,
		0,0,0,491,492,5,38,0,0,492,493,3,16,8,0,493,496,5,77,0,0,494,497,3,14,
		7,0,495,497,3,16,8,0,496,494,1,0,0,0,496,495,1,0,0,0,497,49,1,0,0,0,498,
		499,5,38,0,0,499,502,5,77,0,0,500,503,3,14,7,0,501,503,3,16,8,0,502,500,
		1,0,0,0,502,501,1,0,0,0,503,51,1,0,0,0,504,505,5,44,0,0,505,506,3,16,8,
		0,506,509,5,77,0,0,507,510,3,14,7,0,508,510,3,16,8,0,509,507,1,0,0,0,509,
		508,1,0,0,0,510,53,1,0,0,0,511,512,5,45,0,0,512,513,3,16,8,0,513,516,5,
		77,0,0,514,517,3,14,7,0,515,517,3,16,8,0,516,514,1,0,0,0,516,515,1,0,0,
		0,517,55,1,0,0,0,518,519,5,44,0,0,519,520,3,16,8,0,520,57,1,0,0,0,521,
		522,5,89,0,0,522,524,5,35,0,0,523,525,5,49,0,0,524,523,1,0,0,0,524,525,
		1,0,0,0,525,526,1,0,0,0,526,527,5,89,0,0,527,59,1,0,0,0,528,529,5,88,0,
		0,529,531,5,38,0,0,530,528,1,0,0,0,530,531,1,0,0,0,531,532,1,0,0,0,532,
		533,3,16,8,0,533,542,1,0,0,0,534,537,5,32,0,0,535,536,5,88,0,0,536,538,
		5,38,0,0,537,535,1,0,0,0,537,538,1,0,0,0,538,539,1,0,0,0,539,541,3,16,
		8,0,540,534,1,0,0,0,541,544,1,0,0,0,542,540,1,0,0,0,542,543,1,0,0,0,543,
		546,1,0,0,0,544,542,1,0,0,0,545,547,5,33,0,0,546,545,1,0,0,0,546,547,1,
		0,0,0,547,61,1,0,0,0,548,549,5,59,0,0,549,550,3,12,6,0,550,551,3,60,30,
		0,551,552,5,60,0,0,552,63,1,0,0,0,553,554,5,10,0,0,554,65,1,0,0,0,555,
		556,3,36,18,0,556,557,5,28,0,0,557,558,3,36,18,0,558,559,5,29,0,0,559,
		67,1,0,0,0,560,562,5,12,0,0,561,563,5,18,0,0,562,561,1,0,0,0,562,563,1,
		0,0,0,563,573,1,0,0,0,564,566,5,13,0,0,565,567,5,18,0,0,566,565,1,0,0,
		0,566,567,1,0,0,0,567,573,1,0,0,0,568,570,5,14,0,0,569,571,5,18,0,0,570,
		569,1,0,0,0,570,571,1,0,0,0,571,573,1,0,0,0,572,560,1,0,0,0,572,564,1,
		0,0,0,572,568,1,0,0,0,573,69,1,0,0,0,574,576,3,68,34,0,575,577,7,0,0,0,
		576,575,1,0,0,0,576,577,1,0,0,0,577,578,1,0,0,0,578,581,5,88,0,0,579,580,
		5,38,0,0,580,582,3,40,20,0,581,579,1,0,0,0,581,582,1,0,0,0,582,583,1,0,
		0,0,583,584,5,77,0,0,584,585,3,16,8,0,585,71,1,0,0,0,69,74,76,83,86,93,
		97,99,103,105,108,116,120,129,133,145,148,158,164,169,171,178,184,190,
		192,199,202,207,224,229,237,245,249,258,262,272,279,287,293,301,304,313,
		332,335,339,403,414,416,427,451,458,462,469,477,486,496,502,509,516,524,
		530,537,542,546,562,566,570,572,576,581
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace LoschScript.Parser
