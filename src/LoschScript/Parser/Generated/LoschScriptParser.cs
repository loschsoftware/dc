//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Jonas\Source\Repos\lsc\src\LoschScript\Parser\LoschScriptParser.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LoschScript.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class LoschScriptParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Ws=1, NewLine=2, Single_Line_Comment=3, Delimited_Comment=4, Import=5, 
		Export=6, Assembly=7, Type=8, Module=9, Template=10, Global=11, Local=12, 
		Internal=13, Static=14, Protected=15, Partial=16, Open=17, Closed=18, 
		Auto=19, Virtual=20, Extern=21, Int8=22, UInt8=23, Int16=24, UInt16=25, 
		Int32=26, UInt32=27, Int64=28, UInt64=29, Native=30, UNative=31, Float32=32, 
		Float64=33, Decimal=34, Bool=35, String=36, Char=37, Dynamic=38, Object=39, 
		Infix=40, Inline=41, Ref=42, Var=43, Val=44, Const=45, Base=46, Override=47, 
		Try=48, Raise=49, Catch=50, Finally=51, Fault=52, True=53, False=54, This=55, 
		Open_Paren=56, Close_Paren=57, Open_Paren_Bar=58, Bar_Close_Paren=59, 
		Open_Bracket=60, Close_Bracket=61, Open_Brace=62, Close_Brace=63, Comma=64, 
		Double_Comma=65, Dot=66, Double_Dot=67, Double_Dot_Question_Mark=68, Dot_Equals=69, 
		Colon=70, Double_Colon=71, Triple_Colon=72, Semicolon=73, Underscore=74, 
		Single_Quote=75, Double_Quote=76, Question_Mark=77, Double_Question_Mark=78, 
		Double_Question_Mark_Equals=79, Exclamation_Mark=80, Exclamation_Question=81, 
		Exclamation_Colon=82, At_Sign=83, Exclamation_At=84, Dollar_Sign=85, Caret=86, 
		Caret_Equals=87, Caret_Backslash=88, Percent_Caret=89, Dollar_Backslash=90, 
		Bar=91, Bar_GreaterThan=92, LessThan_Bar=93, Double_Bar=94, Bar_Equals=95, 
		Double_Bar_Equals=96, Ampersand=97, Ampersand_Greater=98, Less_Ampersand=99, 
		Double_Ampersand=100, Double_Ampersand_Equals=101, Ampersand_Equals=102, 
		Less_Than=103, Greater_Than=104, Less_Equals=105, Greater_Equals=106, 
		Double_Equals=107, Exclamation_Equals=108, Plus=109, Plus_Equals=110, 
		Minus=111, Minus_Equals=112, Asterisk=113, Asterisk_Equals=114, Double_Asterisk=115, 
		Double_Asterisk_Equals=116, Slash=117, Backslash=118, Slash_Equals=119, 
		Percent=120, Percent_Equals=121, Equals=122, Tilde=123, Double_Tilde=124, 
		Tilde_Equals=125, Double_Less_Than=126, Double_Less_Than_Equals=127, Double_Greater_Than=128, 
		Double_Greater_Than_Equals=129, Arrow_Right=130, Arrow_Left=131, Double_Backtick=132, 
		Identifier=133, Integer_Literal=134, Hex_Integer_Literal=135, Binary_Integer_Literal=136, 
		Real_Literal=137, Character_Literal=138, String_Literal=139, Verbatim_String_Literal=140;
	public const int
		RULE_compilation_unit = 0, RULE_file_body = 1, RULE_top_level_statements = 2, 
		RULE_full_program = 3, RULE_import_directive = 4, RULE_export_directive = 5, 
		RULE_full_identifier = 6, RULE_code_block = 7, RULE_expression = 8, RULE_atom = 9, 
		RULE_this_atom = 10, RULE_expression_atom = 11, RULE_integer_atom = 12, 
		RULE_real_atom = 13, RULE_boolean_atom = 14, RULE_string_atom = 15, RULE_character_atom = 16, 
		RULE_empty_atom = 17, RULE_wildcard_atom = 18, RULE_identifier_atom = 19, 
		RULE_type_name = 20, RULE_builtin_type_alias = 21, RULE_param_list_type = 22, 
		RULE_if_branch = 23, RULE_postfix_if_branch = 24, RULE_elif_branch = 25, 
		RULE_else_branch = 26, RULE_unless_branch = 27, RULE_else_unless_branch = 28, 
		RULE_postfix_unless_branch = 29, RULE_range = 30, RULE_index = 31, RULE_arglist = 32, 
		RULE_attribute = 33, RULE_generic_identifier = 34, RULE_field_access_modifier = 35, 
		RULE_field_declaration = 36, RULE_placeholder = 37, RULE_type_access_modifier = 38, 
		RULE_nested_type_access_modifier = 39, RULE_type_special_modifier = 40, 
		RULE_type = 41, RULE_type_parameter_list = 42, RULE_type_parameter = 43, 
		RULE_type_parameter_constraint = 44, RULE_inheritance_list = 45, RULE_type_kind = 46, 
		RULE_member_access_modifier = 47, RULE_member_oop_modifier = 48, RULE_member_special_modifier = 49, 
		RULE_type_member = 50, RULE_parameter_list = 51, RULE_parameter_modifier = 52, 
		RULE_parameter = 53, RULE_parameter_constraint = 54, RULE_type_block = 55, 
		RULE_try_branch = 56, RULE_catch_branch = 57, RULE_finally_branch = 58, 
		RULE_fault_branch = 59, RULE_type_arg_list = 60, RULE_assignment_operator = 61;
	public static readonly string[] ruleNames = {
		"compilation_unit", "file_body", "top_level_statements", "full_program", 
		"import_directive", "export_directive", "full_identifier", "code_block", 
		"expression", "atom", "this_atom", "expression_atom", "integer_atom", 
		"real_atom", "boolean_atom", "string_atom", "character_atom", "empty_atom", 
		"wildcard_atom", "identifier_atom", "type_name", "builtin_type_alias", 
		"param_list_type", "if_branch", "postfix_if_branch", "elif_branch", "else_branch", 
		"unless_branch", "else_unless_branch", "postfix_unless_branch", "range", 
		"index", "arglist", "attribute", "generic_identifier", "field_access_modifier", 
		"field_declaration", "placeholder", "type_access_modifier", "nested_type_access_modifier", 
		"type_special_modifier", "type", "type_parameter_list", "type_parameter", 
		"type_parameter_constraint", "inheritance_list", "type_kind", "member_access_modifier", 
		"member_oop_modifier", "member_special_modifier", "type_member", "parameter_list", 
		"parameter_modifier", "parameter", "parameter_constraint", "type_block", 
		"try_branch", "catch_branch", "finally_branch", "fault_branch", "type_arg_list", 
		"assignment_operator"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'import'", "'export'", "'assembly'", "'type'", 
		"'module'", "'template'", "'global'", "'local'", "'internal'", "'static'", 
		"'protected'", "'partial'", "'open'", "'closed'", "'auto'", "'virtual'", 
		null, "'int8'", "'uint8'", "'int16'", "'uint16'", "'int32'", "'uint32'", 
		"'int64'", "'uint64'", "'native'", "'unative'", "'float32'", "'float64'", 
		"'decimal'", "'bool'", "'string'", "'char'", "'dynamic'", "'object'", 
		"'infix'", "'inline'", "'ref'", "'var'", "'val'", "'const'", "'base'", 
		"'override'", "'try'", "'throw'", "'catch'", "'finally'", "'fault'", "'true'", 
		"'false'", "'this'", "'('", "')'", "'(|'", "'|)'", "'['", "']'", "'{'", 
		"'}'", "','", "',,'", "'.'", "'..'", "'..?'", "'.='", "':'", "'::'", "':::'", 
		"';'", "'_'", "'''", "'\"'", "'?'", "'??'", "'??='", "'!'", "'!?'", "'!:'", 
		"'@'", "'!@'", "'$'", "'^'", "'^='", "'^\\'", "'%^'", "'$\\'", "'|'", 
		"'|>'", "'<|'", "'||'", "'|='", "'||='", "'&'", "'&>'", "'<&'", "'&&'", 
		"'&&='", "'&='", "'<'", "'>'", "'<='", "'>='", "'=='", "'!='", "'+'", 
		"'+='", "'-'", "'-='", "'*'", "'*='", "'**'", "'**='", "'/'", "'\\'", 
		"'/='", "'%'", "'%='", "'='", "'~'", "'~~'", "'~='", "'<<'", "'<<='", 
		"'>>'", "'>>='", "'->'", "'<-'", "'``'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Ws", "NewLine", "Single_Line_Comment", "Delimited_Comment", "Import", 
		"Export", "Assembly", "Type", "Module", "Template", "Global", "Local", 
		"Internal", "Static", "Protected", "Partial", "Open", "Closed", "Auto", 
		"Virtual", "Extern", "Int8", "UInt8", "Int16", "UInt16", "Int32", "UInt32", 
		"Int64", "UInt64", "Native", "UNative", "Float32", "Float64", "Decimal", 
		"Bool", "String", "Char", "Dynamic", "Object", "Infix", "Inline", "Ref", 
		"Var", "Val", "Const", "Base", "Override", "Try", "Raise", "Catch", "Finally", 
		"Fault", "True", "False", "This", "Open_Paren", "Close_Paren", "Open_Paren_Bar", 
		"Bar_Close_Paren", "Open_Bracket", "Close_Bracket", "Open_Brace", "Close_Brace", 
		"Comma", "Double_Comma", "Dot", "Double_Dot", "Double_Dot_Question_Mark", 
		"Dot_Equals", "Colon", "Double_Colon", "Triple_Colon", "Semicolon", "Underscore", 
		"Single_Quote", "Double_Quote", "Question_Mark", "Double_Question_Mark", 
		"Double_Question_Mark_Equals", "Exclamation_Mark", "Exclamation_Question", 
		"Exclamation_Colon", "At_Sign", "Exclamation_At", "Dollar_Sign", "Caret", 
		"Caret_Equals", "Caret_Backslash", "Percent_Caret", "Dollar_Backslash", 
		"Bar", "Bar_GreaterThan", "LessThan_Bar", "Double_Bar", "Bar_Equals", 
		"Double_Bar_Equals", "Ampersand", "Ampersand_Greater", "Less_Ampersand", 
		"Double_Ampersand", "Double_Ampersand_Equals", "Ampersand_Equals", "Less_Than", 
		"Greater_Than", "Less_Equals", "Greater_Equals", "Double_Equals", "Exclamation_Equals", 
		"Plus", "Plus_Equals", "Minus", "Minus_Equals", "Asterisk", "Asterisk_Equals", 
		"Double_Asterisk", "Double_Asterisk_Equals", "Slash", "Backslash", "Slash_Equals", 
		"Percent", "Percent_Equals", "Equals", "Tilde", "Double_Tilde", "Tilde_Equals", 
		"Double_Less_Than", "Double_Less_Than_Equals", "Double_Greater_Than", 
		"Double_Greater_Than_Equals", "Arrow_Right", "Arrow_Left", "Double_Backtick", 
		"Identifier", "Integer_Literal", "Hex_Integer_Literal", "Binary_Integer_Literal", 
		"Real_Literal", "Character_Literal", "String_Literal", "Verbatim_String_Literal"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LoschScriptParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LoschScriptParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LoschScriptParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LoschScriptParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Compilation_unitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public File_bodyContext file_body() {
			return GetRuleContext<File_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(LoschScriptParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Import_directiveContext[] import_directive() {
			return GetRuleContexts<Import_directiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Import_directiveContext import_directive(int i) {
			return GetRuleContext<Import_directiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(LoschScriptParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(LoschScriptParser.NewLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Export_directiveContext export_directive() {
			return GetRuleContext<Export_directiveContext>(0);
		}
		public Compilation_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilation_unit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterCompilation_unit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitCompilation_unit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilation_unit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compilation_unitContext compilation_unit() {
		Compilation_unitContext _localctx = new Compilation_unitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilation_unit);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 126;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case Import:
					case Exclamation_Mark:
						{
						State = 124;
						import_directive();
						}
						break;
					case NewLine:
						{
						State = 125;
						Match(NewLine);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 130;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 138;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Export) {
				{
				State = 131;
				export_directive();
				State = 135;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 132;
						Match(NewLine);
						}
						} 
					}
					State = 137;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
				}
				}
			}

			State = 140;
			file_body();
			State = 141;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementsContext top_level_statements() {
			return GetRuleContext<Top_level_statementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Full_programContext full_program() {
			return GetRuleContext<Full_programContext>(0);
		}
		public File_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterFile_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitFile_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public File_bodyContext file_body() {
		File_bodyContext _localctx = new File_bodyContext(Context, State);
		EnterRule(_localctx, 2, RULE_file_body);
		try {
			State = 145;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 143;
				top_level_statements();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 144;
				full_program();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_level_statementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(LoschScriptParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(LoschScriptParser.NewLine, i);
		}
		public Top_level_statementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_level_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterTop_level_statements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitTop_level_statements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_level_statements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Top_level_statementsContext top_level_statements() {
		Top_level_statementsContext _localctx = new Top_level_statementsContext(Context, State);
		EnterRule(_localctx, 4, RULE_top_level_statements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 5900586325064548356L) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 74309463656064129L) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & 243L) != 0)) {
				{
				State = 149;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Var:
				case Val:
				case Try:
				case Raise:
				case True:
				case False:
				case This:
				case Open_Paren:
				case Open_Bracket:
				case Open_Brace:
				case Double_Dot:
				case Underscore:
				case Question_Mark:
				case Exclamation_Mark:
				case Exclamation_Question:
				case At_Sign:
				case Exclamation_At:
				case Caret:
				case Caret_Backslash:
				case Dollar_Backslash:
				case Ampersand:
				case Less_Than:
				case Backslash:
				case Tilde:
				case Identifier:
				case Integer_Literal:
				case Real_Literal:
				case Character_Literal:
				case String_Literal:
				case Verbatim_String_Literal:
					{
					State = 147;
					expression(0);
					}
					break;
				case NewLine:
					{
					State = 148;
					Match(NewLine);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 153;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Full_programContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(LoschScriptParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(LoschScriptParser.NewLine, i);
		}
		public Full_programContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_full_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterFull_program(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitFull_program(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFull_program(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Full_programContext full_program() {
		Full_programContext _localctx = new Full_programContext(Context, State);
		EnterRule(_localctx, 6, RULE_full_program);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			type();
			State = 158;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 155;
					Match(NewLine);
					}
					} 
				}
				State = 160;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			State = 165;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 21990232735492L) != 0)) {
				{
				State = 163;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Type:
				case Module:
				case Template:
				case Global:
				case Local:
				case Internal:
				case Protected:
				case Open:
				case Ref:
				case Val:
					{
					State = 161;
					type();
					}
					break;
				case NewLine:
					{
					State = 162;
					Match(NewLine);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 167;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_directiveContext : ParserRuleContext {
		public Import_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_directive; } }
	 
		public Import_directiveContext() { }
		public virtual void CopyFrom(Import_directiveContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Basic_importContext : Import_directiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Import() { return GetToken(LoschScriptParser.Import, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Full_identifierContext[] full_identifier() {
			return GetRuleContexts<Full_identifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Full_identifierContext full_identifier(int i) {
			return GetRuleContext<Full_identifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation_Mark() { return GetToken(LoschScriptParser.Exclamation_Mark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(LoschScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(LoschScriptParser.Comma, i);
		}
		public Basic_importContext(Import_directiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterBasic_import(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitBasic_import(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasic_import(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AliasContext : Import_directiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Import() { return GetToken(LoschScriptParser.Import, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(LoschScriptParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(LoschScriptParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Equals() { return GetTokens(LoschScriptParser.Equals); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals(int i) {
			return GetToken(LoschScriptParser.Equals, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Full_identifierContext[] full_identifier() {
			return GetRuleContexts<Full_identifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Full_identifierContext full_identifier(int i) {
			return GetRuleContext<Full_identifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation_Mark() { return GetToken(LoschScriptParser.Exclamation_Mark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(LoschScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(LoschScriptParser.Comma, i);
		}
		public AliasContext(Import_directiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlias(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Type_importContext : Import_directiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Import() { return GetToken(LoschScriptParser.Import, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Module() { return GetToken(LoschScriptParser.Module, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Full_identifierContext[] full_identifier() {
			return GetRuleContexts<Full_identifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Full_identifierContext full_identifier(int i) {
			return GetRuleContext<Full_identifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation_Mark() { return GetToken(LoschScriptParser.Exclamation_Mark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(LoschScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(LoschScriptParser.Comma, i);
		}
		public Type_importContext(Import_directiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterType_import(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitType_import(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_import(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Import_directiveContext import_directive() {
		Import_directiveContext _localctx = new Import_directiveContext(Context, State);
		EnterRule(_localctx, 8, RULE_import_directive);
		int _la;
		try {
			State = 209;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				_localctx = new Basic_importContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 169;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Exclamation_Mark) {
					{
					State = 168;
					Match(Exclamation_Mark);
					}
				}

				State = 171;
				Match(Import);
				State = 172;
				full_identifier();
				State = 177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 173;
					Match(Comma);
					State = 174;
					full_identifier();
					}
					}
					State = 179;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new Type_importContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 181;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Exclamation_Mark) {
					{
					State = 180;
					Match(Exclamation_Mark);
					}
				}

				State = 183;
				Match(Import);
				State = 184;
				Match(Module);
				State = 185;
				full_identifier();
				State = 190;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 186;
					Match(Comma);
					State = 187;
					full_identifier();
					}
					}
					State = 192;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 3:
				_localctx = new AliasContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 194;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Exclamation_Mark) {
					{
					State = 193;
					Match(Exclamation_Mark);
					}
				}

				State = 196;
				Match(Import);
				State = 197;
				Match(Identifier);
				State = 198;
				Match(Equals);
				State = 199;
				full_identifier();
				State = 206;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 200;
					Match(Comma);
					State = 201;
					Match(Identifier);
					State = 202;
					Match(Equals);
					State = 203;
					full_identifier();
					}
					}
					State = 208;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Export_directiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Export() { return GetToken(LoschScriptParser.Export, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Full_identifierContext full_identifier() {
			return GetRuleContext<Full_identifierContext>(0);
		}
		public Export_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_export_directive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterExport_directive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitExport_directive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExport_directive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Export_directiveContext export_directive() {
		Export_directiveContext _localctx = new Export_directiveContext(Context, State);
		EnterRule(_localctx, 10, RULE_export_directive);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			Match(Export);
			State = 212;
			full_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Full_identifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(LoschScriptParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(LoschScriptParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dot() { return GetTokens(LoschScriptParser.Dot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot(int i) {
			return GetToken(LoschScriptParser.Dot, i);
		}
		public Full_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_full_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterFull_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitFull_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFull_identifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Full_identifierContext full_identifier() {
		Full_identifierContext _localctx = new Full_identifierContext(Context, State);
		EnterRule(_localctx, 12, RULE_full_identifier);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			Match(Identifier);
			State = 219;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 215;
					Match(Dot);
					State = 216;
					Match(Identifier);
					}
					} 
				}
				State = 221;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Code_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Brace() { return GetToken(LoschScriptParser.Open_Brace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Brace() { return GetToken(LoschScriptParser.Close_Brace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PlaceholderContext placeholder() {
			return GetRuleContext<PlaceholderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(LoschScriptParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(LoschScriptParser.NewLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Code_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterCode_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitCode_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCode_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Code_blockContext code_block() {
		Code_blockContext _localctx = new Code_blockContext(Context, State);
		EnterRule(_localctx, 14, RULE_code_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			Match(Open_Brace);
			State = 231;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NewLine:
			case Var:
			case Val:
			case Try:
			case Raise:
			case True:
			case False:
			case This:
			case Open_Paren:
			case Open_Bracket:
			case Open_Brace:
			case Close_Brace:
			case Double_Dot:
			case Underscore:
			case Question_Mark:
			case Exclamation_Mark:
			case Exclamation_Question:
			case At_Sign:
			case Exclamation_At:
			case Caret:
			case Caret_Backslash:
			case Dollar_Backslash:
			case Ampersand:
			case Less_Than:
			case Backslash:
			case Tilde:
			case Identifier:
			case Integer_Literal:
			case Real_Literal:
			case Character_Literal:
			case String_Literal:
			case Verbatim_String_Literal:
				{
				State = 227;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 5900586325064548356L) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 74309463656064129L) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & 243L) != 0)) {
					{
					State = 225;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case NewLine:
						{
						State = 223;
						Match(NewLine);
						}
						break;
					case Var:
					case Val:
					case Try:
					case Raise:
					case True:
					case False:
					case This:
					case Open_Paren:
					case Open_Bracket:
					case Open_Brace:
					case Double_Dot:
					case Underscore:
					case Question_Mark:
					case Exclamation_Mark:
					case Exclamation_Question:
					case At_Sign:
					case Exclamation_At:
					case Caret:
					case Caret_Backslash:
					case Dollar_Backslash:
					case Ampersand:
					case Less_Than:
					case Backslash:
					case Tilde:
					case Identifier:
					case Integer_Literal:
					case Real_Literal:
					case Character_Literal:
					case String_Literal:
					case Verbatim_String_Literal:
						{
						State = 224;
						expression(0);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 229;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case Dot:
				{
				State = 230;
				placeholder();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 233;
			Match(Close_Brace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Subtraction_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(LoschScriptParser.Minus, 0); }
		public Subtraction_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterSubtraction_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitSubtraction_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtraction_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Bitwise_complement_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tilde() { return GetToken(LoschScriptParser.Tilde, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Bitwise_complement_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterBitwise_complement_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitBitwise_complement_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwise_complement_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Right_pipe_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Arrow_Right() { return GetToken(LoschScriptParser.Arrow_Right, 0); }
		public Right_pipe_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterRight_pipe_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitRight_pipe_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRight_pipe_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Array_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Bracket() { return GetToken(LoschScriptParser.Open_Bracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Bracket() { return GetToken(LoschScriptParser.Close_Bracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(LoschScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(LoschScriptParser.Comma, i);
		}
		public Array_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterArray_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitArray_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Multiply_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Asterisk() { return GetToken(LoschScriptParser.Asterisk, 0); }
		public Multiply_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterMultiply_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitMultiply_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiply_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Loop_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(LoschScriptParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(LoschScriptParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Arrow_Right() { return GetTokens(LoschScriptParser.Arrow_Right); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Arrow_Right(int i) {
			return GetToken(LoschScriptParser.Arrow_Right, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Loop_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterLoop_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitLoop_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoop_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Logical_or_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Bar() { return GetToken(LoschScriptParser.Double_Bar, 0); }
		public Logical_or_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterLogical_or_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitLogical_or_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_or_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Raise_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Raise() { return GetToken(LoschScriptParser.Raise, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Raise_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterRaise_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitRaise_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaise_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Block_postfix_unless_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Postfix_unless_branchContext postfix_unless_branch() {
			return GetRuleContext<Postfix_unless_branchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine() { return GetToken(LoschScriptParser.NewLine, 0); }
		public Block_postfix_unless_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterBlock_postfix_unless_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitBlock_postfix_unless_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock_postfix_unless_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class And_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ampersand() { return GetToken(LoschScriptParser.Ampersand, 0); }
		public And_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterAnd_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitAnd_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Newlined_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine() { return GetToken(LoschScriptParser.NewLine, 0); }
		public Newlined_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterNewlined_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitNewlined_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewlined_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Block_postfix_if_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Postfix_if_branchContext postfix_if_branch() {
			return GetRuleContext<Postfix_if_branchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine() { return GetToken(LoschScriptParser.NewLine, 0); }
		public Block_postfix_if_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterBlock_postfix_if_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitBlock_postfix_if_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock_postfix_if_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Postfix_unless_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Postfix_unless_branchContext postfix_unless_branch() {
			return GetRuleContext<Postfix_unless_branchContext>(0);
		}
		public Postfix_unless_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterPostfix_unless_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitPostfix_unless_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfix_unless_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Power_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Asterisk() { return GetToken(LoschScriptParser.Double_Asterisk, 0); }
		public Power_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterPower_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitPower_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPower_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Addition_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(LoschScriptParser.Plus, 0); }
		public Addition_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterAddition_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitAddition_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddition_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Atom_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public Atom_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterAtom_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitAtom_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Index_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Bracket() { return GetToken(LoschScriptParser.Open_Bracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Bracket() { return GetToken(LoschScriptParser.Close_Bracket, 0); }
		public Index_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterIndex_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitIndex_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Comparison_expressionContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less_Than() { return GetToken(LoschScriptParser.Less_Than, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less_Equals() { return GetToken(LoschScriptParser.Less_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater_Than() { return GetToken(LoschScriptParser.Greater_Than, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater_Equals() { return GetToken(LoschScriptParser.Greater_Equals, 0); }
		public Comparison_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterComparison_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitComparison_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Or_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bar() { return GetToken(LoschScriptParser.Bar, 0); }
		public Or_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterOr_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitOr_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Try_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Try_branchContext try_branch() {
			return GetRuleContext<Try_branchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Catch_branchContext[] catch_branch() {
			return GetRuleContexts<Catch_branchContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Catch_branchContext catch_branch(int i) {
			return GetRuleContext<Catch_branchContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fault_branchContext fault_branch() {
			return GetRuleContext<Fault_branchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Finally_branchContext finally_branch() {
			return GetRuleContext<Finally_branchContext>(0);
		}
		public Try_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterTry_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitTry_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTry_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Left_shift_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Less_Than() { return GetToken(LoschScriptParser.Double_Less_Than, 0); }
		public Left_shift_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterLeft_shift_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitLeft_shift_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeft_shift_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Attributed_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public Attributed_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterAttributed_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitAttributed_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributed_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Equality_expressionContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Equals() { return GetToken(LoschScriptParser.Double_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation_Equals() { return GetToken(LoschScriptParser.Exclamation_Equals, 0); }
		public Equality_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterEquality_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitEquality_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Until_loopContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation_At() { return GetToken(LoschScriptParser.Exclamation_At, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(LoschScriptParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		public Until_loopContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterUntil_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitUntil_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUntil_loop(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class While_loopContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode At_Sign() { return GetToken(LoschScriptParser.At_Sign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(LoschScriptParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		public While_loopContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterWhile_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitWhile_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_loop(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Xor_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Caret() { return GetToken(LoschScriptParser.Caret, 0); }
		public Xor_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterXor_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitXor_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXor_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Prefix_if_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public If_branchContext if_branch() {
			return GetRuleContext<If_branchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(LoschScriptParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(LoschScriptParser.NewLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Elif_branchContext[] elif_branch() {
			return GetRuleContexts<Elif_branchContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Elif_branchContext elif_branch(int i) {
			return GetRuleContext<Elif_branchContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_branchContext else_branch() {
			return GetRuleContext<Else_branchContext>(0);
		}
		public Prefix_if_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterPrefix_if_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitPrefix_if_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefix_if_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Logical_negation_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation_Mark() { return GetToken(LoschScriptParser.Exclamation_Mark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Logical_negation_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterLogical_negation_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitLogical_negation_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_negation_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Right_shift_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Greater_Than() { return GetToken(LoschScriptParser.Double_Greater_Than, 0); }
		public Right_shift_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterRight_shift_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitRight_shift_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRight_shift_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Anonymous_function_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Backslash() { return GetToken(LoschScriptParser.Backslash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_listContext parameter_list() {
			return GetRuleContext<Parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(LoschScriptParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(LoschScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Anonymous_function_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterAnonymous_function_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitAnonymous_function_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymous_function_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Rethrow_exceptionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Raise() { return GetToken(LoschScriptParser.Raise, 0); }
		public Rethrow_exceptionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterRethrow_exception(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitRethrow_exception(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRethrow_exception(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Separated_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(LoschScriptParser.Semicolon, 0); }
		public Separated_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterSeparated_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitSeparated_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeparated_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Range_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public Range_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterRange_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitRange_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Member_access_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dot() { return GetTokens(LoschScriptParser.Dot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot(int i) {
			return GetToken(LoschScriptParser.Dot, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(LoschScriptParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(LoschScriptParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_arg_listContext type_arg_list() {
			return GetRuleContext<Type_arg_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArglistContext arglist() {
			return GetRuleContext<ArglistContext>(0);
		}
		public Member_access_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterMember_access_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitMember_access_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_access_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Remainder_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Percent() { return GetToken(LoschScriptParser.Percent, 0); }
		public Remainder_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterRemainder_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitRemainder_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemainder_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Typeof_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Caret_Backslash() { return GetToken(LoschScriptParser.Caret_Backslash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(LoschScriptParser.Identifier, 0); }
		public Typeof_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeof_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeof_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeof_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Block_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		public Block_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterBlock_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitBlock_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Left_pipe_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Arrow_Left() { return GetToken(LoschScriptParser.Arrow_Left, 0); }
		public Left_pipe_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterLeft_pipe_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitLeft_pipe_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeft_pipe_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Dictionary_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Open_Bracket() { return GetTokens(LoschScriptParser.Open_Bracket); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Bracket(int i) {
			return GetToken(LoschScriptParser.Open_Bracket, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Close_Bracket() { return GetTokens(LoschScriptParser.Close_Bracket); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Bracket(int i) {
			return GetToken(LoschScriptParser.Close_Bracket, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(LoschScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(LoschScriptParser.Comma, i);
		}
		public Dictionary_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterDictionary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitDictionary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictionary_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public AssignmentContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Prefix_unless_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unless_branchContext unless_branch() {
			return GetRuleContext<Unless_branchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(LoschScriptParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(LoschScriptParser.NewLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_unless_branchContext[] else_unless_branch() {
			return GetRuleContexts<Else_unless_branchContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_unless_branchContext else_unless_branch(int i) {
			return GetRuleContext<Else_unless_branchContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_branchContext else_branch() {
			return GetRuleContext<Else_branchContext>(0);
		}
		public Prefix_unless_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterPrefix_unless_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitPrefix_unless_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefix_unless_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Local_declaration_or_assignmentContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(LoschScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(LoschScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Var() { return GetToken(LoschScriptParser.Var, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Val() { return GetToken(LoschScriptParser.Val, 0); }
		public Local_declaration_or_assignmentContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterLocal_declaration_or_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitLocal_declaration_or_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_declaration_or_assignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Tuple_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Paren() { return GetToken(LoschScriptParser.Open_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Paren() { return GetToken(LoschScriptParser.Close_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(LoschScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(LoschScriptParser.Comma, i);
		}
		public Tuple_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterTuple_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitTuple_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTuple_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Nameof_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dollar_Backslash() { return GetToken(LoschScriptParser.Dollar_Backslash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Nameof_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterNameof_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitNameof_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameof_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Postfix_if_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Postfix_if_branchContext postfix_if_branch() {
			return GetRuleContext<Postfix_if_branchContext>(0);
		}
		public Postfix_if_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterPostfix_if_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitPostfix_if_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfix_if_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Divide_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Slash() { return GetToken(LoschScriptParser.Slash, 0); }
		public Divide_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterDivide_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitDivide_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivide_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Byref_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ampersand() { return GetToken(LoschScriptParser.Ampersand, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Byref_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterByref_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitByref_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitByref_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Array_element_assignmentContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode At_Sign() { return GetToken(LoschScriptParser.At_Sign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(LoschScriptParser.Equals, 0); }
		public Array_element_assignmentContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterArray_element_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitArray_element_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_element_assignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Logical_and_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Ampersand() { return GetToken(LoschScriptParser.Double_Ampersand, 0); }
		public Logical_and_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterLogical_and_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitLogical_and_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_and_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Full_identifier_member_access_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Full_identifierContext full_identifier() {
			return GetRuleContext<Full_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_arg_listContext type_arg_list() {
			return GetRuleContext<Type_arg_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArglistContext arglist() {
			return GetRuleContext<ArglistContext>(0);
		}
		public Full_identifier_member_access_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterFull_identifier_member_access_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitFull_identifier_member_access_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFull_identifier_member_access_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Implementation_query_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Dot_Question_Mark() { return GetToken(LoschScriptParser.Double_Dot_Question_Mark, 0); }
		public Implementation_query_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterImplementation_query_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitImplementation_query_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplementation_query_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 425;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				{
				_localctx = new Bitwise_complement_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 236;
				Match(Tilde);
				State = 237;
				expression(51);
				}
				break;
			case 2:
				{
				_localctx = new Logical_negation_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 238;
				Match(Exclamation_Mark);
				State = 239;
				expression(48);
				}
				break;
			case 3:
				{
				_localctx = new Byref_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 240;
				Match(Ampersand);
				State = 241;
				expression(33);
				}
				break;
			case 4:
				{
				_localctx = new Typeof_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 242;
				Match(Caret_Backslash);
				State = 243;
				Match(Identifier);
				}
				break;
			case 5:
				{
				_localctx = new Nameof_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 244;
				Match(Dollar_Backslash);
				State = 245;
				expression(31);
				}
				break;
			case 6:
				{
				_localctx = new Local_declaration_or_assignmentContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 247;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Var || _la==Val) {
					{
					State = 246;
					_la = TokenStream.LA(1);
					if ( !(_la==Var || _la==Val) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 249;
				Match(Identifier);
				State = 252;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 250;
					Match(Colon);
					State = 251;
					type_name();
					}
				}

				State = 254;
				assignment_operator();
				State = 255;
				expression(29);
				}
				break;
			case 7:
				{
				_localctx = new Range_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 257;
				range();
				}
				break;
			case 8:
				{
				_localctx = new Attributed_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 259;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 258;
						attribute();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 261;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 263;
				expression(24);
				}
				break;
			case 9:
				{
				_localctx = new Prefix_if_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 265;
				if_branch();
				State = 269;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 266;
						Match(NewLine);
						}
						} 
					}
					State = 271;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
				}
				State = 275;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 272;
						elif_branch();
						}
						} 
					}
					State = 277;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
				}
				State = 281;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 278;
						Match(NewLine);
						}
						} 
					}
					State = 283;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
				}
				State = 285;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
				case 1:
					{
					State = 284;
					else_branch();
					}
					break;
				}
				}
				break;
			case 10:
				{
				_localctx = new Block_postfix_if_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 287;
				code_block();
				State = 289;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NewLine) {
					{
					State = 288;
					Match(NewLine);
					}
				}

				State = 291;
				postfix_if_branch();
				}
				break;
			case 11:
				{
				_localctx = new Prefix_unless_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 293;
				unless_branch();
				State = 297;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 294;
						Match(NewLine);
						}
						} 
					}
					State = 299;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
				}
				State = 303;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 300;
						else_unless_branch();
						}
						} 
					}
					State = 305;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
				}
				State = 309;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 306;
						Match(NewLine);
						}
						} 
					}
					State = 311;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
				}
				State = 313;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
				case 1:
					{
					State = 312;
					else_branch();
					}
					break;
				}
				}
				break;
			case 12:
				{
				_localctx = new Block_postfix_unless_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 315;
				code_block();
				State = 317;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NewLine) {
					{
					State = 316;
					Match(NewLine);
					}
				}

				State = 319;
				postfix_unless_branch();
				}
				break;
			case 13:
				{
				_localctx = new Loop_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 321;
				Match(Identifier);
				State = 322;
				Match(Arrow_Right);
				State = 331;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
				case 1:
					{
					State = 327;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 323;
							Match(Identifier);
							State = 324;
							Match(Arrow_Right);
							}
							} 
						}
						State = 329;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
					}
					State = 330;
					Match(Identifier);
					}
					break;
				}
				State = 333;
				expression(17);
				}
				break;
			case 14:
				{
				_localctx = new While_loopContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 334;
				Match(At_Sign);
				State = 335;
				expression(0);
				State = 336;
				Match(Equals);
				State = 339;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
				case 1:
					{
					State = 337;
					code_block();
					}
					break;
				case 2:
					{
					State = 338;
					expression(0);
					}
					break;
				}
				}
				break;
			case 15:
				{
				_localctx = new Until_loopContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 341;
				Match(Exclamation_At);
				State = 342;
				expression(0);
				State = 343;
				Match(Equals);
				State = 346;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
				case 1:
					{
					State = 344;
					code_block();
					}
					break;
				case 2:
					{
					State = 345;
					expression(0);
					}
					break;
				}
				}
				break;
			case 16:
				{
				_localctx = new Try_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 348;
				try_branch();
				State = 352;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 349;
						catch_branch();
						}
						} 
					}
					State = 354;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
				}
				State = 356;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
				case 1:
					{
					State = 355;
					fault_branch();
					}
					break;
				}
				State = 359;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
				case 1:
					{
					State = 358;
					finally_branch();
					}
					break;
				}
				}
				break;
			case 17:
				{
				_localctx = new Raise_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 361;
				Match(Raise);
				State = 362;
				expression(13);
				}
				break;
			case 18:
				{
				_localctx = new Rethrow_exceptionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 363;
				Match(Raise);
				}
				break;
			case 19:
				{
				_localctx = new Array_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 364;
				Match(Open_Bracket);
				State = 373;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 43)) & ~0x3f) == 0 && ((1L << (_la - 43)) & 1171124351266339939L) != 0) || ((((_la - 118)) & ~0x3f) == 0 && ((1L << (_la - 118)) & 7962657L) != 0)) {
					{
					State = 365;
					expression(0);
					State = 370;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==Comma) {
						{
						{
						State = 366;
						Match(Comma);
						State = 367;
						expression(0);
						}
						}
						State = 372;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 375;
				Match(Close_Bracket);
				}
				break;
			case 20:
				{
				_localctx = new Tuple_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 376;
				Match(Open_Paren);
				State = 377;
				expression(0);
				State = 380;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 378;
					Match(Comma);
					State = 379;
					expression(0);
					}
					}
					State = 382;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Comma );
				State = 384;
				Match(Close_Paren);
				}
				break;
			case 21:
				{
				_localctx = new Dictionary_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 386;
				Match(Open_Bracket);
				State = 404;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Open_Bracket) {
					{
					State = 387;
					Match(Open_Bracket);
					State = 388;
					expression(0);
					State = 389;
					Match(Comma);
					State = 390;
					expression(0);
					State = 391;
					Match(Close_Bracket);
					State = 401;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==Comma) {
						{
						{
						State = 392;
						Match(Comma);
						State = 393;
						Match(Open_Bracket);
						State = 394;
						expression(0);
						State = 395;
						Match(Comma);
						State = 396;
						expression(0);
						State = 397;
						Match(Close_Bracket);
						}
						}
						State = 403;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 406;
				Match(Close_Bracket);
				}
				break;
			case 22:
				{
				_localctx = new Atom_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 407;
				atom();
				}
				break;
			case 23:
				{
				_localctx = new Block_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 408;
				code_block();
				}
				break;
			case 24:
				{
				_localctx = new Full_identifier_member_access_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 409;
				full_identifier();
				State = 411;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
				case 1:
					{
					State = 410;
					type_arg_list();
					}
					break;
				}
				State = 414;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
				case 1:
					{
					State = 413;
					arglist();
					}
					break;
				}
				}
				break;
			case 25:
				{
				_localctx = new Anonymous_function_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 416;
				Match(Backslash);
				State = 417;
				parameter_list();
				State = 420;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 418;
					Match(Colon);
					State = 419;
					type_name();
					}
				}

				State = 422;
				Match(Equals);
				State = 423;
				expression(1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 519;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 517;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
					case 1:
						{
						_localctx = new Array_element_assignmentContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 427;
						if (!(Precpred(Context, 50))) throw new FailedPredicateException(this, "Precpred(Context, 50)");
						State = 428;
						Match(At_Sign);
						State = 429;
						expression(0);
						State = 430;
						Match(Equals);
						State = 431;
						expression(51);
						}
						break;
					case 2:
						{
						_localctx = new Power_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 433;
						if (!(Precpred(Context, 49))) throw new FailedPredicateException(this, "Precpred(Context, 49)");
						State = 434;
						Match(Double_Asterisk);
						State = 435;
						expression(50);
						}
						break;
					case 3:
						{
						_localctx = new Multiply_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 436;
						if (!(Precpred(Context, 47))) throw new FailedPredicateException(this, "Precpred(Context, 47)");
						State = 437;
						Match(Asterisk);
						State = 438;
						expression(48);
						}
						break;
					case 4:
						{
						_localctx = new Divide_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 439;
						if (!(Precpred(Context, 46))) throw new FailedPredicateException(this, "Precpred(Context, 46)");
						State = 440;
						Match(Slash);
						State = 441;
						expression(47);
						}
						break;
					case 5:
						{
						_localctx = new Remainder_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 442;
						if (!(Precpred(Context, 45))) throw new FailedPredicateException(this, "Precpred(Context, 45)");
						State = 443;
						Match(Percent);
						State = 444;
						expression(46);
						}
						break;
					case 6:
						{
						_localctx = new Addition_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 445;
						if (!(Precpred(Context, 44))) throw new FailedPredicateException(this, "Precpred(Context, 44)");
						State = 446;
						Match(Plus);
						State = 447;
						expression(45);
						}
						break;
					case 7:
						{
						_localctx = new Subtraction_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 448;
						if (!(Precpred(Context, 43))) throw new FailedPredicateException(this, "Precpred(Context, 43)");
						State = 449;
						Match(Minus);
						State = 450;
						expression(44);
						}
						break;
					case 8:
						{
						_localctx = new Left_shift_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 451;
						if (!(Precpred(Context, 42))) throw new FailedPredicateException(this, "Precpred(Context, 42)");
						State = 452;
						Match(Double_Less_Than);
						State = 453;
						expression(43);
						}
						break;
					case 9:
						{
						_localctx = new Right_shift_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 454;
						if (!(Precpred(Context, 41))) throw new FailedPredicateException(this, "Precpred(Context, 41)");
						State = 455;
						Match(Double_Greater_Than);
						State = 456;
						expression(42);
						}
						break;
					case 10:
						{
						_localctx = new Equality_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 457;
						if (!(Precpred(Context, 40))) throw new FailedPredicateException(this, "Precpred(Context, 40)");
						State = 458;
						((Equality_expressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==Double_Equals || _la==Exclamation_Equals) ) {
							((Equality_expressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 459;
						expression(41);
						}
						break;
					case 11:
						{
						_localctx = new Comparison_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 460;
						if (!(Precpred(Context, 39))) throw new FailedPredicateException(this, "Precpred(Context, 39)");
						State = 461;
						((Comparison_expressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 103)) & ~0x3f) == 0 && ((1L << (_la - 103)) & 15L) != 0)) ) {
							((Comparison_expressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 462;
						expression(40);
						}
						break;
					case 12:
						{
						_localctx = new And_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 463;
						if (!(Precpred(Context, 38))) throw new FailedPredicateException(this, "Precpred(Context, 38)");
						State = 464;
						Match(Ampersand);
						State = 465;
						expression(39);
						}
						break;
					case 13:
						{
						_localctx = new Logical_and_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 466;
						if (!(Precpred(Context, 37))) throw new FailedPredicateException(this, "Precpred(Context, 37)");
						State = 467;
						Match(Double_Ampersand);
						State = 468;
						expression(38);
						}
						break;
					case 14:
						{
						_localctx = new Or_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 469;
						if (!(Precpred(Context, 36))) throw new FailedPredicateException(this, "Precpred(Context, 36)");
						State = 470;
						Match(Bar);
						State = 471;
						expression(37);
						}
						break;
					case 15:
						{
						_localctx = new Logical_or_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 472;
						if (!(Precpred(Context, 35))) throw new FailedPredicateException(this, "Precpred(Context, 35)");
						State = 473;
						Match(Double_Bar);
						State = 474;
						expression(36);
						}
						break;
					case 16:
						{
						_localctx = new Xor_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 475;
						if (!(Precpred(Context, 34))) throw new FailedPredicateException(this, "Precpred(Context, 34)");
						State = 476;
						Match(Caret);
						State = 477;
						expression(35);
						}
						break;
					case 17:
						{
						_localctx = new Implementation_query_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 478;
						if (!(Precpred(Context, 30))) throw new FailedPredicateException(this, "Precpred(Context, 30)");
						State = 479;
						Match(Double_Dot_Question_Mark);
						State = 480;
						expression(31);
						}
						break;
					case 18:
						{
						_localctx = new Right_pipe_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 481;
						if (!(Precpred(Context, 28))) throw new FailedPredicateException(this, "Precpred(Context, 28)");
						State = 482;
						Match(Arrow_Right);
						State = 483;
						expression(29);
						}
						break;
					case 19:
						{
						_localctx = new Left_pipe_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 484;
						if (!(Precpred(Context, 27))) throw new FailedPredicateException(this, "Precpred(Context, 27)");
						State = 485;
						Match(Arrow_Left);
						State = 486;
						expression(28);
						}
						break;
					case 20:
						{
						_localctx = new AssignmentContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 487;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 488;
						assignment_operator();
						State = 489;
						expression(3);
						}
						break;
					case 21:
						{
						_localctx = new Index_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 491;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 492;
						Match(Open_Bracket);
						State = 493;
						expression(0);
						State = 494;
						Match(Close_Bracket);
						}
						break;
					case 22:
						{
						_localctx = new Postfix_if_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 496;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 497;
						postfix_if_branch();
						}
						break;
					case 23:
						{
						_localctx = new Postfix_unless_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 498;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 499;
						postfix_unless_branch();
						}
						break;
					case 24:
						{
						_localctx = new Newlined_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 500;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 501;
						Match(NewLine);
						}
						break;
					case 25:
						{
						_localctx = new Separated_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 502;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 503;
						Match(Semicolon);
						}
						break;
					case 26:
						{
						_localctx = new Member_access_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 504;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 507;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 505;
								Match(Dot);
								State = 506;
								Match(Identifier);
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 509;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						State = 512;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
						case 1:
							{
							State = 511;
							type_arg_list();
							}
							break;
						}
						State = 515;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
						case 1:
							{
							State = 514;
							arglist();
							}
							break;
						}
						}
						break;
					}
					} 
				}
				State = 521;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression_atomContext expression_atom() {
			return GetRuleContext<Expression_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Integer_atomContext integer_atom() {
			return GetRuleContext<Integer_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Real_atomContext real_atom() {
			return GetRuleContext<Real_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Boolean_atomContext boolean_atom() {
			return GetRuleContext<Boolean_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_atomContext string_atom() {
			return GetRuleContext<String_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Character_atomContext character_atom() {
			return GetRuleContext<Character_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Empty_atomContext empty_atom() {
			return GetRuleContext<Empty_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Wildcard_atomContext wildcard_atom() {
			return GetRuleContext<Wildcard_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public This_atomContext this_atom() {
			return GetRuleContext<This_atomContext>(0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 18, RULE_atom);
		try {
			State = 531;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 522;
				expression_atom();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 523;
				integer_atom();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 524;
				real_atom();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 525;
				boolean_atom();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 526;
				string_atom();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 527;
				character_atom();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 528;
				empty_atom();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 529;
				wildcard_atom();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 530;
				this_atom();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class This_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode This() { return GetToken(LoschScriptParser.This, 0); }
		public This_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_this_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterThis_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitThis_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThis_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public This_atomContext this_atom() {
		This_atomContext _localctx = new This_atomContext(Context, State);
		EnterRule(_localctx, 20, RULE_this_atom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 533;
			Match(This);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Paren() { return GetToken(LoschScriptParser.Open_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Paren() { return GetToken(LoschScriptParser.Close_Paren, 0); }
		public Expression_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterExpression_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitExpression_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_atomContext expression_atom() {
		Expression_atomContext _localctx = new Expression_atomContext(Context, State);
		EnterRule(_localctx, 22, RULE_expression_atom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 535;
			Match(Open_Paren);
			State = 536;
			expression(0);
			State = 537;
			Match(Close_Paren);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Integer_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Integer_Literal() { return GetToken(LoschScriptParser.Integer_Literal, 0); }
		public Integer_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterInteger_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitInteger_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteger_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Integer_atomContext integer_atom() {
		Integer_atomContext _localctx = new Integer_atomContext(Context, State);
		EnterRule(_localctx, 24, RULE_integer_atom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 539;
			Match(Integer_Literal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Real_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Real_Literal() { return GetToken(LoschScriptParser.Real_Literal, 0); }
		public Real_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_real_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterReal_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitReal_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReal_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Real_atomContext real_atom() {
		Real_atomContext _localctx = new Real_atomContext(Context, State);
		EnterRule(_localctx, 26, RULE_real_atom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 541;
			Match(Real_Literal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Boolean_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode True() { return GetToken(LoschScriptParser.True, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode False() { return GetToken(LoschScriptParser.False, 0); }
		public Boolean_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterBoolean_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitBoolean_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Boolean_atomContext boolean_atom() {
		Boolean_atomContext _localctx = new Boolean_atomContext(Context, State);
		EnterRule(_localctx, 28, RULE_boolean_atom);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 543;
			_la = TokenStream.LA(1);
			if ( !(_la==True || _la==False) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String_Literal() { return GetToken(LoschScriptParser.String_Literal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Verbatim_String_Literal() { return GetToken(LoschScriptParser.Verbatim_String_Literal, 0); }
		public String_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterString_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitString_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_atomContext string_atom() {
		String_atomContext _localctx = new String_atomContext(Context, State);
		EnterRule(_localctx, 30, RULE_string_atom);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 545;
			_la = TokenStream.LA(1);
			if ( !(_la==String_Literal || _la==Verbatim_String_Literal) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Character_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Character_Literal() { return GetToken(LoschScriptParser.Character_Literal, 0); }
		public Character_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_character_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterCharacter_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitCharacter_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharacter_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Character_atomContext character_atom() {
		Character_atomContext _localctx = new Character_atomContext(Context, State);
		EnterRule(_localctx, 32, RULE_character_atom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 547;
			Match(Character_Literal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Empty_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Paren() { return GetToken(LoschScriptParser.Open_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Paren() { return GetToken(LoschScriptParser.Close_Paren, 0); }
		public Empty_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_empty_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterEmpty_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitEmpty_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmpty_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Empty_atomContext empty_atom() {
		Empty_atomContext _localctx = new Empty_atomContext(Context, State);
		EnterRule(_localctx, 34, RULE_empty_atom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 549;
			Match(Open_Paren);
			State = 550;
			Match(Close_Paren);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Wildcard_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Underscore() { return GetToken(LoschScriptParser.Underscore, 0); }
		public Wildcard_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wildcard_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterWildcard_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitWildcard_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWildcard_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Wildcard_atomContext wildcard_atom() {
		Wildcard_atomContext _localctx = new Wildcard_atomContext(Context, State);
		EnterRule(_localctx, 36, RULE_wildcard_atom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 552;
			Match(Underscore);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Identifier_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(LoschScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Full_identifierContext full_identifier() {
			return GetRuleContext<Full_identifierContext>(0);
		}
		public Identifier_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterIdentifier_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitIdentifier_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Identifier_atomContext identifier_atom() {
		Identifier_atomContext _localctx = new Identifier_atomContext(Context, State);
		EnterRule(_localctx, 38, RULE_identifier_atom);
		int _la;
		try {
			State = 568;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 557;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Less_Than) {
					{
					{
					State = 554;
					attribute();
					}
					}
					State = 559;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 560;
				Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 564;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Less_Than) {
					{
					{
					State = 561;
					attribute();
					}
					}
					State = 566;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 567;
				full_identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Builtin_type_aliasContext builtin_type_alias() {
			return GetRuleContext<Builtin_type_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ampersand() { return GetToken(LoschScriptParser.Ampersand, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Paren() { return GetToken(LoschScriptParser.Open_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext[] type_name() {
			return GetRuleContexts<Type_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name(int i) {
			return GetRuleContext<Type_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Paren() { return GetToken(LoschScriptParser.Close_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Bar() { return GetTokens(LoschScriptParser.Bar); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bar(int i) {
			return GetToken(LoschScriptParser.Bar, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_identifierContext generic_identifier() {
			return GetRuleContext<Generic_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_atomContext identifier_atom() {
			return GetRuleContext<Identifier_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Brace() { return GetToken(LoschScriptParser.Open_Brace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_arg_listContext type_arg_list() {
			return GetRuleContext<Type_arg_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Bracket() { return GetToken(LoschScriptParser.Close_Bracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Param_list_typeContext param_list_type() {
			return GetRuleContext<Param_list_typeContext>(0);
		}
		public Type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterType_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitType_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_nameContext type_name() {
		Type_nameContext _localctx = new Type_nameContext(Context, State);
		EnterRule(_localctx, 40, RULE_type_name);
		int _la;
		try {
			State = 600;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 570;
				builtin_type_alias();
				State = 572;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
				case 1:
					{
					State = 571;
					Match(Ampersand);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 574;
				Match(Open_Paren);
				State = 575;
				type_name();
				State = 578;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 576;
					Match(Bar);
					State = 577;
					type_name();
					}
					}
					State = 580;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Bar );
				State = 582;
				Match(Close_Paren);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 584;
				generic_identifier();
				State = 586;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
				case 1:
					{
					State = 585;
					Match(Ampersand);
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 588;
				identifier_atom();
				State = 589;
				Match(Open_Brace);
				State = 590;
				type_arg_list();
				State = 591;
				Match(Close_Bracket);
				State = 593;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
				case 1:
					{
					State = 592;
					Match(Ampersand);
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 595;
				identifier_atom();
				State = 597;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
				case 1:
					{
					State = 596;
					Match(Ampersand);
					}
					break;
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 599;
				param_list_type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Builtin_type_aliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int8() { return GetToken(LoschScriptParser.Int8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UInt8() { return GetToken(LoschScriptParser.UInt8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int16() { return GetToken(LoschScriptParser.Int16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UInt16() { return GetToken(LoschScriptParser.UInt16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int32() { return GetToken(LoschScriptParser.Int32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UInt32() { return GetToken(LoschScriptParser.UInt32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int64() { return GetToken(LoschScriptParser.Int64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UInt64() { return GetToken(LoschScriptParser.UInt64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Native() { return GetToken(LoschScriptParser.Native, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNative() { return GetToken(LoschScriptParser.UNative, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Float32() { return GetToken(LoschScriptParser.Float32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Float64() { return GetToken(LoschScriptParser.Float64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Decimal() { return GetToken(LoschScriptParser.Decimal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Char() { return GetToken(LoschScriptParser.Char, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(LoschScriptParser.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bool() { return GetToken(LoschScriptParser.Bool, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Object() { return GetToken(LoschScriptParser.Object, 0); }
		public Builtin_type_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_builtin_type_alias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterBuiltin_type_alias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitBuiltin_type_alias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuiltin_type_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Builtin_type_aliasContext builtin_type_alias() {
		Builtin_type_aliasContext _localctx = new Builtin_type_aliasContext(Context, State);
		EnterRule(_localctx, 42, RULE_builtin_type_alias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 602;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 824629526528L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Param_list_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Paren_Bar() { return GetToken(LoschScriptParser.Open_Paren_Bar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext[] type_name() {
			return GetRuleContexts<Type_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name(int i) {
			return GetRuleContext<Type_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bar_Close_Paren() { return GetToken(LoschScriptParser.Bar_Close_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(LoschScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(LoschScriptParser.Comma, i);
		}
		public Param_list_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param_list_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterParam_list_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitParam_list_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam_list_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Param_list_typeContext param_list_type() {
		Param_list_typeContext _localctx = new Param_list_typeContext(Context, State);
		EnterRule(_localctx, 44, RULE_param_list_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 604;
			Match(Open_Paren_Bar);
			State = 605;
			type_name();
			State = 610;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 606;
				Match(Comma);
				State = 607;
				type_name();
				}
				}
				State = 612;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 613;
			Match(Bar_Close_Paren);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Question_Mark() { return GetToken(LoschScriptParser.Question_Mark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(LoschScriptParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		public If_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterIf_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitIf_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_branchContext if_branch() {
		If_branchContext _localctx = new If_branchContext(Context, State);
		EnterRule(_localctx, 46, RULE_if_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 615;
			Match(Question_Mark);
			State = 616;
			expression(0);
			State = 617;
			Match(Equals);
			State = 620;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
			case 1:
				{
				State = 618;
				code_block();
				}
				break;
			case 2:
				{
				State = 619;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Postfix_if_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Question_Mark() { return GetToken(LoschScriptParser.Question_Mark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Postfix_if_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfix_if_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterPostfix_if_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitPostfix_if_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfix_if_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Postfix_if_branchContext postfix_if_branch() {
		Postfix_if_branchContext _localctx = new Postfix_if_branchContext(Context, State);
		EnterRule(_localctx, 48, RULE_postfix_if_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 622;
			Match(Question_Mark);
			State = 623;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Elif_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(LoschScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(LoschScriptParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		public Elif_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elif_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterElif_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitElif_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElif_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Elif_branchContext elif_branch() {
		Elif_branchContext _localctx = new Elif_branchContext(Context, State);
		EnterRule(_localctx, 50, RULE_elif_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 625;
			Match(Colon);
			State = 626;
			expression(0);
			State = 627;
			Match(Equals);
			State = 630;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
			case 1:
				{
				State = 628;
				code_block();
				}
				break;
			case 2:
				{
				State = 629;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(LoschScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(LoschScriptParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Else_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterElse_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitElse_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_branchContext else_branch() {
		Else_branchContext _localctx = new Else_branchContext(Context, State);
		EnterRule(_localctx, 52, RULE_else_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 632;
			Match(Colon);
			State = 633;
			Match(Equals);
			State = 636;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
			case 1:
				{
				State = 634;
				code_block();
				}
				break;
			case 2:
				{
				State = 635;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unless_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation_Question() { return GetToken(LoschScriptParser.Exclamation_Question, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(LoschScriptParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		public Unless_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unless_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterUnless_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitUnless_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnless_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unless_branchContext unless_branch() {
		Unless_branchContext _localctx = new Unless_branchContext(Context, State);
		EnterRule(_localctx, 54, RULE_unless_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 638;
			Match(Exclamation_Question);
			State = 639;
			expression(0);
			State = 640;
			Match(Equals);
			State = 643;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
			case 1:
				{
				State = 641;
				code_block();
				}
				break;
			case 2:
				{
				State = 642;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_unless_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation_Colon() { return GetToken(LoschScriptParser.Exclamation_Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(LoschScriptParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		public Else_unless_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_unless_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterElse_unless_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitElse_unless_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_unless_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_unless_branchContext else_unless_branch() {
		Else_unless_branchContext _localctx = new Else_unless_branchContext(Context, State);
		EnterRule(_localctx, 56, RULE_else_unless_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 645;
			Match(Exclamation_Colon);
			State = 646;
			expression(0);
			State = 647;
			Match(Equals);
			State = 650;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				{
				State = 648;
				code_block();
				}
				break;
			case 2:
				{
				State = 649;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Postfix_unless_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation_Question() { return GetToken(LoschScriptParser.Exclamation_Question, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Postfix_unless_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfix_unless_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterPostfix_unless_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitPostfix_unless_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfix_unless_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Postfix_unless_branchContext postfix_unless_branch() {
		Postfix_unless_branchContext _localctx = new Postfix_unless_branchContext(Context, State);
		EnterRule(_localctx, 58, RULE_postfix_unless_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 652;
			Match(Exclamation_Question);
			State = 653;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Dot() { return GetToken(LoschScriptParser.Double_Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext[] index() {
			return GetRuleContexts<IndexContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index(int i) {
			return GetRuleContext<IndexContext>(i);
		}
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(Context, State);
		EnterRule(_localctx, 60, RULE_range);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 656;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Caret || _la==Integer_Literal) {
				{
				State = 655;
				index();
				}
			}

			State = 658;
			Match(Double_Dot);
			State = 660;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				{
				State = 659;
				index();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Integer_atomContext integer_atom() {
			return GetRuleContext<Integer_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Caret() { return GetToken(LoschScriptParser.Caret, 0); }
		public IndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexContext index() {
		IndexContext _localctx = new IndexContext(Context, State);
		EnterRule(_localctx, 62, RULE_index);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 663;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Caret) {
				{
				State = 662;
				Match(Caret);
				}
			}

			State = 665;
			integer_atom();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArglistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(LoschScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(LoschScriptParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Comma() { return GetToken(LoschScriptParser.Double_Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(LoschScriptParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(LoschScriptParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Colon() { return GetTokens(LoschScriptParser.Colon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon(int i) {
			return GetToken(LoschScriptParser.Colon, i);
		}
		public ArglistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arglist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterArglist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitArglist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArglist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArglistContext arglist() {
		ArglistContext _localctx = new ArglistContext(Context, State);
		EnterRule(_localctx, 64, RULE_arglist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 669;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
			case 1:
				{
				State = 667;
				Match(Identifier);
				State = 668;
				Match(Colon);
				}
				break;
			}
			State = 671;
			expression(0);
			}
			State = 681;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,76,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 673;
					Match(Comma);
					{
					State = 676;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
					case 1:
						{
						State = 674;
						Match(Identifier);
						State = 675;
						Match(Colon);
						}
						break;
					}
					State = 678;
					expression(0);
					}
					}
					} 
				}
				State = 683;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,76,Context);
			}
			State = 685;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				{
				State = 684;
				Match(Double_Comma);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less_Than() { return GetToken(LoschScriptParser.Less_Than, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater_Than() { return GetToken(LoschScriptParser.Greater_Than, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArglistContext arglist() {
			return GetRuleContext<ArglistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(LoschScriptParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(LoschScriptParser.NewLine, i);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 66, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 687;
			Match(Less_Than);
			State = 688;
			type_name();
			State = 690;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 43)) & ~0x3f) == 0 && ((1L << (_la - 43)) & 1171124351266339939L) != 0) || ((((_la - 118)) & ~0x3f) == 0 && ((1L << (_la - 118)) & 7962657L) != 0)) {
				{
				State = 689;
				arglist();
				}
			}

			State = 692;
			Match(Greater_Than);
			State = 696;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NewLine) {
				{
				{
				State = 693;
				Match(NewLine);
				}
				}
				State = 698;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_identifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_atomContext identifier_atom() {
			return GetRuleContext<Identifier_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Bracket() { return GetToken(LoschScriptParser.Open_Bracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Bracket() { return GetToken(LoschScriptParser.Close_Bracket, 0); }
		public Generic_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterGeneric_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitGeneric_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneric_identifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Generic_identifierContext generic_identifier() {
		Generic_identifierContext _localctx = new Generic_identifierContext(Context, State);
		EnterRule(_localctx, 68, RULE_generic_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 699;
			identifier_atom();
			State = 700;
			Match(Open_Bracket);
			State = 701;
			type_parameter_list();
			State = 702;
			Match(Close_Bracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_access_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Global() { return GetToken(LoschScriptParser.Global, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Partial() { return GetToken(LoschScriptParser.Partial, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Local() { return GetToken(LoschScriptParser.Local, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Internal() { return GetToken(LoschScriptParser.Internal, 0); }
		public Field_access_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_access_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterField_access_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitField_access_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField_access_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Field_access_modifierContext field_access_modifier() {
		Field_access_modifierContext _localctx = new Field_access_modifierContext(Context, State);
		EnterRule(_localctx, 70, RULE_field_access_modifier);
		int _la;
		try {
			State = 716;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Global:
				EnterOuterAlt(_localctx, 1);
				{
				State = 704;
				Match(Global);
				State = 706;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Partial) {
					{
					State = 705;
					Match(Partial);
					}
				}

				}
				break;
			case Local:
				EnterOuterAlt(_localctx, 2);
				{
				State = 708;
				Match(Local);
				State = 710;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Partial) {
					{
					State = 709;
					Match(Partial);
					}
				}

				}
				break;
			case Internal:
				EnterOuterAlt(_localctx, 3);
				{
				State = 712;
				Match(Internal);
				State = 714;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Partial) {
					{
					State = 713;
					Match(Partial);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Field_access_modifierContext field_access_modifier() {
			return GetRuleContext<Field_access_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(LoschScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(LoschScriptParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(LoschScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Var() { return GetToken(LoschScriptParser.Var, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Val() { return GetToken(LoschScriptParser.Val, 0); }
		public Field_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterField_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitField_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Field_declarationContext field_declaration() {
		Field_declarationContext _localctx = new Field_declarationContext(Context, State);
		EnterRule(_localctx, 72, RULE_field_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 718;
			field_access_modifier();
			State = 720;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Var || _la==Val) {
				{
				State = 719;
				_la = TokenStream.LA(1);
				if ( !(_la==Var || _la==Val) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 722;
			Match(Identifier);
			State = 725;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 723;
				Match(Colon);
				State = 724;
				type_name();
				}
			}

			State = 727;
			Match(Equals);
			State = 728;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlaceholderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(LoschScriptParser.Dot, 0); }
		public PlaceholderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_placeholder; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterPlaceholder(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitPlaceholder(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlaceholder(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlaceholderContext placeholder() {
		PlaceholderContext _localctx = new PlaceholderContext(Context, State);
		EnterRule(_localctx, 74, RULE_placeholder);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 730;
			Match(Dot);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_access_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Global() { return GetToken(LoschScriptParser.Global, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Internal() { return GetToken(LoschScriptParser.Internal, 0); }
		public Type_access_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_access_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterType_access_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitType_access_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_access_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_access_modifierContext type_access_modifier() {
		Type_access_modifierContext _localctx = new Type_access_modifierContext(Context, State);
		EnterRule(_localctx, 76, RULE_type_access_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 732;
			_la = TokenStream.LA(1);
			if ( !(_la==Global || _la==Internal) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nested_type_access_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_access_modifierContext type_access_modifier() {
			return GetRuleContext<Type_access_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Local() { return GetToken(LoschScriptParser.Local, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Protected() { return GetToken(LoschScriptParser.Protected, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Internal() { return GetToken(LoschScriptParser.Internal, 0); }
		public Nested_type_access_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nested_type_access_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterNested_type_access_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitNested_type_access_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNested_type_access_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Nested_type_access_modifierContext nested_type_access_modifier() {
		Nested_type_access_modifierContext _localctx = new Nested_type_access_modifierContext(Context, State);
		EnterRule(_localctx, 78, RULE_nested_type_access_modifier);
		int _la;
		try {
			State = 740;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Global:
			case Internal:
				EnterOuterAlt(_localctx, 1);
				{
				State = 734;
				type_access_modifier();
				}
				break;
			case Local:
				EnterOuterAlt(_localctx, 2);
				{
				State = 735;
				Match(Local);
				}
				break;
			case Protected:
				EnterOuterAlt(_localctx, 3);
				{
				State = 736;
				Match(Protected);
				State = 738;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Internal) {
					{
					State = 737;
					Match(Internal);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_special_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open() { return GetToken(LoschScriptParser.Open, 0); }
		public Type_special_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_special_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterType_special_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitType_special_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_special_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_special_modifierContext type_special_modifier() {
		Type_special_modifierContext _localctx = new Type_special_modifierContext(Context, State);
		EnterRule(_localctx, 80, RULE_type_special_modifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 742;
			Match(Open);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_kindContext type_kind() {
			return GetRuleContext<Type_kindContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(LoschScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(LoschScriptParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_blockContext type_block() {
			return GetRuleContext<Type_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_access_modifierContext type_access_modifier() {
			return GetRuleContext<Type_access_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Nested_type_access_modifierContext nested_type_access_modifier() {
			return GetRuleContext<Nested_type_access_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_special_modifierContext type_special_modifier() {
			return GetRuleContext<Type_special_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Inheritance_listContext inheritance_list() {
			return GetRuleContext<Inheritance_listContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 82, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 746;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
			case 1:
				{
				State = 744;
				type_access_modifier();
				}
				break;
			case 2:
				{
				State = 745;
				nested_type_access_modifier();
				}
				break;
			}
			State = 749;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Open) {
				{
				State = 748;
				type_special_modifier();
				}
			}

			State = 751;
			type_kind();
			State = 752;
			Match(Identifier);
			State = 754;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Open_Bracket) {
				{
				State = 753;
				type_parameter_list();
				}
			}

			State = 757;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 756;
				inheritance_list();
				}
			}

			State = 759;
			Match(Equals);
			State = 760;
			type_block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameter_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Bracket() { return GetToken(LoschScriptParser.Open_Bracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameterContext[] type_parameter() {
			return GetRuleContexts<Type_parameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameterContext type_parameter(int i) {
			return GetRuleContext<Type_parameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Bracket() { return GetToken(LoschScriptParser.Close_Bracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(LoschScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(LoschScriptParser.Comma, i);
		}
		public Type_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterType_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitType_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_parameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameter_listContext type_parameter_list() {
		Type_parameter_listContext _localctx = new Type_parameter_listContext(Context, State);
		EnterRule(_localctx, 84, RULE_type_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 762;
			Match(Open_Bracket);
			State = 763;
			type_parameter();
			State = 768;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 764;
				Match(Comma);
				State = 765;
				type_parameter();
				}
				}
				State = 770;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 771;
			Match(Close_Bracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(LoschScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(LoschScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_constraintContext type_parameter_constraint() {
			return GetRuleContext<Type_parameter_constraintContext>(0);
		}
		public Type_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterType_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitType_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameterContext type_parameter() {
		Type_parameterContext _localctx = new Type_parameterContext(Context, State);
		EnterRule(_localctx, 86, RULE_type_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 773;
			Match(Identifier);
			State = 776;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 774;
				Match(Colon);
				State = 775;
				type_parameter_constraint();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameter_constraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_kindContext type_kind() {
			return GetRuleContext<Type_kindContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Type_parameter_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterType_parameter_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitType_parameter_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_parameter_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameter_constraintContext type_parameter_constraint() {
		Type_parameter_constraintContext _localctx = new Type_parameter_constraintContext(Context, State);
		EnterRule(_localctx, 88, RULE_type_parameter_constraint);
		try {
			State = 780;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Type:
			case Module:
			case Template:
			case Ref:
			case Val:
				EnterOuterAlt(_localctx, 1);
				{
				State = 778;
				type_kind();
				}
				break;
			case Int8:
			case UInt8:
			case Int16:
			case UInt16:
			case Int32:
			case UInt32:
			case Int64:
			case UInt64:
			case Native:
			case UNative:
			case Float32:
			case Float64:
			case Decimal:
			case Bool:
			case String:
			case Char:
			case Object:
			case Open_Paren:
			case Open_Paren_Bar:
			case Less_Than:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 779;
				type_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inheritance_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(LoschScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext[] type_name() {
			return GetRuleContexts<Type_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name(int i) {
			return GetRuleContext<Type_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(LoschScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(LoschScriptParser.Comma, i);
		}
		public Inheritance_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inheritance_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterInheritance_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitInheritance_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInheritance_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inheritance_listContext inheritance_list() {
		Inheritance_listContext _localctx = new Inheritance_listContext(Context, State);
		EnterRule(_localctx, 90, RULE_inheritance_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 782;
			Match(Colon);
			State = 783;
			type_name();
			State = 788;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 784;
				Match(Comma);
				State = 785;
				type_name();
				}
				}
				State = 790;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_kindContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Type() { return GetToken(LoschScriptParser.Type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ref() { return GetToken(LoschScriptParser.Ref, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Val() { return GetToken(LoschScriptParser.Val, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Template() { return GetToken(LoschScriptParser.Template, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Module() { return GetToken(LoschScriptParser.Module, 0); }
		public Type_kindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_kind; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterType_kind(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitType_kind(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_kind(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_kindContext type_kind() {
		Type_kindContext _localctx = new Type_kindContext(Context, State);
		EnterRule(_localctx, 92, RULE_type_kind);
		int _la;
		try {
			State = 799;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Type:
			case Ref:
				EnterOuterAlt(_localctx, 1);
				{
				State = 792;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Ref) {
					{
					State = 791;
					Match(Ref);
					}
				}

				State = 794;
				Match(Type);
				}
				break;
			case Val:
				EnterOuterAlt(_localctx, 2);
				{
				State = 795;
				Match(Val);
				State = 796;
				Match(Type);
				}
				break;
			case Template:
				EnterOuterAlt(_localctx, 3);
				{
				State = 797;
				Match(Template);
				}
				break;
			case Module:
				EnterOuterAlt(_localctx, 4);
				{
				State = 798;
				Match(Module);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_access_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Global() { return GetToken(LoschScriptParser.Global, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Local() { return GetToken(LoschScriptParser.Local, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Internal() { return GetToken(LoschScriptParser.Internal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Protected() { return GetToken(LoschScriptParser.Protected, 0); }
		public Member_access_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_access_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterMember_access_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitMember_access_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_access_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_access_modifierContext member_access_modifier() {
		Member_access_modifierContext _localctx = new Member_access_modifierContext(Context, State);
		EnterRule(_localctx, 94, RULE_member_access_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 801;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 47104L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_oop_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Virtual() { return GetToken(LoschScriptParser.Virtual, 0); }
		public Member_oop_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_oop_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterMember_oop_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitMember_oop_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_oop_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_oop_modifierContext member_oop_modifier() {
		Member_oop_modifierContext _localctx = new Member_oop_modifierContext(Context, State);
		EnterRule(_localctx, 96, RULE_member_oop_modifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 803;
			Match(Virtual);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_special_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extern() { return GetToken(LoschScriptParser.Extern, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Infix() { return GetToken(LoschScriptParser.Infix, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Inline() { return GetToken(LoschScriptParser.Inline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(LoschScriptParser.Static, 0); }
		public Member_special_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_special_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterMember_special_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitMember_special_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_special_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_special_modifierContext member_special_modifier() {
		Member_special_modifierContext _localctx = new Member_special_modifierContext(Context, State);
		EnterRule(_localctx, 98, RULE_member_special_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 805;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3298536996864L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_memberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(LoschScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Member_access_modifierContext member_access_modifier() {
			return GetRuleContext<Member_access_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Member_oop_modifierContext member_oop_modifier() {
			return GetRuleContext<Member_oop_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Member_special_modifierContext[] member_special_modifier() {
			return GetRuleContexts<Member_special_modifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Member_special_modifierContext member_special_modifier(int i) {
			return GetRuleContext<Member_special_modifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_listContext parameter_list() {
			return GetRuleContext<Parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(LoschScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(LoschScriptParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Type_memberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_member; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterType_member(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitType_member(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_member(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_memberContext type_member() {
		Type_memberContext _localctx = new Type_memberContext(Context, State);
		EnterRule(_localctx, 100, RULE_type_member);
		int _la;
		try {
			State = 858;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,111,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 808;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Less_Than) {
					{
					State = 807;
					attribute();
					}
				}

				State = 811;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 47104L) != 0)) {
					{
					State = 810;
					member_access_modifier();
					}
				}

				State = 814;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Virtual) {
					{
					State = 813;
					member_oop_modifier();
					}
				}

				State = 819;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3298536996864L) != 0)) {
					{
					{
					State = 816;
					member_special_modifier();
					}
					}
					State = 821;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 822;
				Match(Identifier);
				State = 824;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Open_Bracket) {
					{
					State = 823;
					type_parameter_list();
					}
				}

				State = 827;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,103,Context) ) {
				case 1:
					{
					State = 826;
					parameter_list();
					}
					break;
				}
				State = 831;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 829;
					Match(Colon);
					State = 830;
					type_name();
					}
				}

				State = 835;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Equals) {
					{
					State = 833;
					Match(Equals);
					State = 834;
					expression(0);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 838;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Less_Than) {
					{
					State = 837;
					attribute();
					}
				}

				State = 841;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 47104L) != 0)) {
					{
					State = 840;
					member_access_modifier();
					}
				}

				State = 844;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Virtual) {
					{
					State = 843;
					member_oop_modifier();
					}
				}

				State = 849;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3298536996864L) != 0)) {
					{
					{
					State = 846;
					member_special_modifier();
					}
					}
					State = 851;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 852;
				Match(Identifier);
				State = 854;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Open_Bracket) {
					{
					State = 853;
					type_parameter_list();
					}
				}

				State = 856;
				Match(Colon);
				State = 857;
				type_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Paren() { return GetToken(LoschScriptParser.Open_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Paren() { return GetToken(LoschScriptParser.Close_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(LoschScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(LoschScriptParser.Comma, i);
		}
		public Parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterParameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitParameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_listContext parameter_list() {
		Parameter_listContext _localctx = new Parameter_listContext(Context, State);
		EnterRule(_localctx, 102, RULE_parameter_list);
		int _la;
		try {
			State = 880;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Open_Paren:
				EnterOuterAlt(_localctx, 1);
				{
				State = 860;
				Match(Open_Paren);
				State = 869;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & 68719476807L) != 0)) {
					{
					State = 861;
					parameter();
					State = 866;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==Comma) {
						{
						{
						State = 862;
						Match(Comma);
						State = 863;
						parameter();
						}
						}
						State = 868;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 871;
				Match(Close_Paren);
				}
				break;
			case Ampersand:
			case Ampersand_Greater:
			case Less_Ampersand:
			case Less_Than:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 872;
				parameter();
				State = 877;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 873;
					Match(Comma);
					State = 874;
					parameter();
					}
					}
					State = 879;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ampersand() { return GetToken(LoschScriptParser.Ampersand, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ampersand_Greater() { return GetToken(LoschScriptParser.Ampersand_Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less_Ampersand() { return GetToken(LoschScriptParser.Less_Ampersand, 0); }
		public Parameter_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterParameter_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitParameter_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_modifierContext parameter_modifier() {
		Parameter_modifierContext _localctx = new Parameter_modifierContext(Context, State);
		EnterRule(_localctx, 104, RULE_parameter_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 882;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(LoschScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_modifierContext parameter_modifier() {
			return GetRuleContext<Parameter_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Dot() { return GetToken(LoschScriptParser.Double_Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(LoschScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_constraintContext parameter_constraint() {
			return GetRuleContext<Parameter_constraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(LoschScriptParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 106, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 885;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Less_Than) {
				{
				State = 884;
				attribute();
				}
			}

			State = 888;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & 7L) != 0)) {
				{
				State = 887;
				parameter_modifier();
				}
			}

			State = 890;
			Match(Identifier);
			State = 892;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Double_Dot) {
				{
				State = 891;
				Match(Double_Dot);
				}
			}

			State = 896;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,119,Context) ) {
			case 1:
				{
				State = 894;
				Match(Colon);
				State = 895;
				type_name();
				}
				break;
			}
			State = 899;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Open_Brace || _la==Question_Mark) {
				{
				State = 898;
				parameter_constraint();
				}
			}

			State = 903;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,121,Context) ) {
			case 1:
				{
				State = 901;
				Match(Equals);
				State = 902;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_constraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Brace() { return GetToken(LoschScriptParser.Open_Brace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Brace() { return GetToken(LoschScriptParser.Close_Brace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Question_Mark() { return GetToken(LoschScriptParser.Question_Mark, 0); }
		public Parameter_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterParameter_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitParameter_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_constraintContext parameter_constraint() {
		Parameter_constraintContext _localctx = new Parameter_constraintContext(Context, State);
		EnterRule(_localctx, 108, RULE_parameter_constraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 906;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Question_Mark) {
				{
				State = 905;
				Match(Question_Mark);
				}
			}

			State = 908;
			Match(Open_Brace);
			State = 909;
			expression(0);
			State = 910;
			Match(Close_Brace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Brace() { return GetToken(LoschScriptParser.Open_Brace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Brace() { return GetToken(LoschScriptParser.Close_Brace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_memberContext[] type_member() {
			return GetRuleContexts<Type_memberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_memberContext type_member(int i) {
			return GetRuleContext<Type_memberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(LoschScriptParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(LoschScriptParser.NewLine, i);
		}
		public Type_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterType_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitType_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_blockContext type_block() {
		Type_blockContext _localctx = new Type_blockContext(Context, State);
		EnterRule(_localctx, 110, RULE_type_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 912;
			Match(Open_Brace);
			State = 918;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 25288770780932L) != 0) || _la==Less_Than || _la==Identifier) {
				{
				State = 916;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,123,Context) ) {
				case 1:
					{
					State = 913;
					type_member();
					}
					break;
				case 2:
					{
					State = 914;
					type();
					}
					break;
				case 3:
					{
					State = 915;
					Match(NewLine);
					}
					break;
				}
				}
				State = 920;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 921;
			Match(Close_Brace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Try_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Try() { return GetToken(LoschScriptParser.Try, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(LoschScriptParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Try_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_try_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterTry_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitTry_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTry_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Try_branchContext try_branch() {
		Try_branchContext _localctx = new Try_branchContext(Context, State);
		EnterRule(_localctx, 112, RULE_try_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 923;
			Match(Try);
			State = 924;
			Match(Equals);
			State = 925;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Catch_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Catch() { return GetToken(LoschScriptParser.Catch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(LoschScriptParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(LoschScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(LoschScriptParser.Colon, 0); }
		public Catch_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catch_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterCatch_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitCatch_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatch_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Catch_branchContext catch_branch() {
		Catch_branchContext _localctx = new Catch_branchContext(Context, State);
		EnterRule(_localctx, 114, RULE_catch_branch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 927;
			Match(Catch);
			State = 933;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 360288794819166208L) != 0) || _la==Less_Than || _la==Identifier) {
				{
				State = 930;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,125,Context) ) {
				case 1:
					{
					State = 928;
					Match(Identifier);
					State = 929;
					Match(Colon);
					}
					break;
				}
				State = 932;
				type_name();
				}
			}

			State = 935;
			Match(Equals);
			State = 936;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Finally_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Finally() { return GetToken(LoschScriptParser.Finally, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(LoschScriptParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Finally_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finally_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterFinally_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitFinally_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinally_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Finally_branchContext finally_branch() {
		Finally_branchContext _localctx = new Finally_branchContext(Context, State);
		EnterRule(_localctx, 116, RULE_finally_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 938;
			Match(Finally);
			State = 939;
			Match(Equals);
			State = 940;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fault_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Fault() { return GetToken(LoschScriptParser.Fault, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(LoschScriptParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Fault_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fault_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterFault_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitFault_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFault_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fault_branchContext fault_branch() {
		Fault_branchContext _localctx = new Fault_branchContext(Context, State);
		EnterRule(_localctx, 118, RULE_fault_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 942;
			Match(Fault);
			State = 943;
			Match(Equals);
			State = 944;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_arg_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Bracket() { return GetToken(LoschScriptParser.Open_Bracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext[] type_name() {
			return GetRuleContexts<Type_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name(int i) {
			return GetRuleContext<Type_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Bracket() { return GetToken(LoschScriptParser.Close_Bracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(LoschScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(LoschScriptParser.Comma, i);
		}
		public Type_arg_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_arg_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterType_arg_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitType_arg_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_arg_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_arg_listContext type_arg_list() {
		Type_arg_listContext _localctx = new Type_arg_listContext(Context, State);
		EnterRule(_localctx, 120, RULE_type_arg_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 946;
			Match(Open_Bracket);
			State = 947;
			type_name();
			State = 952;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 948;
				Match(Comma);
				State = 949;
				type_name();
				}
				}
				State = 954;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 955;
			Match(Close_Bracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(LoschScriptParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus_Equals() { return GetToken(LoschScriptParser.Plus_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus_Equals() { return GetToken(LoschScriptParser.Minus_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Asterisk_Equals() { return GetToken(LoschScriptParser.Asterisk_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Slash_Equals() { return GetToken(LoschScriptParser.Slash_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Asterisk_Equals() { return GetToken(LoschScriptParser.Double_Asterisk_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Percent_Equals() { return GetToken(LoschScriptParser.Percent_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tilde_Equals() { return GetToken(LoschScriptParser.Tilde_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Less_Than_Equals() { return GetToken(LoschScriptParser.Double_Less_Than_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Greater_Than_Equals() { return GetToken(LoschScriptParser.Double_Greater_Than_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bar_Equals() { return GetToken(LoschScriptParser.Bar_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ampersand_Equals() { return GetToken(LoschScriptParser.Ampersand_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Bar_Equals() { return GetToken(LoschScriptParser.Double_Bar_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Ampersand_Equals() { return GetToken(LoschScriptParser.Double_Ampersand_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Caret_Equals() { return GetToken(LoschScriptParser.Caret_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot_Equals() { return GetToken(LoschScriptParser.Dot_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Question_Mark_Equals() { return GetToken(LoschScriptParser.Double_Question_Mark_Equals, 0); }
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.EnterAssignment_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoschScriptParserListener typedListener = listener as ILoschScriptParserListener;
			if (typedListener != null) typedListener.ExitAssignment_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILoschScriptParserVisitor<TResult> typedVisitor = visitor as ILoschScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_operatorContext assignment_operator() {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(Context, State);
		EnterRule(_localctx, 122, RULE_assignment_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 957;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & 1528033103648654337L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 8: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 50);
		case 1: return Precpred(Context, 49);
		case 2: return Precpred(Context, 47);
		case 3: return Precpred(Context, 46);
		case 4: return Precpred(Context, 45);
		case 5: return Precpred(Context, 44);
		case 6: return Precpred(Context, 43);
		case 7: return Precpred(Context, 42);
		case 8: return Precpred(Context, 41);
		case 9: return Precpred(Context, 40);
		case 10: return Precpred(Context, 39);
		case 11: return Precpred(Context, 38);
		case 12: return Precpred(Context, 37);
		case 13: return Precpred(Context, 36);
		case 14: return Precpred(Context, 35);
		case 15: return Precpred(Context, 34);
		case 16: return Precpred(Context, 30);
		case 17: return Precpred(Context, 28);
		case 18: return Precpred(Context, 27);
		case 19: return Precpred(Context, 2);
		case 20: return Precpred(Context, 25);
		case 21: return Precpred(Context, 22);
		case 22: return Precpred(Context, 19);
		case 23: return Precpred(Context, 7);
		case 24: return Precpred(Context, 6);
		case 25: return Precpred(Context, 3);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,140,960,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,1,0,1,0,5,0,127,8,0,
		10,0,12,0,130,9,0,1,0,1,0,5,0,134,8,0,10,0,12,0,137,9,0,3,0,139,8,0,1,
		0,1,0,1,0,1,1,1,1,3,1,146,8,1,1,2,1,2,5,2,150,8,2,10,2,12,2,153,9,2,1,
		3,1,3,5,3,157,8,3,10,3,12,3,160,9,3,1,3,1,3,5,3,164,8,3,10,3,12,3,167,
		9,3,1,4,3,4,170,8,4,1,4,1,4,1,4,1,4,5,4,176,8,4,10,4,12,4,179,9,4,1,4,
		3,4,182,8,4,1,4,1,4,1,4,1,4,1,4,5,4,189,8,4,10,4,12,4,192,9,4,1,4,3,4,
		195,8,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,5,4,205,8,4,10,4,12,4,208,9,4,
		3,4,210,8,4,1,5,1,5,1,5,1,6,1,6,1,6,5,6,218,8,6,10,6,12,6,221,9,6,1,7,
		1,7,1,7,5,7,226,8,7,10,7,12,7,229,9,7,1,7,3,7,232,8,7,1,7,1,7,1,8,1,8,
		1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,248,8,8,1,8,1,8,1,8,3,8,253,
		8,8,1,8,1,8,1,8,1,8,1,8,4,8,260,8,8,11,8,12,8,261,1,8,1,8,1,8,1,8,5,8,
		268,8,8,10,8,12,8,271,9,8,1,8,5,8,274,8,8,10,8,12,8,277,9,8,1,8,5,8,280,
		8,8,10,8,12,8,283,9,8,1,8,3,8,286,8,8,1,8,1,8,3,8,290,8,8,1,8,1,8,1,8,
		1,8,5,8,296,8,8,10,8,12,8,299,9,8,1,8,5,8,302,8,8,10,8,12,8,305,9,8,1,
		8,5,8,308,8,8,10,8,12,8,311,9,8,1,8,3,8,314,8,8,1,8,1,8,3,8,318,8,8,1,
		8,1,8,1,8,1,8,1,8,1,8,5,8,326,8,8,10,8,12,8,329,9,8,1,8,3,8,332,8,8,1,
		8,1,8,1,8,1,8,1,8,1,8,3,8,340,8,8,1,8,1,8,1,8,1,8,1,8,3,8,347,8,8,1,8,
		1,8,5,8,351,8,8,10,8,12,8,354,9,8,1,8,3,8,357,8,8,1,8,3,8,360,8,8,1,8,
		1,8,1,8,1,8,1,8,1,8,1,8,5,8,369,8,8,10,8,12,8,372,9,8,3,8,374,8,8,1,8,
		1,8,1,8,1,8,1,8,4,8,381,8,8,11,8,12,8,382,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
		1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,400,8,8,10,8,12,8,403,9,8,3,8,405,
		8,8,1,8,1,8,1,8,1,8,1,8,3,8,412,8,8,1,8,3,8,415,8,8,1,8,1,8,1,8,1,8,3,
		8,421,8,8,1,8,1,8,1,8,3,8,426,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
		1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
		8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
		1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
		8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
		1,8,4,8,508,8,8,11,8,12,8,509,1,8,3,8,513,8,8,1,8,3,8,516,8,8,5,8,518,
		8,8,10,8,12,8,521,9,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,532,8,9,
		1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,
		1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,19,5,19,556,8,19,10,19,12,19,559,
		9,19,1,19,1,19,5,19,563,8,19,10,19,12,19,566,9,19,1,19,3,19,569,8,19,1,
		20,1,20,3,20,573,8,20,1,20,1,20,1,20,1,20,4,20,579,8,20,11,20,12,20,580,
		1,20,1,20,1,20,1,20,3,20,587,8,20,1,20,1,20,1,20,1,20,1,20,3,20,594,8,
		20,1,20,1,20,3,20,598,8,20,1,20,3,20,601,8,20,1,21,1,21,1,22,1,22,1,22,
		1,22,5,22,609,8,22,10,22,12,22,612,9,22,1,22,1,22,1,23,1,23,1,23,1,23,
		1,23,3,23,621,8,23,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,3,25,631,8,
		25,1,26,1,26,1,26,1,26,3,26,637,8,26,1,27,1,27,1,27,1,27,1,27,3,27,644,
		8,27,1,28,1,28,1,28,1,28,1,28,3,28,651,8,28,1,29,1,29,1,29,1,30,3,30,657,
		8,30,1,30,1,30,3,30,661,8,30,1,31,3,31,664,8,31,1,31,1,31,1,32,1,32,3,
		32,670,8,32,1,32,1,32,1,32,1,32,1,32,3,32,677,8,32,1,32,5,32,680,8,32,
		10,32,12,32,683,9,32,1,32,3,32,686,8,32,1,33,1,33,1,33,3,33,691,8,33,1,
		33,1,33,5,33,695,8,33,10,33,12,33,698,9,33,1,34,1,34,1,34,1,34,1,34,1,
		35,1,35,3,35,707,8,35,1,35,1,35,3,35,711,8,35,1,35,1,35,3,35,715,8,35,
		3,35,717,8,35,1,36,1,36,3,36,721,8,36,1,36,1,36,1,36,3,36,726,8,36,1,36,
		1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,39,1,39,3,39,739,8,39,3,39,741,
		8,39,1,40,1,40,1,41,1,41,3,41,747,8,41,1,41,3,41,750,8,41,1,41,1,41,1,
		41,3,41,755,8,41,1,41,3,41,758,8,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,
		5,42,767,8,42,10,42,12,42,770,9,42,1,42,1,42,1,43,1,43,1,43,3,43,777,8,
		43,1,44,1,44,3,44,781,8,44,1,45,1,45,1,45,1,45,5,45,787,8,45,10,45,12,
		45,790,9,45,1,46,3,46,793,8,46,1,46,1,46,1,46,1,46,1,46,3,46,800,8,46,
		1,47,1,47,1,48,1,48,1,49,1,49,1,50,3,50,809,8,50,1,50,3,50,812,8,50,1,
		50,3,50,815,8,50,1,50,5,50,818,8,50,10,50,12,50,821,9,50,1,50,1,50,3,50,
		825,8,50,1,50,3,50,828,8,50,1,50,1,50,3,50,832,8,50,1,50,1,50,3,50,836,
		8,50,1,50,3,50,839,8,50,1,50,3,50,842,8,50,1,50,3,50,845,8,50,1,50,5,50,
		848,8,50,10,50,12,50,851,9,50,1,50,1,50,3,50,855,8,50,1,50,1,50,3,50,859,
		8,50,1,51,1,51,1,51,1,51,5,51,865,8,51,10,51,12,51,868,9,51,3,51,870,8,
		51,1,51,1,51,1,51,1,51,5,51,876,8,51,10,51,12,51,879,9,51,3,51,881,8,51,
		1,52,1,52,1,53,3,53,886,8,53,1,53,3,53,889,8,53,1,53,1,53,3,53,893,8,53,
		1,53,1,53,3,53,897,8,53,1,53,3,53,900,8,53,1,53,1,53,3,53,904,8,53,1,54,
		3,54,907,8,54,1,54,1,54,1,54,1,54,1,55,1,55,1,55,1,55,5,55,917,8,55,10,
		55,12,55,920,9,55,1,55,1,55,1,56,1,56,1,56,1,56,1,57,1,57,1,57,3,57,931,
		8,57,1,57,3,57,934,8,57,1,57,1,57,1,57,1,58,1,58,1,58,1,58,1,59,1,59,1,
		59,1,59,1,60,1,60,1,60,1,60,5,60,951,8,60,10,60,12,60,954,9,60,1,60,1,
		60,1,61,1,61,1,61,0,1,16,62,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,
		32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,
		80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
		120,122,0,11,1,0,43,44,1,0,107,108,1,0,103,106,1,0,53,54,1,0,139,140,2,
		0,22,37,39,39,2,0,11,11,13,13,2,0,11,13,15,15,3,0,14,14,21,21,40,41,1,
		0,97,99,14,0,69,69,79,79,87,87,95,96,101,102,110,110,112,112,114,114,116,
		116,119,119,121,122,125,125,127,127,129,129,1090,0,128,1,0,0,0,2,145,1,
		0,0,0,4,151,1,0,0,0,6,154,1,0,0,0,8,209,1,0,0,0,10,211,1,0,0,0,12,214,
		1,0,0,0,14,222,1,0,0,0,16,425,1,0,0,0,18,531,1,0,0,0,20,533,1,0,0,0,22,
		535,1,0,0,0,24,539,1,0,0,0,26,541,1,0,0,0,28,543,1,0,0,0,30,545,1,0,0,
		0,32,547,1,0,0,0,34,549,1,0,0,0,36,552,1,0,0,0,38,568,1,0,0,0,40,600,1,
		0,0,0,42,602,1,0,0,0,44,604,1,0,0,0,46,615,1,0,0,0,48,622,1,0,0,0,50,625,
		1,0,0,0,52,632,1,0,0,0,54,638,1,0,0,0,56,645,1,0,0,0,58,652,1,0,0,0,60,
		656,1,0,0,0,62,663,1,0,0,0,64,669,1,0,0,0,66,687,1,0,0,0,68,699,1,0,0,
		0,70,716,1,0,0,0,72,718,1,0,0,0,74,730,1,0,0,0,76,732,1,0,0,0,78,740,1,
		0,0,0,80,742,1,0,0,0,82,746,1,0,0,0,84,762,1,0,0,0,86,773,1,0,0,0,88,780,
		1,0,0,0,90,782,1,0,0,0,92,799,1,0,0,0,94,801,1,0,0,0,96,803,1,0,0,0,98,
		805,1,0,0,0,100,858,1,0,0,0,102,880,1,0,0,0,104,882,1,0,0,0,106,885,1,
		0,0,0,108,906,1,0,0,0,110,912,1,0,0,0,112,923,1,0,0,0,114,927,1,0,0,0,
		116,938,1,0,0,0,118,942,1,0,0,0,120,946,1,0,0,0,122,957,1,0,0,0,124,127,
		3,8,4,0,125,127,5,2,0,0,126,124,1,0,0,0,126,125,1,0,0,0,127,130,1,0,0,
		0,128,126,1,0,0,0,128,129,1,0,0,0,129,138,1,0,0,0,130,128,1,0,0,0,131,
		135,3,10,5,0,132,134,5,2,0,0,133,132,1,0,0,0,134,137,1,0,0,0,135,133,1,
		0,0,0,135,136,1,0,0,0,136,139,1,0,0,0,137,135,1,0,0,0,138,131,1,0,0,0,
		138,139,1,0,0,0,139,140,1,0,0,0,140,141,3,2,1,0,141,142,5,0,0,1,142,1,
		1,0,0,0,143,146,3,4,2,0,144,146,3,6,3,0,145,143,1,0,0,0,145,144,1,0,0,
		0,146,3,1,0,0,0,147,150,3,16,8,0,148,150,5,2,0,0,149,147,1,0,0,0,149,148,
		1,0,0,0,150,153,1,0,0,0,151,149,1,0,0,0,151,152,1,0,0,0,152,5,1,0,0,0,
		153,151,1,0,0,0,154,158,3,82,41,0,155,157,5,2,0,0,156,155,1,0,0,0,157,
		160,1,0,0,0,158,156,1,0,0,0,158,159,1,0,0,0,159,165,1,0,0,0,160,158,1,
		0,0,0,161,164,3,82,41,0,162,164,5,2,0,0,163,161,1,0,0,0,163,162,1,0,0,
		0,164,167,1,0,0,0,165,163,1,0,0,0,165,166,1,0,0,0,166,7,1,0,0,0,167,165,
		1,0,0,0,168,170,5,80,0,0,169,168,1,0,0,0,169,170,1,0,0,0,170,171,1,0,0,
		0,171,172,5,5,0,0,172,177,3,12,6,0,173,174,5,64,0,0,174,176,3,12,6,0,175,
		173,1,0,0,0,176,179,1,0,0,0,177,175,1,0,0,0,177,178,1,0,0,0,178,210,1,
		0,0,0,179,177,1,0,0,0,180,182,5,80,0,0,181,180,1,0,0,0,181,182,1,0,0,0,
		182,183,1,0,0,0,183,184,5,5,0,0,184,185,5,9,0,0,185,190,3,12,6,0,186,187,
		5,64,0,0,187,189,3,12,6,0,188,186,1,0,0,0,189,192,1,0,0,0,190,188,1,0,
		0,0,190,191,1,0,0,0,191,210,1,0,0,0,192,190,1,0,0,0,193,195,5,80,0,0,194,
		193,1,0,0,0,194,195,1,0,0,0,195,196,1,0,0,0,196,197,5,5,0,0,197,198,5,
		133,0,0,198,199,5,122,0,0,199,206,3,12,6,0,200,201,5,64,0,0,201,202,5,
		133,0,0,202,203,5,122,0,0,203,205,3,12,6,0,204,200,1,0,0,0,205,208,1,0,
		0,0,206,204,1,0,0,0,206,207,1,0,0,0,207,210,1,0,0,0,208,206,1,0,0,0,209,
		169,1,0,0,0,209,181,1,0,0,0,209,194,1,0,0,0,210,9,1,0,0,0,211,212,5,6,
		0,0,212,213,3,12,6,0,213,11,1,0,0,0,214,219,5,133,0,0,215,216,5,66,0,0,
		216,218,5,133,0,0,217,215,1,0,0,0,218,221,1,0,0,0,219,217,1,0,0,0,219,
		220,1,0,0,0,220,13,1,0,0,0,221,219,1,0,0,0,222,231,5,62,0,0,223,226,5,
		2,0,0,224,226,3,16,8,0,225,223,1,0,0,0,225,224,1,0,0,0,226,229,1,0,0,0,
		227,225,1,0,0,0,227,228,1,0,0,0,228,232,1,0,0,0,229,227,1,0,0,0,230,232,
		3,74,37,0,231,227,1,0,0,0,231,230,1,0,0,0,232,233,1,0,0,0,233,234,5,63,
		0,0,234,15,1,0,0,0,235,236,6,8,-1,0,236,237,5,123,0,0,237,426,3,16,8,51,
		238,239,5,80,0,0,239,426,3,16,8,48,240,241,5,97,0,0,241,426,3,16,8,33,
		242,243,5,88,0,0,243,426,5,133,0,0,244,245,5,90,0,0,245,426,3,16,8,31,
		246,248,7,0,0,0,247,246,1,0,0,0,247,248,1,0,0,0,248,249,1,0,0,0,249,252,
		5,133,0,0,250,251,5,70,0,0,251,253,3,40,20,0,252,250,1,0,0,0,252,253,1,
		0,0,0,253,254,1,0,0,0,254,255,3,122,61,0,255,256,3,16,8,29,256,426,1,0,
		0,0,257,426,3,60,30,0,258,260,3,66,33,0,259,258,1,0,0,0,260,261,1,0,0,
		0,261,259,1,0,0,0,261,262,1,0,0,0,262,263,1,0,0,0,263,264,3,16,8,24,264,
		426,1,0,0,0,265,269,3,46,23,0,266,268,5,2,0,0,267,266,1,0,0,0,268,271,
		1,0,0,0,269,267,1,0,0,0,269,270,1,0,0,0,270,275,1,0,0,0,271,269,1,0,0,
		0,272,274,3,50,25,0,273,272,1,0,0,0,274,277,1,0,0,0,275,273,1,0,0,0,275,
		276,1,0,0,0,276,281,1,0,0,0,277,275,1,0,0,0,278,280,5,2,0,0,279,278,1,
		0,0,0,280,283,1,0,0,0,281,279,1,0,0,0,281,282,1,0,0,0,282,285,1,0,0,0,
		283,281,1,0,0,0,284,286,3,52,26,0,285,284,1,0,0,0,285,286,1,0,0,0,286,
		426,1,0,0,0,287,289,3,14,7,0,288,290,5,2,0,0,289,288,1,0,0,0,289,290,1,
		0,0,0,290,291,1,0,0,0,291,292,3,48,24,0,292,426,1,0,0,0,293,297,3,54,27,
		0,294,296,5,2,0,0,295,294,1,0,0,0,296,299,1,0,0,0,297,295,1,0,0,0,297,
		298,1,0,0,0,298,303,1,0,0,0,299,297,1,0,0,0,300,302,3,56,28,0,301,300,
		1,0,0,0,302,305,1,0,0,0,303,301,1,0,0,0,303,304,1,0,0,0,304,309,1,0,0,
		0,305,303,1,0,0,0,306,308,5,2,0,0,307,306,1,0,0,0,308,311,1,0,0,0,309,
		307,1,0,0,0,309,310,1,0,0,0,310,313,1,0,0,0,311,309,1,0,0,0,312,314,3,
		52,26,0,313,312,1,0,0,0,313,314,1,0,0,0,314,426,1,0,0,0,315,317,3,14,7,
		0,316,318,5,2,0,0,317,316,1,0,0,0,317,318,1,0,0,0,318,319,1,0,0,0,319,
		320,3,58,29,0,320,426,1,0,0,0,321,322,5,133,0,0,322,331,5,130,0,0,323,
		324,5,133,0,0,324,326,5,130,0,0,325,323,1,0,0,0,326,329,1,0,0,0,327,325,
		1,0,0,0,327,328,1,0,0,0,328,330,1,0,0,0,329,327,1,0,0,0,330,332,5,133,
		0,0,331,327,1,0,0,0,331,332,1,0,0,0,332,333,1,0,0,0,333,426,3,16,8,17,
		334,335,5,83,0,0,335,336,3,16,8,0,336,339,5,122,0,0,337,340,3,14,7,0,338,
		340,3,16,8,0,339,337,1,0,0,0,339,338,1,0,0,0,340,426,1,0,0,0,341,342,5,
		84,0,0,342,343,3,16,8,0,343,346,5,122,0,0,344,347,3,14,7,0,345,347,3,16,
		8,0,346,344,1,0,0,0,346,345,1,0,0,0,347,426,1,0,0,0,348,352,3,112,56,0,
		349,351,3,114,57,0,350,349,1,0,0,0,351,354,1,0,0,0,352,350,1,0,0,0,352,
		353,1,0,0,0,353,356,1,0,0,0,354,352,1,0,0,0,355,357,3,118,59,0,356,355,
		1,0,0,0,356,357,1,0,0,0,357,359,1,0,0,0,358,360,3,116,58,0,359,358,1,0,
		0,0,359,360,1,0,0,0,360,426,1,0,0,0,361,362,5,49,0,0,362,426,3,16,8,13,
		363,426,5,49,0,0,364,373,5,60,0,0,365,370,3,16,8,0,366,367,5,64,0,0,367,
		369,3,16,8,0,368,366,1,0,0,0,369,372,1,0,0,0,370,368,1,0,0,0,370,371,1,
		0,0,0,371,374,1,0,0,0,372,370,1,0,0,0,373,365,1,0,0,0,373,374,1,0,0,0,
		374,375,1,0,0,0,375,426,5,61,0,0,376,377,5,56,0,0,377,380,3,16,8,0,378,
		379,5,64,0,0,379,381,3,16,8,0,380,378,1,0,0,0,381,382,1,0,0,0,382,380,
		1,0,0,0,382,383,1,0,0,0,383,384,1,0,0,0,384,385,5,57,0,0,385,426,1,0,0,
		0,386,404,5,60,0,0,387,388,5,60,0,0,388,389,3,16,8,0,389,390,5,64,0,0,
		390,391,3,16,8,0,391,401,5,61,0,0,392,393,5,64,0,0,393,394,5,60,0,0,394,
		395,3,16,8,0,395,396,5,64,0,0,396,397,3,16,8,0,397,398,5,61,0,0,398,400,
		1,0,0,0,399,392,1,0,0,0,400,403,1,0,0,0,401,399,1,0,0,0,401,402,1,0,0,
		0,402,405,1,0,0,0,403,401,1,0,0,0,404,387,1,0,0,0,404,405,1,0,0,0,405,
		406,1,0,0,0,406,426,5,61,0,0,407,426,3,18,9,0,408,426,3,14,7,0,409,411,
		3,12,6,0,410,412,3,120,60,0,411,410,1,0,0,0,411,412,1,0,0,0,412,414,1,
		0,0,0,413,415,3,64,32,0,414,413,1,0,0,0,414,415,1,0,0,0,415,426,1,0,0,
		0,416,417,5,118,0,0,417,420,3,102,51,0,418,419,5,70,0,0,419,421,3,40,20,
		0,420,418,1,0,0,0,420,421,1,0,0,0,421,422,1,0,0,0,422,423,5,122,0,0,423,
		424,3,16,8,1,424,426,1,0,0,0,425,235,1,0,0,0,425,238,1,0,0,0,425,240,1,
		0,0,0,425,242,1,0,0,0,425,244,1,0,0,0,425,247,1,0,0,0,425,257,1,0,0,0,
		425,259,1,0,0,0,425,265,1,0,0,0,425,287,1,0,0,0,425,293,1,0,0,0,425,315,
		1,0,0,0,425,321,1,0,0,0,425,334,1,0,0,0,425,341,1,0,0,0,425,348,1,0,0,
		0,425,361,1,0,0,0,425,363,1,0,0,0,425,364,1,0,0,0,425,376,1,0,0,0,425,
		386,1,0,0,0,425,407,1,0,0,0,425,408,1,0,0,0,425,409,1,0,0,0,425,416,1,
		0,0,0,426,519,1,0,0,0,427,428,10,50,0,0,428,429,5,83,0,0,429,430,3,16,
		8,0,430,431,5,122,0,0,431,432,3,16,8,51,432,518,1,0,0,0,433,434,10,49,
		0,0,434,435,5,115,0,0,435,518,3,16,8,50,436,437,10,47,0,0,437,438,5,113,
		0,0,438,518,3,16,8,48,439,440,10,46,0,0,440,441,5,117,0,0,441,518,3,16,
		8,47,442,443,10,45,0,0,443,444,5,120,0,0,444,518,3,16,8,46,445,446,10,
		44,0,0,446,447,5,109,0,0,447,518,3,16,8,45,448,449,10,43,0,0,449,450,5,
		111,0,0,450,518,3,16,8,44,451,452,10,42,0,0,452,453,5,126,0,0,453,518,
		3,16,8,43,454,455,10,41,0,0,455,456,5,128,0,0,456,518,3,16,8,42,457,458,
		10,40,0,0,458,459,7,1,0,0,459,518,3,16,8,41,460,461,10,39,0,0,461,462,
		7,2,0,0,462,518,3,16,8,40,463,464,10,38,0,0,464,465,5,97,0,0,465,518,3,
		16,8,39,466,467,10,37,0,0,467,468,5,100,0,0,468,518,3,16,8,38,469,470,
		10,36,0,0,470,471,5,91,0,0,471,518,3,16,8,37,472,473,10,35,0,0,473,474,
		5,94,0,0,474,518,3,16,8,36,475,476,10,34,0,0,476,477,5,86,0,0,477,518,
		3,16,8,35,478,479,10,30,0,0,479,480,5,68,0,0,480,518,3,16,8,31,481,482,
		10,28,0,0,482,483,5,130,0,0,483,518,3,16,8,29,484,485,10,27,0,0,485,486,
		5,131,0,0,486,518,3,16,8,28,487,488,10,2,0,0,488,489,3,122,61,0,489,490,
		3,16,8,3,490,518,1,0,0,0,491,492,10,25,0,0,492,493,5,60,0,0,493,494,3,
		16,8,0,494,495,5,61,0,0,495,518,1,0,0,0,496,497,10,22,0,0,497,518,3,48,
		24,0,498,499,10,19,0,0,499,518,3,58,29,0,500,501,10,7,0,0,501,518,5,2,
		0,0,502,503,10,6,0,0,503,518,5,73,0,0,504,507,10,3,0,0,505,506,5,66,0,
		0,506,508,5,133,0,0,507,505,1,0,0,0,508,509,1,0,0,0,509,507,1,0,0,0,509,
		510,1,0,0,0,510,512,1,0,0,0,511,513,3,120,60,0,512,511,1,0,0,0,512,513,
		1,0,0,0,513,515,1,0,0,0,514,516,3,64,32,0,515,514,1,0,0,0,515,516,1,0,
		0,0,516,518,1,0,0,0,517,427,1,0,0,0,517,433,1,0,0,0,517,436,1,0,0,0,517,
		439,1,0,0,0,517,442,1,0,0,0,517,445,1,0,0,0,517,448,1,0,0,0,517,451,1,
		0,0,0,517,454,1,0,0,0,517,457,1,0,0,0,517,460,1,0,0,0,517,463,1,0,0,0,
		517,466,1,0,0,0,517,469,1,0,0,0,517,472,1,0,0,0,517,475,1,0,0,0,517,478,
		1,0,0,0,517,481,1,0,0,0,517,484,1,0,0,0,517,487,1,0,0,0,517,491,1,0,0,
		0,517,496,1,0,0,0,517,498,1,0,0,0,517,500,1,0,0,0,517,502,1,0,0,0,517,
		504,1,0,0,0,518,521,1,0,0,0,519,517,1,0,0,0,519,520,1,0,0,0,520,17,1,0,
		0,0,521,519,1,0,0,0,522,532,3,22,11,0,523,532,3,24,12,0,524,532,3,26,13,
		0,525,532,3,28,14,0,526,532,3,30,15,0,527,532,3,32,16,0,528,532,3,34,17,
		0,529,532,3,36,18,0,530,532,3,20,10,0,531,522,1,0,0,0,531,523,1,0,0,0,
		531,524,1,0,0,0,531,525,1,0,0,0,531,526,1,0,0,0,531,527,1,0,0,0,531,528,
		1,0,0,0,531,529,1,0,0,0,531,530,1,0,0,0,532,19,1,0,0,0,533,534,5,55,0,
		0,534,21,1,0,0,0,535,536,5,56,0,0,536,537,3,16,8,0,537,538,5,57,0,0,538,
		23,1,0,0,0,539,540,5,134,0,0,540,25,1,0,0,0,541,542,5,137,0,0,542,27,1,
		0,0,0,543,544,7,3,0,0,544,29,1,0,0,0,545,546,7,4,0,0,546,31,1,0,0,0,547,
		548,5,138,0,0,548,33,1,0,0,0,549,550,5,56,0,0,550,551,5,57,0,0,551,35,
		1,0,0,0,552,553,5,74,0,0,553,37,1,0,0,0,554,556,3,66,33,0,555,554,1,0,
		0,0,556,559,1,0,0,0,557,555,1,0,0,0,557,558,1,0,0,0,558,560,1,0,0,0,559,
		557,1,0,0,0,560,569,5,133,0,0,561,563,3,66,33,0,562,561,1,0,0,0,563,566,
		1,0,0,0,564,562,1,0,0,0,564,565,1,0,0,0,565,567,1,0,0,0,566,564,1,0,0,
		0,567,569,3,12,6,0,568,557,1,0,0,0,568,564,1,0,0,0,569,39,1,0,0,0,570,
		572,3,42,21,0,571,573,5,97,0,0,572,571,1,0,0,0,572,573,1,0,0,0,573,601,
		1,0,0,0,574,575,5,56,0,0,575,578,3,40,20,0,576,577,5,91,0,0,577,579,3,
		40,20,0,578,576,1,0,0,0,579,580,1,0,0,0,580,578,1,0,0,0,580,581,1,0,0,
		0,581,582,1,0,0,0,582,583,5,57,0,0,583,601,1,0,0,0,584,586,3,68,34,0,585,
		587,5,97,0,0,586,585,1,0,0,0,586,587,1,0,0,0,587,601,1,0,0,0,588,589,3,
		38,19,0,589,590,5,62,0,0,590,591,3,120,60,0,591,593,5,61,0,0,592,594,5,
		97,0,0,593,592,1,0,0,0,593,594,1,0,0,0,594,601,1,0,0,0,595,597,3,38,19,
		0,596,598,5,97,0,0,597,596,1,0,0,0,597,598,1,0,0,0,598,601,1,0,0,0,599,
		601,3,44,22,0,600,570,1,0,0,0,600,574,1,0,0,0,600,584,1,0,0,0,600,588,
		1,0,0,0,600,595,1,0,0,0,600,599,1,0,0,0,601,41,1,0,0,0,602,603,7,5,0,0,
		603,43,1,0,0,0,604,605,5,58,0,0,605,610,3,40,20,0,606,607,5,64,0,0,607,
		609,3,40,20,0,608,606,1,0,0,0,609,612,1,0,0,0,610,608,1,0,0,0,610,611,
		1,0,0,0,611,613,1,0,0,0,612,610,1,0,0,0,613,614,5,59,0,0,614,45,1,0,0,
		0,615,616,5,77,0,0,616,617,3,16,8,0,617,620,5,122,0,0,618,621,3,14,7,0,
		619,621,3,16,8,0,620,618,1,0,0,0,620,619,1,0,0,0,621,47,1,0,0,0,622,623,
		5,77,0,0,623,624,3,16,8,0,624,49,1,0,0,0,625,626,5,70,0,0,626,627,3,16,
		8,0,627,630,5,122,0,0,628,631,3,14,7,0,629,631,3,16,8,0,630,628,1,0,0,
		0,630,629,1,0,0,0,631,51,1,0,0,0,632,633,5,70,0,0,633,636,5,122,0,0,634,
		637,3,14,7,0,635,637,3,16,8,0,636,634,1,0,0,0,636,635,1,0,0,0,637,53,1,
		0,0,0,638,639,5,81,0,0,639,640,3,16,8,0,640,643,5,122,0,0,641,644,3,14,
		7,0,642,644,3,16,8,0,643,641,1,0,0,0,643,642,1,0,0,0,644,55,1,0,0,0,645,
		646,5,82,0,0,646,647,3,16,8,0,647,650,5,122,0,0,648,651,3,14,7,0,649,651,
		3,16,8,0,650,648,1,0,0,0,650,649,1,0,0,0,651,57,1,0,0,0,652,653,5,81,0,
		0,653,654,3,16,8,0,654,59,1,0,0,0,655,657,3,62,31,0,656,655,1,0,0,0,656,
		657,1,0,0,0,657,658,1,0,0,0,658,660,5,67,0,0,659,661,3,62,31,0,660,659,
		1,0,0,0,660,661,1,0,0,0,661,61,1,0,0,0,662,664,5,86,0,0,663,662,1,0,0,
		0,663,664,1,0,0,0,664,665,1,0,0,0,665,666,3,24,12,0,666,63,1,0,0,0,667,
		668,5,133,0,0,668,670,5,70,0,0,669,667,1,0,0,0,669,670,1,0,0,0,670,671,
		1,0,0,0,671,672,3,16,8,0,672,681,1,0,0,0,673,676,5,64,0,0,674,675,5,133,
		0,0,675,677,5,70,0,0,676,674,1,0,0,0,676,677,1,0,0,0,677,678,1,0,0,0,678,
		680,3,16,8,0,679,673,1,0,0,0,680,683,1,0,0,0,681,679,1,0,0,0,681,682,1,
		0,0,0,682,685,1,0,0,0,683,681,1,0,0,0,684,686,5,65,0,0,685,684,1,0,0,0,
		685,686,1,0,0,0,686,65,1,0,0,0,687,688,5,103,0,0,688,690,3,40,20,0,689,
		691,3,64,32,0,690,689,1,0,0,0,690,691,1,0,0,0,691,692,1,0,0,0,692,696,
		5,104,0,0,693,695,5,2,0,0,694,693,1,0,0,0,695,698,1,0,0,0,696,694,1,0,
		0,0,696,697,1,0,0,0,697,67,1,0,0,0,698,696,1,0,0,0,699,700,3,38,19,0,700,
		701,5,60,0,0,701,702,3,84,42,0,702,703,5,61,0,0,703,69,1,0,0,0,704,706,
		5,11,0,0,705,707,5,16,0,0,706,705,1,0,0,0,706,707,1,0,0,0,707,717,1,0,
		0,0,708,710,5,12,0,0,709,711,5,16,0,0,710,709,1,0,0,0,710,711,1,0,0,0,
		711,717,1,0,0,0,712,714,5,13,0,0,713,715,5,16,0,0,714,713,1,0,0,0,714,
		715,1,0,0,0,715,717,1,0,0,0,716,704,1,0,0,0,716,708,1,0,0,0,716,712,1,
		0,0,0,717,71,1,0,0,0,718,720,3,70,35,0,719,721,7,0,0,0,720,719,1,0,0,0,
		720,721,1,0,0,0,721,722,1,0,0,0,722,725,5,133,0,0,723,724,5,70,0,0,724,
		726,3,40,20,0,725,723,1,0,0,0,725,726,1,0,0,0,726,727,1,0,0,0,727,728,
		5,122,0,0,728,729,3,16,8,0,729,73,1,0,0,0,730,731,5,66,0,0,731,75,1,0,
		0,0,732,733,7,6,0,0,733,77,1,0,0,0,734,741,3,76,38,0,735,741,5,12,0,0,
		736,738,5,15,0,0,737,739,5,13,0,0,738,737,1,0,0,0,738,739,1,0,0,0,739,
		741,1,0,0,0,740,734,1,0,0,0,740,735,1,0,0,0,740,736,1,0,0,0,741,79,1,0,
		0,0,742,743,5,17,0,0,743,81,1,0,0,0,744,747,3,76,38,0,745,747,3,78,39,
		0,746,744,1,0,0,0,746,745,1,0,0,0,746,747,1,0,0,0,747,749,1,0,0,0,748,
		750,3,80,40,0,749,748,1,0,0,0,749,750,1,0,0,0,750,751,1,0,0,0,751,752,
		3,92,46,0,752,754,5,133,0,0,753,755,3,84,42,0,754,753,1,0,0,0,754,755,
		1,0,0,0,755,757,1,0,0,0,756,758,3,90,45,0,757,756,1,0,0,0,757,758,1,0,
		0,0,758,759,1,0,0,0,759,760,5,122,0,0,760,761,3,110,55,0,761,83,1,0,0,
		0,762,763,5,60,0,0,763,768,3,86,43,0,764,765,5,64,0,0,765,767,3,86,43,
		0,766,764,1,0,0,0,767,770,1,0,0,0,768,766,1,0,0,0,768,769,1,0,0,0,769,
		771,1,0,0,0,770,768,1,0,0,0,771,772,5,61,0,0,772,85,1,0,0,0,773,776,5,
		133,0,0,774,775,5,70,0,0,775,777,3,88,44,0,776,774,1,0,0,0,776,777,1,0,
		0,0,777,87,1,0,0,0,778,781,3,92,46,0,779,781,3,40,20,0,780,778,1,0,0,0,
		780,779,1,0,0,0,781,89,1,0,0,0,782,783,5,70,0,0,783,788,3,40,20,0,784,
		785,5,64,0,0,785,787,3,40,20,0,786,784,1,0,0,0,787,790,1,0,0,0,788,786,
		1,0,0,0,788,789,1,0,0,0,789,91,1,0,0,0,790,788,1,0,0,0,791,793,5,42,0,
		0,792,791,1,0,0,0,792,793,1,0,0,0,793,794,1,0,0,0,794,800,5,8,0,0,795,
		796,5,44,0,0,796,800,5,8,0,0,797,800,5,10,0,0,798,800,5,9,0,0,799,792,
		1,0,0,0,799,795,1,0,0,0,799,797,1,0,0,0,799,798,1,0,0,0,800,93,1,0,0,0,
		801,802,7,7,0,0,802,95,1,0,0,0,803,804,5,20,0,0,804,97,1,0,0,0,805,806,
		7,8,0,0,806,99,1,0,0,0,807,809,3,66,33,0,808,807,1,0,0,0,808,809,1,0,0,
		0,809,811,1,0,0,0,810,812,3,94,47,0,811,810,1,0,0,0,811,812,1,0,0,0,812,
		814,1,0,0,0,813,815,3,96,48,0,814,813,1,0,0,0,814,815,1,0,0,0,815,819,
		1,0,0,0,816,818,3,98,49,0,817,816,1,0,0,0,818,821,1,0,0,0,819,817,1,0,
		0,0,819,820,1,0,0,0,820,822,1,0,0,0,821,819,1,0,0,0,822,824,5,133,0,0,
		823,825,3,84,42,0,824,823,1,0,0,0,824,825,1,0,0,0,825,827,1,0,0,0,826,
		828,3,102,51,0,827,826,1,0,0,0,827,828,1,0,0,0,828,831,1,0,0,0,829,830,
		5,70,0,0,830,832,3,40,20,0,831,829,1,0,0,0,831,832,1,0,0,0,832,835,1,0,
		0,0,833,834,5,122,0,0,834,836,3,16,8,0,835,833,1,0,0,0,835,836,1,0,0,0,
		836,859,1,0,0,0,837,839,3,66,33,0,838,837,1,0,0,0,838,839,1,0,0,0,839,
		841,1,0,0,0,840,842,3,94,47,0,841,840,1,0,0,0,841,842,1,0,0,0,842,844,
		1,0,0,0,843,845,3,96,48,0,844,843,1,0,0,0,844,845,1,0,0,0,845,849,1,0,
		0,0,846,848,3,98,49,0,847,846,1,0,0,0,848,851,1,0,0,0,849,847,1,0,0,0,
		849,850,1,0,0,0,850,852,1,0,0,0,851,849,1,0,0,0,852,854,5,133,0,0,853,
		855,3,84,42,0,854,853,1,0,0,0,854,855,1,0,0,0,855,856,1,0,0,0,856,857,
		5,70,0,0,857,859,3,40,20,0,858,808,1,0,0,0,858,838,1,0,0,0,859,101,1,0,
		0,0,860,869,5,56,0,0,861,866,3,106,53,0,862,863,5,64,0,0,863,865,3,106,
		53,0,864,862,1,0,0,0,865,868,1,0,0,0,866,864,1,0,0,0,866,867,1,0,0,0,867,
		870,1,0,0,0,868,866,1,0,0,0,869,861,1,0,0,0,869,870,1,0,0,0,870,871,1,
		0,0,0,871,881,5,57,0,0,872,877,3,106,53,0,873,874,5,64,0,0,874,876,3,106,
		53,0,875,873,1,0,0,0,876,879,1,0,0,0,877,875,1,0,0,0,877,878,1,0,0,0,878,
		881,1,0,0,0,879,877,1,0,0,0,880,860,1,0,0,0,880,872,1,0,0,0,881,103,1,
		0,0,0,882,883,7,9,0,0,883,105,1,0,0,0,884,886,3,66,33,0,885,884,1,0,0,
		0,885,886,1,0,0,0,886,888,1,0,0,0,887,889,3,104,52,0,888,887,1,0,0,0,888,
		889,1,0,0,0,889,890,1,0,0,0,890,892,5,133,0,0,891,893,5,67,0,0,892,891,
		1,0,0,0,892,893,1,0,0,0,893,896,1,0,0,0,894,895,5,70,0,0,895,897,3,40,
		20,0,896,894,1,0,0,0,896,897,1,0,0,0,897,899,1,0,0,0,898,900,3,108,54,
		0,899,898,1,0,0,0,899,900,1,0,0,0,900,903,1,0,0,0,901,902,5,122,0,0,902,
		904,3,16,8,0,903,901,1,0,0,0,903,904,1,0,0,0,904,107,1,0,0,0,905,907,5,
		77,0,0,906,905,1,0,0,0,906,907,1,0,0,0,907,908,1,0,0,0,908,909,5,62,0,
		0,909,910,3,16,8,0,910,911,5,63,0,0,911,109,1,0,0,0,912,918,5,62,0,0,913,
		917,3,100,50,0,914,917,3,82,41,0,915,917,5,2,0,0,916,913,1,0,0,0,916,914,
		1,0,0,0,916,915,1,0,0,0,917,920,1,0,0,0,918,916,1,0,0,0,918,919,1,0,0,
		0,919,921,1,0,0,0,920,918,1,0,0,0,921,922,5,63,0,0,922,111,1,0,0,0,923,
		924,5,48,0,0,924,925,5,122,0,0,925,926,3,16,8,0,926,113,1,0,0,0,927,933,
		5,50,0,0,928,929,5,133,0,0,929,931,5,70,0,0,930,928,1,0,0,0,930,931,1,
		0,0,0,931,932,1,0,0,0,932,934,3,40,20,0,933,930,1,0,0,0,933,934,1,0,0,
		0,934,935,1,0,0,0,935,936,5,122,0,0,936,937,3,16,8,0,937,115,1,0,0,0,938,
		939,5,51,0,0,939,940,5,122,0,0,940,941,3,16,8,0,941,117,1,0,0,0,942,943,
		5,52,0,0,943,944,5,122,0,0,944,945,3,16,8,0,945,119,1,0,0,0,946,947,5,
		60,0,0,947,952,3,40,20,0,948,949,5,64,0,0,949,951,3,40,20,0,950,948,1,
		0,0,0,951,954,1,0,0,0,952,950,1,0,0,0,952,953,1,0,0,0,953,955,1,0,0,0,
		954,952,1,0,0,0,955,956,5,61,0,0,956,121,1,0,0,0,957,958,7,10,0,0,958,
		123,1,0,0,0,128,126,128,135,138,145,149,151,158,163,165,169,177,181,190,
		194,206,209,219,225,227,231,247,252,261,269,275,281,285,289,297,303,309,
		313,317,327,331,339,346,352,356,359,370,373,382,401,404,411,414,420,425,
		509,512,515,517,519,531,557,564,568,572,580,586,593,597,600,610,620,630,
		636,643,650,656,660,663,669,676,681,685,690,696,706,710,714,716,720,725,
		738,740,746,749,754,757,768,776,780,788,792,799,808,811,814,819,824,827,
		831,835,838,841,844,849,854,858,866,869,877,880,885,888,892,896,899,903,
		906,916,918,930,933,952
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace LoschScript.Parser
