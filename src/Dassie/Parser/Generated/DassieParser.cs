//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Jonas/source/repos/dassie/src/Dassie/Parser/DassieParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Dassie.Parser {

    #pragma warning disable CS0108

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class DassieParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Ws=1, NewLine=2, Single_Line_Comment=3, Delimited_Comment=4, Documentation_Comment=5, 
		Import=6, Export=7, Assembly=8, Type=9, Module=10, Template=11, Global=12, 
		Local=13, Internal=14, Static=15, Protected=16, Partial=17, Open=18, Closed=19, 
		Auto=20, Abstract=21, Extern=22, Inline=23, Ref=24, Var=25, Val=26, Base=27, 
		Override=28, Try=29, Raise=30, Catch=31, Finally=32, Fault=33, True=34, 
		False=35, This=36, Func=37, Func_Ampersand=38, Default=39, Literal=40, 
		Open_Paren=41, Close_Paren=42, Open_Paren_Bar=43, Bar_Close_Paren=44, 
		Open_Bracket=45, Close_Bracket=46, Open_Brace=47, Close_Brace=48, Comma=49, 
		Double_Comma=50, Dot=51, Double_Dot=52, Double_Dot_Question_Mark=53, Dot_Equals=54, 
		Colon=55, Colon_Greater_Than=56, Less_Than_Colon=57, Less_Than_Question_Mark_Colon=58, 
		Double_Colon=59, Triple_Colon=60, Colon_Question_Mark=61, Semicolon=62, 
		Underscore=63, Single_Quote=64, Double_Quote=65, Question_Mark=66, Double_Question_Mark=67, 
		Double_Question_Mark_Equals=68, Exclamation_Mark=69, Exclamation_Question=70, 
		Exclamation_Colon=71, At_Sign=72, At_Open_Bracket=73, Exclamation_At=74, 
		Dollar_Sign=75, Caret=76, Caret_Equals=77, Caret_Backslash=78, Percent_Caret=79, 
		Dollar_Backslash=80, Bar=81, Bar_GreaterThan=82, LessThan_Bar=83, Double_Bar=84, 
		Bar_Equals=85, Double_Bar_Equals=86, Ampersand=87, Ampersand_Greater=88, 
		Less_Ampersand=89, Double_Ampersand=90, Double_Ampersand_Equals=91, Ampersand_Equals=92, 
		Less_Than=93, Greater_Than=94, Less_Equals=95, Greater_Equals=96, Double_Equals=97, 
		Exclamation_Equals=98, Plus=99, Plus_Equals=100, Minus=101, Minus_Equals=102, 
		Asterisk=103, Asterisk_Equals=104, Double_Asterisk=105, Double_Asterisk_Equals=106, 
		Slash=107, Backslash=108, Slash_Equals=109, Percent=110, Double_Percent=111, 
		Percent_Equals=112, Double_Percent_Equals=113, Equals=114, Equals_Greater=115, 
		Tilde=116, Double_Tilde=117, Tilde_Equals=118, Double_Less_Than=119, Double_Less_Than_Equals=120, 
		Double_Greater_Than=121, Double_Greater_Than_Equals=122, Arrow_Right=123, 
		Arrow_Left=124, Backtick=125, Identifier=126, Integer_Literal=127, Hex_Integer_Literal=128, 
		Binary_Integer_Literal=129, Real_Literal=130, Character_Literal=131, String_Literal=132, 
		Verbatim_String_Literal=133, Custom_Operator=134;
	public const int
		RULE_compilation_unit = 0, RULE_file_body = 1, RULE_top_level_statements = 2, 
		RULE_full_program = 3, RULE_import_directive = 4, RULE_export_directive = 5, 
		RULE_full_identifier = 6, RULE_code_block = 7, RULE_expression = 8, RULE_atom = 9, 
		RULE_this_atom = 10, RULE_expression_atom = 11, RULE_integer_atom = 12, 
		RULE_real_atom = 13, RULE_boolean_atom = 14, RULE_string_atom = 15, RULE_character_atom = 16, 
		RULE_empty_atom = 17, RULE_wildcard_atom = 18, RULE_identifier_atom = 19, 
		RULE_type_name = 20, RULE_array_type_specifier = 21, RULE_if_branch = 22, 
		RULE_postfix_if_branch = 23, RULE_elif_branch = 24, RULE_else_branch = 25, 
		RULE_unless_branch = 26, RULE_else_unless_branch = 27, RULE_postfix_unless_branch = 28, 
		RULE_arglist = 29, RULE_attribute = 30, RULE_generic_identifier = 31, 
		RULE_field_access_modifier = 32, RULE_field_declaration = 33, RULE_placeholder = 34, 
		RULE_type_access_modifier = 35, RULE_nested_type_access_modifier = 36, 
		RULE_type_special_modifier = 37, RULE_type = 38, RULE_type_parameter_list = 39, 
		RULE_type_parameter = 40, RULE_type_parameter_attribute = 41, RULE_type_parameter_variance = 42, 
		RULE_inheritance_list = 43, RULE_type_kind = 44, RULE_member_access_modifier = 45, 
		RULE_member_oop_modifier = 46, RULE_member_special_modifier = 47, RULE_type_member = 48, 
		RULE_access_modifier_member_group = 49, RULE_parameter_list = 50, RULE_parameter_modifier = 51, 
		RULE_parameter = 52, RULE_parameter_constraint = 53, RULE_type_block = 54, 
		RULE_try_branch = 55, RULE_catch_branch = 56, RULE_finally_branch = 57, 
		RULE_fault_branch = 58, RULE_type_arg_list = 59, RULE_assignment_operator = 60, 
		RULE_function_pointer_parameter_list = 61, RULE_match_expr = 62, RULE_match_block = 63, 
		RULE_match_first_case = 64, RULE_match_alternative_case = 65, RULE_match_default_case = 66, 
		RULE_match_case_expression = 67, RULE_local_function = 68;
	public static readonly string[] ruleNames = {
		"compilation_unit", "file_body", "top_level_statements", "full_program", 
		"import_directive", "export_directive", "full_identifier", "code_block", 
		"expression", "atom", "this_atom", "expression_atom", "integer_atom", 
		"real_atom", "boolean_atom", "string_atom", "character_atom", "empty_atom", 
		"wildcard_atom", "identifier_atom", "type_name", "array_type_specifier", 
		"if_branch", "postfix_if_branch", "elif_branch", "else_branch", "unless_branch", 
		"else_unless_branch", "postfix_unless_branch", "arglist", "attribute", 
		"generic_identifier", "field_access_modifier", "field_declaration", "placeholder", 
		"type_access_modifier", "nested_type_access_modifier", "type_special_modifier", 
		"type", "type_parameter_list", "type_parameter", "type_parameter_attribute", 
		"type_parameter_variance", "inheritance_list", "type_kind", "member_access_modifier", 
		"member_oop_modifier", "member_special_modifier", "type_member", "access_modifier_member_group", 
		"parameter_list", "parameter_modifier", "parameter", "parameter_constraint", 
		"type_block", "try_branch", "catch_branch", "finally_branch", "fault_branch", 
		"type_arg_list", "assignment_operator", "function_pointer_parameter_list", 
		"match_expr", "match_block", "match_first_case", "match_alternative_case", 
		"match_default_case", "match_case_expression", "local_function"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'import'", "'export'", "'assembly'", 
		"'type'", "'module'", "'template'", "'global'", "'local'", "'internal'", 
		"'static'", "'protected'", "'partial'", "'open'", "'closed'", "'auto'", 
		"'abstract'", "'extern'", "'inline'", "'ref'", "'var'", "'val'", "'base'", 
		"'override'", "'try'", "'throw'", "'catch'", "'finally'", "'fault'", "'true'", 
		"'false'", "'this'", "'func'", "'func&'", "'default'", "'literal'", "'('", 
		"')'", "'(|'", "'|)'", "'['", "']'", "'{'", "'}'", "','", "',,'", "'.'", 
		"'..'", "'..?'", "'.='", "':'", "':>'", "'<:'", "'<?:'", "'::'", "':::'", 
		"':?'", "';'", "'_'", "'''", "'\"'", "'?'", "'??'", "'??='", "'!'", "'!?'", 
		"'!:'", "'@'", "'@['", "'!@'", "'$'", "'^'", "'^='", "'^\\'", "'%^'", 
		"'$\\'", "'|'", "'|>'", "'<|'", "'||'", "'|='", "'||='", "'&'", "'&>'", 
		"'<&'", "'&&'", "'&&='", "'&='", "'<'", "'>'", "'<='", "'>='", "'=='", 
		"'!='", "'+'", "'+='", "'-'", "'-='", "'*'", "'*='", "'**'", "'**='", 
		"'/'", "'\\'", "'/='", "'%'", "'%%'", "'%='", "'%%='", "'='", "'=>'", 
		"'~'", "'~~'", "'~='", "'<<'", "'<<='", "'>>'", "'>>='", "'->'", "'<-'", 
		"'`'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Ws", "NewLine", "Single_Line_Comment", "Delimited_Comment", "Documentation_Comment", 
		"Import", "Export", "Assembly", "Type", "Module", "Template", "Global", 
		"Local", "Internal", "Static", "Protected", "Partial", "Open", "Closed", 
		"Auto", "Abstract", "Extern", "Inline", "Ref", "Var", "Val", "Base", "Override", 
		"Try", "Raise", "Catch", "Finally", "Fault", "True", "False", "This", 
		"Func", "Func_Ampersand", "Default", "Literal", "Open_Paren", "Close_Paren", 
		"Open_Paren_Bar", "Bar_Close_Paren", "Open_Bracket", "Close_Bracket", 
		"Open_Brace", "Close_Brace", "Comma", "Double_Comma", "Dot", "Double_Dot", 
		"Double_Dot_Question_Mark", "Dot_Equals", "Colon", "Colon_Greater_Than", 
		"Less_Than_Colon", "Less_Than_Question_Mark_Colon", "Double_Colon", "Triple_Colon", 
		"Colon_Question_Mark", "Semicolon", "Underscore", "Single_Quote", "Double_Quote", 
		"Question_Mark", "Double_Question_Mark", "Double_Question_Mark_Equals", 
		"Exclamation_Mark", "Exclamation_Question", "Exclamation_Colon", "At_Sign", 
		"At_Open_Bracket", "Exclamation_At", "Dollar_Sign", "Caret", "Caret_Equals", 
		"Caret_Backslash", "Percent_Caret", "Dollar_Backslash", "Bar", "Bar_GreaterThan", 
		"LessThan_Bar", "Double_Bar", "Bar_Equals", "Double_Bar_Equals", "Ampersand", 
		"Ampersand_Greater", "Less_Ampersand", "Double_Ampersand", "Double_Ampersand_Equals", 
		"Ampersand_Equals", "Less_Than", "Greater_Than", "Less_Equals", "Greater_Equals", 
		"Double_Equals", "Exclamation_Equals", "Plus", "Plus_Equals", "Minus", 
		"Minus_Equals", "Asterisk", "Asterisk_Equals", "Double_Asterisk", "Double_Asterisk_Equals", 
		"Slash", "Backslash", "Slash_Equals", "Percent", "Double_Percent", "Percent_Equals", 
		"Double_Percent_Equals", "Equals", "Equals_Greater", "Tilde", "Double_Tilde", 
		"Tilde_Equals", "Double_Less_Than", "Double_Less_Than_Equals", "Double_Greater_Than", 
		"Double_Greater_Than_Equals", "Arrow_Right", "Arrow_Left", "Backtick", 
		"Identifier", "Integer_Literal", "Hex_Integer_Literal", "Binary_Integer_Literal", 
		"Real_Literal", "Character_Literal", "String_Literal", "Verbatim_String_Literal", 
		"Custom_Operator"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DassieParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static DassieParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DassieParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DassieParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Compilation_unitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public File_bodyContext file_body() {
			return GetRuleContext<File_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(DassieParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Import_directiveContext[] import_directive() {
			return GetRuleContexts<Import_directiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Import_directiveContext import_directive(int i) {
			return GetRuleContext<Import_directiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(DassieParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(DassieParser.NewLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Export_directiveContext export_directive() {
			return GetRuleContext<Export_directiveContext>(0);
		}
		public Compilation_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilation_unit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterCompilation_unit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitCompilation_unit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilation_unit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compilation_unitContext compilation_unit() {
		Compilation_unitContext _localctx = new Compilation_unitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilation_unit);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 140;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case Import:
					case Exclamation_Mark:
						{
						State = 138;
						import_directive();
						}
						break;
					case NewLine:
						{
						State = 139;
						Match(NewLine);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 144;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 152;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Export) {
				{
				State = 145;
				export_directive();
				State = 149;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 146;
						Match(NewLine);
						}
						} 
					}
					State = 151;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
				}
				}
			}

			State = 154;
			file_body();
			State = 155;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementsContext top_level_statements() {
			return GetRuleContext<Top_level_statementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Full_programContext full_program() {
			return GetRuleContext<Full_programContext>(0);
		}
		public File_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterFile_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitFile_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public File_bodyContext file_body() {
		File_bodyContext _localctx = new File_bodyContext(Context, State);
		EnterRule(_localctx, 2, RULE_file_body);
		try {
			State = 159;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 157;
				top_level_statements();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 158;
				full_program();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_level_statementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Local_functionContext[] local_function() {
			return GetRuleContexts<Local_functionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Local_functionContext local_function(int i) {
			return GetRuleContext<Local_functionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(DassieParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(DassieParser.NewLine, i);
		}
		public Top_level_statementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_level_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterTop_level_statements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitTop_level_statements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_level_statements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Top_level_statementsContext top_level_statements() {
		Top_level_statementsContext _localctx = new Top_level_statementsContext(Context, State);
		EnterRule(_localctx, 4, RULE_top_level_statements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9218689782056484860L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & -1151795604551084071L) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & 31L) != 0)) {
				{
				State = 164;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
				case 1:
					{
					State = 161;
					expression(0);
					}
					break;
				case 2:
					{
					State = 162;
					local_function();
					}
					break;
				case 3:
					{
					State = 163;
					Match(NewLine);
					}
					break;
				}
				}
				State = 168;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Full_programContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(DassieParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(DassieParser.NewLine, i);
		}
		public Full_programContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_full_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterFull_program(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitFull_program(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFull_program(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Full_programContext full_program() {
		Full_programContext _localctx = new Full_programContext(Context, State);
		EnterRule(_localctx, 6, RULE_full_program);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 169;
			type();
			State = 173;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 170;
					Match(NewLine);
					}
					} 
				}
				State = 175;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			State = 180;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 84246020L) != 0) || _la==Less_Than) {
				{
				State = 178;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Type:
				case Module:
				case Template:
				case Global:
				case Local:
				case Internal:
				case Protected:
				case Open:
				case Ref:
				case Val:
				case Less_Than:
					{
					State = 176;
					type();
					}
					break;
				case NewLine:
					{
					State = 177;
					Match(NewLine);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 182;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_directiveContext : ParserRuleContext {
		public Import_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_directive; } }
	 
		public Import_directiveContext() { }
		public virtual void CopyFrom(Import_directiveContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Basic_importContext : Import_directiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Import() { return GetToken(DassieParser.Import, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Full_identifierContext[] full_identifier() {
			return GetRuleContexts<Full_identifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Full_identifierContext full_identifier(int i) {
			return GetRuleContext<Full_identifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation_Mark() { return GetToken(DassieParser.Exclamation_Mark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(DassieParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(DassieParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(DassieParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(DassieParser.NewLine, i);
		}
		public Basic_importContext(Import_directiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterBasic_import(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitBasic_import(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasic_import(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AliasContext : Import_directiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Import() { return GetToken(DassieParser.Import, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(DassieParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(DassieParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Equals() { return GetTokens(DassieParser.Equals); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals(int i) {
			return GetToken(DassieParser.Equals, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Full_identifierContext[] full_identifier() {
			return GetRuleContexts<Full_identifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Full_identifierContext full_identifier(int i) {
			return GetRuleContext<Full_identifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation_Mark() { return GetToken(DassieParser.Exclamation_Mark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(DassieParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(DassieParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(DassieParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(DassieParser.NewLine, i);
		}
		public AliasContext(Import_directiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Import_directiveContext import_directive() {
		Import_directiveContext _localctx = new Import_directiveContext(Context, State);
		EnterRule(_localctx, 8, RULE_import_directive);
		int _la;
		try {
			State = 223;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				_localctx = new Basic_importContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 184;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Exclamation_Mark) {
					{
					State = 183;
					Match(Exclamation_Mark);
					}
				}

				State = 186;
				Match(Import);
				State = 187;
				full_identifier();
				State = 198;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 188;
					Match(Comma);
					State = 192;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NewLine) {
						{
						{
						State = 189;
						Match(NewLine);
						}
						}
						State = 194;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 195;
					full_identifier();
					}
					}
					State = 200;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new AliasContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 202;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Exclamation_Mark) {
					{
					State = 201;
					Match(Exclamation_Mark);
					}
				}

				State = 204;
				Match(Import);
				State = 205;
				Match(Identifier);
				State = 206;
				Match(Equals);
				State = 207;
				full_identifier();
				State = 220;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 208;
					Match(Comma);
					State = 212;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NewLine) {
						{
						{
						State = 209;
						Match(NewLine);
						}
						}
						State = 214;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 215;
					Match(Identifier);
					State = 216;
					Match(Equals);
					State = 217;
					full_identifier();
					}
					}
					State = 222;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Export_directiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Export() { return GetToken(DassieParser.Export, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Full_identifierContext full_identifier() {
			return GetRuleContext<Full_identifierContext>(0);
		}
		public Export_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_export_directive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterExport_directive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitExport_directive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExport_directive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Export_directiveContext export_directive() {
		Export_directiveContext _localctx = new Export_directiveContext(Context, State);
		EnterRule(_localctx, 10, RULE_export_directive);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			Match(Export);
			State = 226;
			full_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Full_identifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(DassieParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(DassieParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dot() { return GetTokens(DassieParser.Dot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot(int i) {
			return GetToken(DassieParser.Dot, i);
		}
		public Full_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_full_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterFull_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitFull_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFull_identifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Full_identifierContext full_identifier() {
		Full_identifierContext _localctx = new Full_identifierContext(Context, State);
		EnterRule(_localctx, 12, RULE_full_identifier);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 228;
			Match(Identifier);
			State = 233;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 229;
					Match(Dot);
					State = 230;
					Match(Identifier);
					}
					} 
				}
				State = 235;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Code_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Brace() { return GetToken(DassieParser.Open_Brace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Brace() { return GetToken(DassieParser.Close_Brace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PlaceholderContext placeholder() {
			return GetRuleContext<PlaceholderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(DassieParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(DassieParser.NewLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Code_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterCode_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitCode_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCode_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Code_blockContext code_block() {
		Code_blockContext _localctx = new Code_blockContext(Context, State);
		EnterRule(_localctx, 14, RULE_code_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236;
			Match(Open_Brace);
			State = 245;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NewLine:
			case Var:
			case Val:
			case Try:
			case Raise:
			case True:
			case False:
			case This:
			case Func:
			case Func_Ampersand:
			case Open_Paren:
			case Open_Bracket:
			case Open_Brace:
			case Close_Brace:
			case Double_Dot:
			case Underscore:
			case Question_Mark:
			case Exclamation_Mark:
			case Exclamation_Question:
			case At_Sign:
			case At_Open_Bracket:
			case Exclamation_At:
			case Dollar_Sign:
			case Caret:
			case Caret_Backslash:
			case Dollar_Backslash:
			case Ampersand:
			case Ampersand_Greater:
			case Less_Ampersand:
			case Less_Than:
			case Tilde:
			case Identifier:
			case Integer_Literal:
			case Hex_Integer_Literal:
			case Binary_Integer_Literal:
			case Real_Literal:
			case Character_Literal:
			case String_Literal:
			case Verbatim_String_Literal:
			case Custom_Operator:
				{
				State = 241;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9218689782056484860L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & -1151795604551084071L) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & 31L) != 0)) {
					{
					State = 239;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case NewLine:
						{
						State = 237;
						Match(NewLine);
						}
						break;
					case Var:
					case Val:
					case Try:
					case Raise:
					case True:
					case False:
					case This:
					case Func:
					case Func_Ampersand:
					case Open_Paren:
					case Open_Bracket:
					case Open_Brace:
					case Double_Dot:
					case Underscore:
					case Question_Mark:
					case Exclamation_Mark:
					case Exclamation_Question:
					case At_Sign:
					case At_Open_Bracket:
					case Exclamation_At:
					case Dollar_Sign:
					case Caret:
					case Caret_Backslash:
					case Dollar_Backslash:
					case Ampersand:
					case Ampersand_Greater:
					case Less_Ampersand:
					case Less_Than:
					case Tilde:
					case Identifier:
					case Integer_Literal:
					case Hex_Integer_Literal:
					case Binary_Integer_Literal:
					case Real_Literal:
					case Character_Literal:
					case String_Literal:
					case Verbatim_String_Literal:
					case Custom_Operator:
						{
						State = 238;
						expression(0);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 243;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case Dot:
				{
				State = 244;
				placeholder();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 247;
			Match(Close_Brace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Function_pointer_expressionContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public Function_pointer_parameter_listContext function_pointer_parameter_list() {
			return GetRuleContext<Function_pointer_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Func() { return GetToken(DassieParser.Func, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Func_Ampersand() { return GetToken(DassieParser.Func_Ampersand, 0); }
		public Function_pointer_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterFunction_pointer_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitFunction_pointer_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_pointer_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Subtraction_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(DassieParser.Minus, 0); }
		public Subtraction_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterSubtraction_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitSubtraction_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtraction_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Bitwise_complement_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tilde() { return GetToken(DassieParser.Tilde, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Bitwise_complement_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterBitwise_complement_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitBitwise_complement_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwise_complement_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Right_pipe_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Arrow_Right() { return GetToken(DassieParser.Arrow_Right, 0); }
		public Right_pipe_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterRight_pipe_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitRight_pipe_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRight_pipe_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Array_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode At_Open_Bracket() { return GetToken(DassieParser.At_Open_Bracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Bracket() { return GetToken(DassieParser.Close_Bracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(DassieParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(DassieParser.Comma, i);
		}
		public Array_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterArray_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitArray_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Multiply_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Asterisk() { return GetToken(DassieParser.Asterisk, 0); }
		public Multiply_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterMultiply_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitMultiply_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiply_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Logical_or_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Double_Bar() { return GetTokens(DassieParser.Double_Bar); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Bar(int i) {
			return GetToken(DassieParser.Double_Bar, i);
		}
		public Logical_or_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterLogical_or_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitLogical_or_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_or_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Open_ended_range_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Dot() { return GetToken(DassieParser.Double_Dot, 0); }
		public Open_ended_range_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterOpen_ended_range_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitOpen_ended_range_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpen_ended_range_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Raise_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Raise() { return GetToken(DassieParser.Raise, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Raise_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterRaise_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitRaise_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaise_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class And_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ampersand() { return GetToken(DassieParser.Ampersand, 0); }
		public And_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterAnd_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitAnd_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Newlined_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine() { return GetToken(DassieParser.NewLine, 0); }
		public Newlined_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterNewlined_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitNewlined_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewlined_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Closed_ended_range_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Dot() { return GetToken(DassieParser.Double_Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Closed_ended_range_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterClosed_ended_range_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitClosed_ended_range_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClosed_ended_range_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Foreach_loopContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode At_Sign() { return GetToken(DassieParser.At_Sign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(DassieParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(DassieParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon_Greater_Than() { return GetToken(DassieParser.Colon_Greater_Than, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Paren() { return GetToken(DassieParser.Open_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(DassieParser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Paren() { return GetToken(DassieParser.Close_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Var() { return GetTokens(DassieParser.Var); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Var(int i) {
			return GetToken(DassieParser.Var, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Val() { return GetTokens(DassieParser.Val); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Val(int i) {
			return GetToken(DassieParser.Val, i);
		}
		public Foreach_loopContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterForeach_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitForeach_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeach_loop(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Postfix_unless_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Postfix_unless_branchContext postfix_unless_branch() {
			return GetRuleContext<Postfix_unless_branchContext>(0);
		}
		public Postfix_unless_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterPostfix_unless_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitPostfix_unless_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfix_unless_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Delimited_range_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Dot() { return GetToken(DassieParser.Double_Dot, 0); }
		public Delimited_range_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterDelimited_range_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitDelimited_range_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelimited_range_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Power_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Asterisk() { return GetToken(DassieParser.Double_Asterisk, 0); }
		public Power_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterPower_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitPower_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPower_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Conversion_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less_Than_Colon() { return GetToken(DassieParser.Less_Than_Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Conversion_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterConversion_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitConversion_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConversion_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Range_index_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Caret() { return GetToken(DassieParser.Caret, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Integer_atomContext integer_atom() {
			return GetRuleContext<Integer_atomContext>(0);
		}
		public Range_index_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterRange_index_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitRange_index_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange_index_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Addition_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(DassieParser.Plus, 0); }
		public Addition_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterAddition_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitAddition_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddition_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Atom_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public Atom_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterAtom_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitAtom_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Index_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Colon() { return GetToken(DassieParser.Double_Colon, 0); }
		public Index_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterIndex_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitIndex_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Safe_conversion_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less_Than_Question_Mark_Colon() { return GetToken(DassieParser.Less_Than_Question_Mark_Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Safe_conversion_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterSafe_conversion_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitSafe_conversion_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSafe_conversion_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Comparison_expressionContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less_Than() { return GetToken(DassieParser.Less_Than, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less_Equals() { return GetToken(DassieParser.Less_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater_Than() { return GetToken(DassieParser.Greater_Than, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater_Equals() { return GetToken(DassieParser.Greater_Equals, 0); }
		public Comparison_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterComparison_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitComparison_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Or_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bar() { return GetToken(DassieParser.Bar, 0); }
		public Or_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterOr_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitOr_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Try_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Try_branchContext try_branch() {
			return GetRuleContext<Try_branchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Catch_branchContext[] catch_branch() {
			return GetRuleContexts<Catch_branchContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Catch_branchContext catch_branch(int i) {
			return GetRuleContext<Catch_branchContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fault_branchContext fault_branch() {
			return GetRuleContext<Fault_branchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Finally_branchContext finally_branch() {
			return GetRuleContext<Finally_branchContext>(0);
		}
		public Try_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterTry_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitTry_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTry_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class List_initializer_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Bracket() { return GetToken(DassieParser.Open_Bracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Bracket() { return GetToken(DassieParser.Close_Bracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(DassieParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(DassieParser.Comma, i);
		}
		public List_initializer_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterList_initializer_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitList_initializer_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList_initializer_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Left_shift_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Less_Than() { return GetToken(DassieParser.Double_Less_Than, 0); }
		public Left_shift_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterLeft_shift_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitLeft_shift_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeft_shift_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Match_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Match_exprContext match_expr() {
			return GetRuleContext<Match_exprContext>(0);
		}
		public Match_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterMatch_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitMatch_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatch_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Custom_operator_unary_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Custom_Operator() { return GetToken(DassieParser.Custom_Operator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Custom_operator_unary_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterCustom_operator_unary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitCustom_operator_unary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCustom_operator_unary_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Attributed_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public Attributed_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterAttributed_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitAttributed_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributed_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Modulus_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Percent() { return GetToken(DassieParser.Double_Percent, 0); }
		public Modulus_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterModulus_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitModulus_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModulus_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Equality_expressionContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Equals() { return GetToken(DassieParser.Double_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation_Equals() { return GetToken(DassieParser.Exclamation_Equals, 0); }
		public Equality_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterEquality_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitEquality_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Until_loopContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation_At() { return GetToken(DassieParser.Exclamation_At, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		public Until_loopContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterUntil_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitUntil_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUntil_loop(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class While_loopContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode At_Sign() { return GetToken(DassieParser.At_Sign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		public While_loopContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterWhile_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitWhile_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_loop(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Xor_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Caret() { return GetToken(DassieParser.Caret, 0); }
		public Xor_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterXor_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitXor_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXor_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Prefix_if_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public If_branchContext if_branch() {
			return GetRuleContext<If_branchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(DassieParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(DassieParser.NewLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Elif_branchContext[] elif_branch() {
			return GetRuleContexts<Elif_branchContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Elif_branchContext elif_branch(int i) {
			return GetRuleContext<Elif_branchContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_branchContext else_branch() {
			return GetRuleContext<Else_branchContext>(0);
		}
		public Prefix_if_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterPrefix_if_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitPrefix_if_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefix_if_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Logical_negation_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation_Mark() { return GetToken(DassieParser.Exclamation_Mark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Logical_negation_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterLogical_negation_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitLogical_negation_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_negation_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Right_shift_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Greater_Than() { return GetToken(DassieParser.Double_Greater_Than, 0); }
		public Right_shift_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterRight_shift_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitRight_shift_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRight_shift_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Anonymous_function_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_listContext parameter_list() {
			return GetRuleContext<Parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals_Greater() { return GetToken(DassieParser.Equals_Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(DassieParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Anonymous_function_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterAnonymous_function_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitAnonymous_function_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymous_function_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Rethrow_exceptionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Raise() { return GetToken(DassieParser.Raise, 0); }
		public Rethrow_exceptionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterRethrow_exception(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitRethrow_exception(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRethrow_exception(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Separated_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(DassieParser.Semicolon, 0); }
		public Separated_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterSeparated_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitSeparated_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeparated_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Member_access_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dot() { return GetTokens(DassieParser.Dot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot(int i) {
			return GetToken(DassieParser.Dot, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(DassieParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(DassieParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_arg_listContext type_arg_list() {
			return GetRuleContext<Type_arg_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArglistContext arglist() {
			return GetRuleContext<ArglistContext>(0);
		}
		public Member_access_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterMember_access_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitMember_access_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_access_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Custom_operator_binary_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Custom_Operator() { return GetToken(DassieParser.Custom_Operator, 0); }
		public Custom_operator_binary_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterCustom_operator_binary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitCustom_operator_binary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCustom_operator_binary_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Remainder_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Percent() { return GetToken(DassieParser.Percent, 0); }
		public Remainder_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterRemainder_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitRemainder_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemainder_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Typeof_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Caret_Backslash() { return GetToken(DassieParser.Caret_Backslash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Typeof_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterTypeof_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitTypeof_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeof_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Block_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		public Block_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterBlock_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitBlock_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Full_range_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Dot() { return GetToken(DassieParser.Double_Dot, 0); }
		public Full_range_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterFull_range_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitFull_range_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFull_range_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Left_pipe_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Arrow_Left() { return GetToken(DassieParser.Arrow_Left, 0); }
		public Left_pipe_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterLeft_pipe_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitLeft_pipe_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeft_pipe_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Dictionary_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Open_Bracket() { return GetTokens(DassieParser.Open_Bracket); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Bracket(int i) {
			return GetToken(DassieParser.Open_Bracket, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Close_Bracket() { return GetTokens(DassieParser.Close_Bracket); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Bracket(int i) {
			return GetToken(DassieParser.Close_Bracket, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(DassieParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(DassieParser.Comma, i);
		}
		public Dictionary_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterDictionary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitDictionary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictionary_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public AssignmentContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Prefix_unless_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unless_branchContext unless_branch() {
			return GetRuleContext<Unless_branchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(DassieParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(DassieParser.NewLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_unless_branchContext[] else_unless_branch() {
			return GetRuleContexts<Else_unless_branchContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_unless_branchContext else_unless_branch(int i) {
			return GetRuleContext<Else_unless_branchContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_branchContext else_branch() {
			return GetRuleContext<Else_branchContext>(0);
		}
		public Prefix_unless_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterPrefix_unless_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitPrefix_unless_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefix_unless_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Isinstance_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon_Question_Mark() { return GetToken(DassieParser.Colon_Question_Mark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Isinstance_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterIsinstance_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitIsinstance_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsinstance_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Local_declaration_or_assignmentContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(DassieParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(DassieParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Var() { return GetToken(DassieParser.Var, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Val() { return GetToken(DassieParser.Val, 0); }
		public Local_declaration_or_assignmentContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterLocal_declaration_or_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitLocal_declaration_or_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_declaration_or_assignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Tuple_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Paren() { return GetToken(DassieParser.Open_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Paren() { return GetToken(DassieParser.Close_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(DassieParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(DassieParser.Comma, i);
		}
		public Tuple_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterTuple_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitTuple_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTuple_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Nameof_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dollar_Backslash() { return GetToken(DassieParser.Dollar_Backslash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Nameof_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterNameof_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitNameof_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameof_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Postfix_if_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Postfix_if_branchContext postfix_if_branch() {
			return GetRuleContext<Postfix_if_branchContext>(0);
		}
		public Postfix_if_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterPostfix_if_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitPostfix_if_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfix_if_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Divide_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Slash() { return GetToken(DassieParser.Slash, 0); }
		public Divide_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterDivide_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitDivide_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivide_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Byref_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ampersand() { return GetToken(DassieParser.Ampersand, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Byref_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterByref_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitByref_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitByref_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Array_element_assignmentContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Bracket() { return GetToken(DassieParser.Open_Bracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Bracket() { return GetToken(DassieParser.Close_Bracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		public Array_element_assignmentContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterArray_element_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitArray_element_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_element_assignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Logical_and_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Double_Ampersand() { return GetTokens(DassieParser.Double_Ampersand); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Ampersand(int i) {
			return GetToken(DassieParser.Double_Ampersand, i);
		}
		public Logical_and_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterLogical_and_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitLogical_and_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_and_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Full_identifier_member_access_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Full_identifierContext full_identifier() {
			return GetRuleContext<Full_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_arg_listContext type_arg_list() {
			return GetRuleContext<Type_arg_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArglistContext arglist() {
			return GetRuleContext<ArglistContext>(0);
		}
		public Full_identifier_member_access_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterFull_identifier_member_access_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitFull_identifier_member_access_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFull_identifier_member_access_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Implementation_query_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Dot_Question_Mark() { return GetToken(DassieParser.Double_Dot_Question_Mark, 0); }
		public Implementation_query_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterImplementation_query_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitImplementation_query_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplementation_query_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 456;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				{
				_localctx = new Custom_operator_unary_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 250;
				Match(Custom_Operator);
				State = 251;
				expression(62);
				}
				break;
			case 2:
				{
				_localctx = new Bitwise_complement_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 252;
				Match(Tilde);
				State = 253;
				expression(60);
				}
				break;
			case 3:
				{
				_localctx = new Logical_negation_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 254;
				Match(Exclamation_Mark);
				State = 255;
				expression(57);
				}
				break;
			case 4:
				{
				_localctx = new Byref_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 256;
				Match(Ampersand);
				State = 257;
				expression(38);
				}
				break;
			case 5:
				{
				_localctx = new Anonymous_function_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 258;
				parameter_list();
				State = 261;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 259;
					Match(Colon);
					State = 260;
					type_name(0);
					}
				}

				State = 263;
				Match(Equals_Greater);
				State = 264;
				expression(36);
				}
				break;
			case 6:
				{
				_localctx = new Function_pointer_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 266;
				((Function_pointer_expressionContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==Func || _la==Func_Ampersand) ) {
					((Function_pointer_expressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 267;
				function_pointer_parameter_list();
				State = 268;
				expression(35);
				}
				break;
			case 7:
				{
				_localctx = new Typeof_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 270;
				Match(Caret_Backslash);
				State = 271;
				type_name(0);
				}
				break;
			case 8:
				{
				_localctx = new Nameof_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 272;
				Match(Dollar_Backslash);
				State = 273;
				expression(33);
				}
				break;
			case 9:
				{
				_localctx = new Local_declaration_or_assignmentContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 275;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Var || _la==Val) {
					{
					State = 274;
					_la = TokenStream.LA(1);
					if ( !(_la==Var || _la==Val) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 277;
				Match(Identifier);
				State = 280;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 278;
					Match(Colon);
					State = 279;
					type_name(0);
					}
				}

				State = 282;
				assignment_operator();
				State = 283;
				expression(31);
				}
				break;
			case 10:
				{
				_localctx = new Closed_ended_range_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 285;
				Match(Double_Dot);
				State = 286;
				expression(26);
				}
				break;
			case 11:
				{
				_localctx = new Full_range_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 287;
				Match(Double_Dot);
				}
				break;
			case 12:
				{
				_localctx = new Range_index_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 288;
				Match(Caret);
				State = 289;
				integer_atom();
				}
				break;
			case 13:
				{
				_localctx = new Attributed_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 291;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 290;
						attribute();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 293;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 295;
				expression(23);
				}
				break;
			case 14:
				{
				_localctx = new Prefix_if_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 297;
				if_branch();
				State = 301;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 298;
						Match(NewLine);
						}
						} 
					}
					State = 303;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
				}
				State = 307;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 304;
						elif_branch();
						}
						} 
					}
					State = 309;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
				}
				State = 313;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 310;
						Match(NewLine);
						}
						} 
					}
					State = 315;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
				}
				State = 317;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
				case 1:
					{
					State = 316;
					else_branch();
					}
					break;
				}
				}
				break;
			case 15:
				{
				_localctx = new Prefix_unless_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 319;
				unless_branch();
				State = 323;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 320;
						Match(NewLine);
						}
						} 
					}
					State = 325;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
				}
				State = 329;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 326;
						else_unless_branch();
						}
						} 
					}
					State = 331;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
				}
				State = 335;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 332;
						Match(NewLine);
						}
						} 
					}
					State = 337;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
				}
				State = 339;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
				case 1:
					{
					State = 338;
					else_branch();
					}
					break;
				}
				}
				break;
			case 16:
				{
				_localctx = new Foreach_loopContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 341;
				Match(At_Sign);
				State = 343;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Open_Paren) {
					{
					State = 342;
					Match(Open_Paren);
					}
				}

				{
				State = 346;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Var || _la==Val) {
					{
					State = 345;
					_la = TokenStream.LA(1);
					if ( !(_la==Var || _la==Val) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 348;
				Match(Identifier);
				State = 354;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 349;
					Match(Comma);
					{
					State = 351;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==Var || _la==Val) {
						{
						State = 350;
						_la = TokenStream.LA(1);
						if ( !(_la==Var || _la==Val) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					State = 353;
					Match(Identifier);
					}
					}
				}

				State = 357;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Close_Paren) {
					{
					State = 356;
					Match(Close_Paren);
					}
				}

				State = 359;
				Match(Colon_Greater_Than);
				State = 360;
				expression(0);
				}
				State = 362;
				Match(Equals);
				State = 363;
				expression(18);
				}
				break;
			case 17:
				{
				_localctx = new While_loopContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 365;
				Match(At_Sign);
				State = 366;
				expression(0);
				State = 367;
				Match(Equals);
				State = 368;
				expression(17);
				}
				break;
			case 18:
				{
				_localctx = new Until_loopContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 370;
				Match(Exclamation_At);
				State = 371;
				expression(0);
				State = 372;
				Match(Equals);
				State = 373;
				expression(16);
				}
				break;
			case 19:
				{
				_localctx = new Match_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 375;
				match_expr();
				}
				break;
			case 20:
				{
				_localctx = new Try_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 376;
				try_branch();
				State = 380;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 377;
						catch_branch();
						}
						} 
					}
					State = 382;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
				}
				State = 384;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
				case 1:
					{
					State = 383;
					fault_branch();
					}
					break;
				}
				State = 387;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
				case 1:
					{
					State = 386;
					finally_branch();
					}
					break;
				}
				}
				break;
			case 21:
				{
				_localctx = new Raise_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 389;
				Match(Raise);
				State = 390;
				expression(13);
				}
				break;
			case 22:
				{
				_localctx = new Rethrow_exceptionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 391;
				Match(Raise);
				}
				break;
			case 23:
				{
				_localctx = new Array_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 392;
				Match(At_Open_Bracket);
				State = 401;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 25)) & ~0x3f) == 0 && ((1L << (_la - 25)) & -4562231909415829965L) != 0) || ((((_la - 89)) & ~0x3f) == 0 && ((1L << (_la - 89)) & 70231439441937L) != 0)) {
					{
					State = 393;
					expression(0);
					State = 398;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==Comma) {
						{
						{
						State = 394;
						Match(Comma);
						State = 395;
						expression(0);
						}
						}
						State = 400;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 403;
				Match(Close_Bracket);
				}
				break;
			case 24:
				{
				_localctx = new List_initializer_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 404;
				Match(Open_Bracket);
				State = 413;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 25)) & ~0x3f) == 0 && ((1L << (_la - 25)) & -4562231909415829965L) != 0) || ((((_la - 89)) & ~0x3f) == 0 && ((1L << (_la - 89)) & 70231439441937L) != 0)) {
					{
					State = 405;
					expression(0);
					State = 410;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==Comma) {
						{
						{
						State = 406;
						Match(Comma);
						State = 407;
						expression(0);
						}
						}
						State = 412;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 415;
				Match(Close_Bracket);
				}
				break;
			case 25:
				{
				_localctx = new Dictionary_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 416;
				Match(Open_Bracket);
				State = 434;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Open_Bracket) {
					{
					State = 417;
					Match(Open_Bracket);
					State = 418;
					expression(0);
					State = 419;
					Match(Comma);
					State = 420;
					expression(0);
					State = 421;
					Match(Close_Bracket);
					State = 431;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==Comma) {
						{
						{
						State = 422;
						Match(Comma);
						State = 423;
						Match(Open_Bracket);
						State = 424;
						expression(0);
						State = 425;
						Match(Comma);
						State = 426;
						expression(0);
						State = 427;
						Match(Close_Bracket);
						}
						}
						State = 433;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 436;
				Match(Close_Bracket);
				}
				break;
			case 26:
				{
				_localctx = new Atom_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 437;
				atom();
				}
				break;
			case 27:
				{
				_localctx = new Block_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 438;
				code_block();
				}
				break;
			case 28:
				{
				_localctx = new Full_identifier_member_access_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 439;
				full_identifier();
				State = 441;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
				case 1:
					{
					State = 440;
					type_arg_list();
					}
					break;
				}
				State = 444;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
				case 1:
					{
					State = 443;
					arglist();
					}
					break;
				}
				}
				break;
			case 29:
				{
				_localctx = new Tuple_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 446;
				Match(Open_Paren);
				State = 447;
				expression(0);
				State = 450;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 448;
					Match(Comma);
					State = 449;
					expression(0);
					}
					}
					State = 452;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Comma );
				State = 454;
				Match(Close_Paren);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 577;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,57,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 575;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
					case 1:
						{
						_localctx = new Custom_operator_binary_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 458;
						if (!(Precpred(Context, 61))) throw new FailedPredicateException(this, "Precpred(Context, 61)");
						State = 459;
						Match(Custom_Operator);
						State = 460;
						expression(62);
						}
						break;
					case 2:
						{
						_localctx = new Array_element_assignmentContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 461;
						if (!(Precpred(Context, 59))) throw new FailedPredicateException(this, "Precpred(Context, 59)");
						State = 462;
						Match(Open_Bracket);
						State = 463;
						expression(0);
						State = 464;
						Match(Close_Bracket);
						State = 465;
						Match(Equals);
						State = 466;
						expression(60);
						}
						break;
					case 3:
						{
						_localctx = new Power_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 468;
						if (!(Precpred(Context, 58))) throw new FailedPredicateException(this, "Precpred(Context, 58)");
						State = 469;
						Match(Double_Asterisk);
						State = 470;
						expression(58);
						}
						break;
					case 4:
						{
						_localctx = new Multiply_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 471;
						if (!(Precpred(Context, 56))) throw new FailedPredicateException(this, "Precpred(Context, 56)");
						State = 472;
						Match(Asterisk);
						State = 473;
						expression(57);
						}
						break;
					case 5:
						{
						_localctx = new Divide_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 474;
						if (!(Precpred(Context, 55))) throw new FailedPredicateException(this, "Precpred(Context, 55)");
						State = 475;
						Match(Slash);
						State = 476;
						expression(56);
						}
						break;
					case 6:
						{
						_localctx = new Remainder_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 477;
						if (!(Precpred(Context, 54))) throw new FailedPredicateException(this, "Precpred(Context, 54)");
						State = 478;
						Match(Percent);
						State = 479;
						expression(55);
						}
						break;
					case 7:
						{
						_localctx = new Modulus_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 480;
						if (!(Precpred(Context, 53))) throw new FailedPredicateException(this, "Precpred(Context, 53)");
						State = 481;
						Match(Double_Percent);
						State = 482;
						expression(54);
						}
						break;
					case 8:
						{
						_localctx = new Addition_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 483;
						if (!(Precpred(Context, 52))) throw new FailedPredicateException(this, "Precpred(Context, 52)");
						State = 484;
						Match(Plus);
						State = 485;
						expression(53);
						}
						break;
					case 9:
						{
						_localctx = new Subtraction_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 486;
						if (!(Precpred(Context, 51))) throw new FailedPredicateException(this, "Precpred(Context, 51)");
						State = 487;
						Match(Minus);
						State = 488;
						expression(52);
						}
						break;
					case 10:
						{
						_localctx = new Left_shift_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 489;
						if (!(Precpred(Context, 50))) throw new FailedPredicateException(this, "Precpred(Context, 50)");
						State = 490;
						Match(Double_Less_Than);
						State = 491;
						expression(51);
						}
						break;
					case 11:
						{
						_localctx = new Right_shift_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 492;
						if (!(Precpred(Context, 49))) throw new FailedPredicateException(this, "Precpred(Context, 49)");
						State = 493;
						Match(Double_Greater_Than);
						State = 494;
						expression(50);
						}
						break;
					case 12:
						{
						_localctx = new Equality_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 495;
						if (!(Precpred(Context, 48))) throw new FailedPredicateException(this, "Precpred(Context, 48)");
						State = 496;
						((Equality_expressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==Double_Equals || _la==Exclamation_Equals) ) {
							((Equality_expressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 497;
						expression(49);
						}
						break;
					case 13:
						{
						_localctx = new Comparison_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 498;
						if (!(Precpred(Context, 47))) throw new FailedPredicateException(this, "Precpred(Context, 47)");
						State = 499;
						((Comparison_expressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & 15L) != 0)) ) {
							((Comparison_expressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 500;
						expression(48);
						}
						break;
					case 14:
						{
						_localctx = new And_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 501;
						if (!(Precpred(Context, 45))) throw new FailedPredicateException(this, "Precpred(Context, 45)");
						State = 502;
						Match(Ampersand);
						State = 503;
						expression(46);
						}
						break;
					case 15:
						{
						_localctx = new Or_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 504;
						if (!(Precpred(Context, 43))) throw new FailedPredicateException(this, "Precpred(Context, 43)");
						State = 505;
						Match(Bar);
						State = 506;
						expression(44);
						}
						break;
					case 16:
						{
						_localctx = new Xor_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 507;
						if (!(Precpred(Context, 41))) throw new FailedPredicateException(this, "Precpred(Context, 41)");
						State = 508;
						Match(Caret);
						State = 509;
						expression(42);
						}
						break;
					case 17:
						{
						_localctx = new Index_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 510;
						if (!(Precpred(Context, 37))) throw new FailedPredicateException(this, "Precpred(Context, 37)");
						State = 511;
						Match(Double_Colon);
						State = 512;
						expression(38);
						}
						break;
					case 18:
						{
						_localctx = new Implementation_query_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 513;
						if (!(Precpred(Context, 32))) throw new FailedPredicateException(this, "Precpred(Context, 32)");
						State = 514;
						Match(Double_Dot_Question_Mark);
						State = 515;
						expression(33);
						}
						break;
					case 19:
						{
						_localctx = new Right_pipe_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 516;
						if (!(Precpred(Context, 30))) throw new FailedPredicateException(this, "Precpred(Context, 30)");
						State = 517;
						Match(Arrow_Right);
						State = 518;
						expression(31);
						}
						break;
					case 20:
						{
						_localctx = new Left_pipe_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 519;
						if (!(Precpred(Context, 29))) throw new FailedPredicateException(this, "Precpred(Context, 29)");
						State = 520;
						Match(Arrow_Left);
						State = 521;
						expression(30);
						}
						break;
					case 21:
						{
						_localctx = new Delimited_range_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 522;
						if (!(Precpred(Context, 28))) throw new FailedPredicateException(this, "Precpred(Context, 28)");
						State = 523;
						Match(Double_Dot);
						State = 524;
						expression(29);
						}
						break;
					case 22:
						{
						_localctx = new AssignmentContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 525;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 526;
						assignment_operator();
						State = 527;
						expression(3);
						}
						break;
					case 23:
						{
						_localctx = new Isinstance_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 529;
						if (!(Precpred(Context, 46))) throw new FailedPredicateException(this, "Precpred(Context, 46)");
						State = 530;
						Match(Colon_Question_Mark);
						State = 531;
						type_name(0);
						}
						break;
					case 24:
						{
						_localctx = new Logical_and_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 532;
						if (!(Precpred(Context, 44))) throw new FailedPredicateException(this, "Precpred(Context, 44)");
						State = 535;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 533;
								Match(Double_Ampersand);
								State = 534;
								expression(0);
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 537;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						}
						break;
					case 25:
						{
						_localctx = new Logical_or_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 539;
						if (!(Precpred(Context, 42))) throw new FailedPredicateException(this, "Precpred(Context, 42)");
						State = 542;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 540;
								Match(Double_Bar);
								State = 541;
								expression(0);
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 544;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						}
						break;
					case 26:
						{
						_localctx = new Conversion_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 546;
						if (!(Precpred(Context, 40))) throw new FailedPredicateException(this, "Precpred(Context, 40)");
						State = 547;
						Match(Less_Than_Colon);
						State = 548;
						type_name(0);
						}
						break;
					case 27:
						{
						_localctx = new Safe_conversion_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 549;
						if (!(Precpred(Context, 39))) throw new FailedPredicateException(this, "Precpred(Context, 39)");
						State = 550;
						Match(Less_Than_Question_Mark_Colon);
						State = 551;
						type_name(0);
						}
						break;
					case 28:
						{
						_localctx = new Open_ended_range_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 552;
						if (!(Precpred(Context, 27))) throw new FailedPredicateException(this, "Precpred(Context, 27)");
						State = 553;
						Match(Double_Dot);
						}
						break;
					case 29:
						{
						_localctx = new Postfix_if_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 554;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 555;
						postfix_if_branch();
						}
						break;
					case 30:
						{
						_localctx = new Postfix_unless_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 556;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 557;
						postfix_unless_branch();
						}
						break;
					case 31:
						{
						_localctx = new Newlined_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 558;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 559;
						Match(NewLine);
						}
						break;
					case 32:
						{
						_localctx = new Separated_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 560;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 561;
						Match(Semicolon);
						}
						break;
					case 33:
						{
						_localctx = new Member_access_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 562;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 565;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 563;
								Match(Dot);
								State = 564;
								Match(Identifier);
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 567;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						State = 570;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
						case 1:
							{
							State = 569;
							type_arg_list();
							}
							break;
						}
						State = 573;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
						case 1:
							{
							State = 572;
							arglist();
							}
							break;
						}
						}
						break;
					}
					} 
				}
				State = 579;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,57,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression_atomContext expression_atom() {
			return GetRuleContext<Expression_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Integer_atomContext integer_atom() {
			return GetRuleContext<Integer_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Real_atomContext real_atom() {
			return GetRuleContext<Real_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Boolean_atomContext boolean_atom() {
			return GetRuleContext<Boolean_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_atomContext string_atom() {
			return GetRuleContext<String_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Character_atomContext character_atom() {
			return GetRuleContext<Character_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Empty_atomContext empty_atom() {
			return GetRuleContext<Empty_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Wildcard_atomContext wildcard_atom() {
			return GetRuleContext<Wildcard_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public This_atomContext this_atom() {
			return GetRuleContext<This_atomContext>(0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 18, RULE_atom);
		try {
			State = 589;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 580;
				expression_atom();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 581;
				integer_atom();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 582;
				real_atom();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 583;
				boolean_atom();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 584;
				string_atom();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 585;
				character_atom();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 586;
				empty_atom();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 587;
				wildcard_atom();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 588;
				this_atom();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class This_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode This() { return GetToken(DassieParser.This, 0); }
		public This_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_this_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterThis_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitThis_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThis_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public This_atomContext this_atom() {
		This_atomContext _localctx = new This_atomContext(Context, State);
		EnterRule(_localctx, 20, RULE_this_atom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 591;
			Match(This);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Paren() { return GetToken(DassieParser.Open_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Paren() { return GetToken(DassieParser.Close_Paren, 0); }
		public Expression_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterExpression_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitExpression_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_atomContext expression_atom() {
		Expression_atomContext _localctx = new Expression_atomContext(Context, State);
		EnterRule(_localctx, 22, RULE_expression_atom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 593;
			Match(Open_Paren);
			State = 594;
			expression(0);
			State = 595;
			Match(Close_Paren);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Integer_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Integer_Literal() { return GetToken(DassieParser.Integer_Literal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Binary_Integer_Literal() { return GetToken(DassieParser.Binary_Integer_Literal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hex_Integer_Literal() { return GetToken(DassieParser.Hex_Integer_Literal, 0); }
		public Integer_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterInteger_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitInteger_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteger_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Integer_atomContext integer_atom() {
		Integer_atomContext _localctx = new Integer_atomContext(Context, State);
		EnterRule(_localctx, 24, RULE_integer_atom);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 597;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 127)) & ~0x3f) == 0 && ((1L << (_la - 127)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Real_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Real_Literal() { return GetToken(DassieParser.Real_Literal, 0); }
		public Real_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_real_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterReal_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitReal_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReal_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Real_atomContext real_atom() {
		Real_atomContext _localctx = new Real_atomContext(Context, State);
		EnterRule(_localctx, 26, RULE_real_atom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 599;
			Match(Real_Literal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Boolean_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode True() { return GetToken(DassieParser.True, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode False() { return GetToken(DassieParser.False, 0); }
		public Boolean_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterBoolean_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitBoolean_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Boolean_atomContext boolean_atom() {
		Boolean_atomContext _localctx = new Boolean_atomContext(Context, State);
		EnterRule(_localctx, 28, RULE_boolean_atom);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 601;
			_la = TokenStream.LA(1);
			if ( !(_la==True || _la==False) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String_Literal() { return GetToken(DassieParser.String_Literal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Verbatim_String_Literal() { return GetToken(DassieParser.Verbatim_String_Literal, 0); }
		public String_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterString_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitString_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_atomContext string_atom() {
		String_atomContext _localctx = new String_atomContext(Context, State);
		EnterRule(_localctx, 30, RULE_string_atom);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 603;
			_la = TokenStream.LA(1);
			if ( !(_la==String_Literal || _la==Verbatim_String_Literal) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Character_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Character_Literal() { return GetToken(DassieParser.Character_Literal, 0); }
		public Character_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_character_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterCharacter_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitCharacter_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharacter_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Character_atomContext character_atom() {
		Character_atomContext _localctx = new Character_atomContext(Context, State);
		EnterRule(_localctx, 32, RULE_character_atom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 605;
			Match(Character_Literal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Empty_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Paren() { return GetToken(DassieParser.Open_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Paren() { return GetToken(DassieParser.Close_Paren, 0); }
		public Empty_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_empty_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterEmpty_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitEmpty_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmpty_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Empty_atomContext empty_atom() {
		Empty_atomContext _localctx = new Empty_atomContext(Context, State);
		EnterRule(_localctx, 34, RULE_empty_atom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 607;
			Match(Open_Paren);
			State = 608;
			Match(Close_Paren);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Wildcard_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Underscore() { return GetToken(DassieParser.Underscore, 0); }
		public Wildcard_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wildcard_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterWildcard_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitWildcard_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWildcard_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Wildcard_atomContext wildcard_atom() {
		Wildcard_atomContext _localctx = new Wildcard_atomContext(Context, State);
		EnterRule(_localctx, 36, RULE_wildcard_atom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 610;
			Match(Underscore);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Identifier_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(DassieParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Full_identifierContext full_identifier() {
			return GetRuleContext<Full_identifierContext>(0);
		}
		public Identifier_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterIdentifier_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitIdentifier_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Identifier_atomContext identifier_atom() {
		Identifier_atomContext _localctx = new Identifier_atomContext(Context, State);
		EnterRule(_localctx, 38, RULE_identifier_atom);
		int _la;
		try {
			State = 626;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 615;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Less_Than) {
					{
					{
					State = 612;
					attribute();
					}
					}
					State = 617;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 618;
				Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 622;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Less_Than) {
					{
					{
					State = 619;
					attribute();
					}
					}
					State = 624;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 625;
				full_identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_atomContext identifier_atom() {
			return GetRuleContext<Identifier_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Paren() { return GetToken(DassieParser.Open_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext[] type_name() {
			return GetRuleContexts<Type_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name(int i) {
			return GetRuleContext<Type_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Paren() { return GetToken(DassieParser.Close_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Bar() { return GetTokens(DassieParser.Bar); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bar(int i) {
			return GetToken(DassieParser.Bar, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_identifierContext generic_identifier() {
			return GetRuleContext<Generic_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Func() { return GetToken(DassieParser.Func, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Asterisk() { return GetToken(DassieParser.Asterisk, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_arg_listContext type_arg_list() {
			return GetRuleContext<Type_arg_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ampersand() { return GetToken(DassieParser.Ampersand, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Ampersand() { return GetToken(DassieParser.Double_Ampersand, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Array_type_specifierContext array_type_specifier() {
			return GetRuleContext<Array_type_specifierContext>(0);
		}
		public Type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterType_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitType_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_nameContext type_name() {
		return type_name(0);
	}

	private Type_nameContext type_name(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Type_nameContext _localctx = new Type_nameContext(Context, _parentState);
		Type_nameContext _prevctx = _localctx;
		int _startState = 40;
		EnterRecursionRule(_localctx, 40, RULE_type_name, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 644;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				{
				State = 629;
				identifier_atom();
				}
				break;
			case 2:
				{
				State = 630;
				Match(Open_Paren);
				State = 631;
				type_name(0);
				State = 634;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 632;
					Match(Bar);
					State = 633;
					type_name(0);
					}
					}
					State = 636;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Bar );
				State = 638;
				Match(Close_Paren);
				}
				break;
			case 3:
				{
				State = 640;
				generic_identifier();
				}
				break;
			case 4:
				{
				State = 641;
				Match(Func);
				State = 642;
				Match(Asterisk);
				State = 643;
				type_arg_list();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 654;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 652;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
					case 1:
						{
						_localctx = new Type_nameContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_type_name);
						State = 646;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 647;
						type_arg_list();
						}
						break;
					case 2:
						{
						_localctx = new Type_nameContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_type_name);
						State = 648;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 649;
						_la = TokenStream.LA(1);
						if ( !(_la==Ampersand || _la==Double_Ampersand) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case 3:
						{
						_localctx = new Type_nameContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_type_name);
						State = 650;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 651;
						array_type_specifier();
						}
						break;
					}
					} 
				}
				State = 656;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Array_type_specifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode At_Open_Bracket() { return GetToken(DassieParser.At_Open_Bracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Bracket() { return GetToken(DassieParser.Close_Bracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(DassieParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(DassieParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Double_Comma() { return GetTokens(DassieParser.Double_Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Comma(int i) {
			return GetToken(DassieParser.Double_Comma, i);
		}
		public Array_type_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_type_specifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterArray_type_specifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitArray_type_specifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_type_specifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_type_specifierContext array_type_specifier() {
		Array_type_specifierContext _localctx = new Array_type_specifierContext(Context, State);
		EnterRule(_localctx, 42, RULE_array_type_specifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 657;
			Match(At_Open_Bracket);
			State = 661;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma || _la==Double_Comma) {
				{
				{
				State = 658;
				_la = TokenStream.LA(1);
				if ( !(_la==Comma || _la==Double_Comma) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 663;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 664;
			Match(Close_Bracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Question_Mark() { return GetToken(DassieParser.Question_Mark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		public If_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterIf_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitIf_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_branchContext if_branch() {
		If_branchContext _localctx = new If_branchContext(Context, State);
		EnterRule(_localctx, 44, RULE_if_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 666;
			Match(Question_Mark);
			State = 667;
			expression(0);
			State = 668;
			Match(Equals);
			State = 671;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
			case 1:
				{
				State = 669;
				code_block();
				}
				break;
			case 2:
				{
				State = 670;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Postfix_if_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Question_Mark() { return GetToken(DassieParser.Question_Mark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Postfix_if_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfix_if_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterPostfix_if_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitPostfix_if_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfix_if_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Postfix_if_branchContext postfix_if_branch() {
		Postfix_if_branchContext _localctx = new Postfix_if_branchContext(Context, State);
		EnterRule(_localctx, 46, RULE_postfix_if_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 673;
			Match(Question_Mark);
			State = 674;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Elif_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(DassieParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		public Elif_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elif_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterElif_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitElif_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElif_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Elif_branchContext elif_branch() {
		Elif_branchContext _localctx = new Elif_branchContext(Context, State);
		EnterRule(_localctx, 48, RULE_elif_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 676;
			Match(Colon);
			State = 677;
			expression(0);
			State = 678;
			Match(Equals);
			State = 681;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
			case 1:
				{
				State = 679;
				code_block();
				}
				break;
			case 2:
				{
				State = 680;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(DassieParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Else_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterElse_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitElse_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_branchContext else_branch() {
		Else_branchContext _localctx = new Else_branchContext(Context, State);
		EnterRule(_localctx, 50, RULE_else_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 683;
			Match(Colon);
			State = 684;
			Match(Equals);
			State = 687;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
			case 1:
				{
				State = 685;
				code_block();
				}
				break;
			case 2:
				{
				State = 686;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unless_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation_Question() { return GetToken(DassieParser.Exclamation_Question, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		public Unless_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unless_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterUnless_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitUnless_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnless_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unless_branchContext unless_branch() {
		Unless_branchContext _localctx = new Unless_branchContext(Context, State);
		EnterRule(_localctx, 52, RULE_unless_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 689;
			Match(Exclamation_Question);
			State = 690;
			expression(0);
			State = 691;
			Match(Equals);
			State = 694;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				{
				State = 692;
				code_block();
				}
				break;
			case 2:
				{
				State = 693;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_unless_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation_Colon() { return GetToken(DassieParser.Exclamation_Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		public Else_unless_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_unless_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterElse_unless_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitElse_unless_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_unless_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_unless_branchContext else_unless_branch() {
		Else_unless_branchContext _localctx = new Else_unless_branchContext(Context, State);
		EnterRule(_localctx, 54, RULE_else_unless_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 696;
			Match(Exclamation_Colon);
			State = 697;
			expression(0);
			State = 698;
			Match(Equals);
			State = 701;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
			case 1:
				{
				State = 699;
				code_block();
				}
				break;
			case 2:
				{
				State = 700;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Postfix_unless_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation_Question() { return GetToken(DassieParser.Exclamation_Question, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Postfix_unless_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfix_unless_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterPostfix_unless_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitPostfix_unless_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfix_unless_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Postfix_unless_branchContext postfix_unless_branch() {
		Postfix_unless_branchContext _localctx = new Postfix_unless_branchContext(Context, State);
		EnterRule(_localctx, 56, RULE_postfix_unless_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 703;
			Match(Exclamation_Question);
			State = 704;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArglistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(DassieParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(DassieParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Comma() { return GetToken(DassieParser.Double_Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(DassieParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(DassieParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Colon() { return GetTokens(DassieParser.Colon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon(int i) {
			return GetToken(DassieParser.Colon, i);
		}
		public ArglistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arglist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterArglist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitArglist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArglist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArglistContext arglist() {
		ArglistContext _localctx = new ArglistContext(Context, State);
		EnterRule(_localctx, 58, RULE_arglist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 708;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				{
				State = 706;
				Match(Identifier);
				State = 707;
				Match(Colon);
				}
				break;
			}
			State = 710;
			expression(0);
			}
			State = 720;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 712;
					Match(Comma);
					{
					State = 715;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
					case 1:
						{
						State = 713;
						Match(Identifier);
						State = 714;
						Match(Colon);
						}
						break;
					}
					State = 717;
					expression(0);
					}
					}
					} 
				}
				State = 722;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
			}
			State = 724;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
			case 1:
				{
				State = 723;
				Match(Double_Comma);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less_Than() { return GetToken(DassieParser.Less_Than, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater_Than() { return GetToken(DassieParser.Greater_Than, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArglistContext arglist() {
			return GetRuleContext<ArglistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(DassieParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(DassieParser.NewLine, i);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 60, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 726;
			Match(Less_Than);
			State = 727;
			type_name(0);
			State = 729;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 25)) & ~0x3f) == 0 && ((1L << (_la - 25)) & -4562231909415829965L) != 0) || ((((_la - 89)) & ~0x3f) == 0 && ((1L << (_la - 89)) & 70231439441937L) != 0)) {
				{
				State = 728;
				arglist();
				}
			}

			State = 731;
			Match(Greater_Than);
			State = 735;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NewLine) {
				{
				{
				State = 732;
				Match(NewLine);
				}
				}
				State = 737;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_identifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_atomContext identifier_atom() {
			return GetRuleContext<Identifier_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Bracket() { return GetToken(DassieParser.Open_Bracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Bracket() { return GetToken(DassieParser.Close_Bracket, 0); }
		public Generic_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterGeneric_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitGeneric_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneric_identifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Generic_identifierContext generic_identifier() {
		Generic_identifierContext _localctx = new Generic_identifierContext(Context, State);
		EnterRule(_localctx, 62, RULE_generic_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 738;
			identifier_atom();
			State = 739;
			Match(Open_Bracket);
			State = 740;
			type_parameter_list();
			State = 741;
			Match(Close_Bracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_access_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Global() { return GetToken(DassieParser.Global, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Partial() { return GetToken(DassieParser.Partial, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Local() { return GetToken(DassieParser.Local, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Internal() { return GetToken(DassieParser.Internal, 0); }
		public Field_access_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_access_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterField_access_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitField_access_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField_access_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Field_access_modifierContext field_access_modifier() {
		Field_access_modifierContext _localctx = new Field_access_modifierContext(Context, State);
		EnterRule(_localctx, 64, RULE_field_access_modifier);
		int _la;
		try {
			State = 755;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Global:
				EnterOuterAlt(_localctx, 1);
				{
				State = 743;
				Match(Global);
				State = 745;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Partial) {
					{
					State = 744;
					Match(Partial);
					}
				}

				}
				break;
			case Local:
				EnterOuterAlt(_localctx, 2);
				{
				State = 747;
				Match(Local);
				State = 749;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Partial) {
					{
					State = 748;
					Match(Partial);
					}
				}

				}
				break;
			case Internal:
				EnterOuterAlt(_localctx, 3);
				{
				State = 751;
				Match(Internal);
				State = 753;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Partial) {
					{
					State = 752;
					Match(Partial);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Field_access_modifierContext field_access_modifier() {
			return GetRuleContext<Field_access_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(DassieParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(DassieParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Var() { return GetToken(DassieParser.Var, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Val() { return GetToken(DassieParser.Val, 0); }
		public Field_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterField_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitField_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Field_declarationContext field_declaration() {
		Field_declarationContext _localctx = new Field_declarationContext(Context, State);
		EnterRule(_localctx, 66, RULE_field_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 757;
			field_access_modifier();
			State = 759;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Var || _la==Val) {
				{
				State = 758;
				_la = TokenStream.LA(1);
				if ( !(_la==Var || _la==Val) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 761;
			Match(Identifier);
			State = 764;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 762;
				Match(Colon);
				State = 763;
				type_name(0);
				}
			}

			State = 766;
			Match(Equals);
			State = 767;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlaceholderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(DassieParser.Dot, 0); }
		public PlaceholderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_placeholder; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterPlaceholder(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitPlaceholder(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlaceholder(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlaceholderContext placeholder() {
		PlaceholderContext _localctx = new PlaceholderContext(Context, State);
		EnterRule(_localctx, 68, RULE_placeholder);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 769;
			Match(Dot);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_access_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Global() { return GetToken(DassieParser.Global, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Internal() { return GetToken(DassieParser.Internal, 0); }
		public Type_access_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_access_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterType_access_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitType_access_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_access_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_access_modifierContext type_access_modifier() {
		Type_access_modifierContext _localctx = new Type_access_modifierContext(Context, State);
		EnterRule(_localctx, 70, RULE_type_access_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 771;
			_la = TokenStream.LA(1);
			if ( !(_la==Global || _la==Internal) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nested_type_access_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_access_modifierContext type_access_modifier() {
			return GetRuleContext<Type_access_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Local() { return GetToken(DassieParser.Local, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Protected() { return GetToken(DassieParser.Protected, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Internal() { return GetToken(DassieParser.Internal, 0); }
		public Nested_type_access_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nested_type_access_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterNested_type_access_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitNested_type_access_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNested_type_access_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Nested_type_access_modifierContext nested_type_access_modifier() {
		Nested_type_access_modifierContext _localctx = new Nested_type_access_modifierContext(Context, State);
		EnterRule(_localctx, 72, RULE_nested_type_access_modifier);
		int _la;
		try {
			State = 779;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Global:
			case Internal:
				EnterOuterAlt(_localctx, 1);
				{
				State = 773;
				type_access_modifier();
				}
				break;
			case Local:
				EnterOuterAlt(_localctx, 2);
				{
				State = 774;
				Match(Local);
				}
				break;
			case Protected:
				EnterOuterAlt(_localctx, 3);
				{
				State = 775;
				Match(Protected);
				State = 777;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Internal) {
					{
					State = 776;
					Match(Internal);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_special_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open() { return GetToken(DassieParser.Open, 0); }
		public Type_special_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_special_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterType_special_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitType_special_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_special_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_special_modifierContext type_special_modifier() {
		Type_special_modifierContext _localctx = new Type_special_modifierContext(Context, State);
		EnterRule(_localctx, 74, RULE_type_special_modifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 781;
			Match(Open);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_kindContext type_kind() {
			return GetRuleContext<Type_kindContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(DassieParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_access_modifierContext type_access_modifier() {
			return GetRuleContext<Type_access_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Nested_type_access_modifierContext nested_type_access_modifier() {
			return GetRuleContext<Nested_type_access_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_special_modifierContext type_special_modifier() {
			return GetRuleContext<Type_special_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_listContext parameter_list() {
			return GetRuleContext<Parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Inheritance_listContext inheritance_list() {
			return GetRuleContext<Inheritance_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_blockContext type_block() {
			return GetRuleContext<Type_blockContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 76, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 786;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Less_Than) {
				{
				{
				State = 783;
				attribute();
				}
				}
				State = 788;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 791;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
			case 1:
				{
				State = 789;
				type_access_modifier();
				}
				break;
			case 2:
				{
				State = 790;
				nested_type_access_modifier();
				}
				break;
			}
			State = 794;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Open) {
				{
				State = 793;
				type_special_modifier();
				}
			}

			State = 796;
			type_kind();
			State = 797;
			Match(Identifier);
			State = 799;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Open_Bracket) {
				{
				State = 798;
				type_parameter_list();
				}
			}

			State = 802;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
			case 1:
				{
				State = 801;
				parameter_list();
				}
				break;
			}
			State = 805;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 804;
				inheritance_list();
				}
			}

			State = 809;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Equals) {
				{
				State = 807;
				Match(Equals);
				State = 808;
				type_block();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameter_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Bracket() { return GetToken(DassieParser.Open_Bracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameterContext[] type_parameter() {
			return GetRuleContexts<Type_parameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameterContext type_parameter(int i) {
			return GetRuleContext<Type_parameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Bracket() { return GetToken(DassieParser.Close_Bracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(DassieParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(DassieParser.Comma, i);
		}
		public Type_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterType_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitType_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_parameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameter_listContext type_parameter_list() {
		Type_parameter_listContext _localctx = new Type_parameter_listContext(Context, State);
		EnterRule(_localctx, 78, RULE_type_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 811;
			Match(Open_Bracket);
			State = 812;
			type_parameter();
			State = 817;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 813;
				Match(Comma);
				State = 814;
				type_parameter();
				}
				}
				State = 819;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 820;
			Match(Close_Bracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(DassieParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_attributeContext[] type_parameter_attribute() {
			return GetRuleContexts<Type_parameter_attributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_attributeContext type_parameter_attribute(int i) {
			return GetRuleContext<Type_parameter_attributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_varianceContext type_parameter_variance() {
			return GetRuleContext<Type_parameter_varianceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(DassieParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext[] type_name() {
			return GetRuleContexts<Type_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name(int i) {
			return GetRuleContext<Type_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(DassieParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(DassieParser.Comma, i);
		}
		public Type_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterType_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitType_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameterContext type_parameter() {
		Type_parameterContext _localctx = new Type_parameterContext(Context, State);
		EnterRule(_localctx, 80, RULE_type_parameter);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 825;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 549839699968L) != 0)) {
				{
				{
				State = 822;
				type_parameter_attribute();
				}
				}
				State = 827;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 829;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 99)) & ~0x3f) == 0 && ((1L << (_la - 99)) & 32773L) != 0)) {
				{
				State = 828;
				type_parameter_variance();
				}
			}

			State = 831;
			Match(Identifier);
			State = 841;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 832;
				Match(Colon);
				State = 833;
				type_name(0);
				State = 838;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,96,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 834;
						Match(Comma);
						State = 835;
						type_name(0);
						}
						} 
					}
					State = 840;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,96,Context);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameter_attributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ref() { return GetToken(DassieParser.Ref, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Val() { return GetToken(DassieParser.Val, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(DassieParser.Default, 0); }
		public Type_parameter_attributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterType_parameter_attribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitType_parameter_attribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_parameter_attribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameter_attributeContext type_parameter_attribute() {
		Type_parameter_attributeContext _localctx = new Type_parameter_attributeContext(Context, State);
		EnterRule(_localctx, 82, RULE_type_parameter_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 843;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 549839699968L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameter_varianceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(DassieParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(DassieParser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		public Type_parameter_varianceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter_variance; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterType_parameter_variance(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitType_parameter_variance(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_parameter_variance(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameter_varianceContext type_parameter_variance() {
		Type_parameter_varianceContext _localctx = new Type_parameter_varianceContext(Context, State);
		EnterRule(_localctx, 84, RULE_type_parameter_variance);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 845;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 99)) & ~0x3f) == 0 && ((1L << (_la - 99)) & 32773L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inheritance_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(DassieParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext[] type_name() {
			return GetRuleContexts<Type_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name(int i) {
			return GetRuleContext<Type_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(DassieParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(DassieParser.Comma, i);
		}
		public Inheritance_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inheritance_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterInheritance_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitInheritance_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInheritance_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inheritance_listContext inheritance_list() {
		Inheritance_listContext _localctx = new Inheritance_listContext(Context, State);
		EnterRule(_localctx, 86, RULE_inheritance_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 847;
			Match(Colon);
			State = 848;
			type_name(0);
			State = 853;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 849;
				Match(Comma);
				State = 850;
				type_name(0);
				}
				}
				State = 855;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_kindContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Type() { return GetToken(DassieParser.Type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ref() { return GetToken(DassieParser.Ref, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Val() { return GetToken(DassieParser.Val, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation_Mark() { return GetToken(DassieParser.Exclamation_Mark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ampersand() { return GetToken(DassieParser.Ampersand, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Template() { return GetToken(DassieParser.Template, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Module() { return GetToken(DassieParser.Module, 0); }
		public Type_kindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_kind; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterType_kind(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitType_kind(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_kind(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_kindContext type_kind() {
		Type_kindContext _localctx = new Type_kindContext(Context, State);
		EnterRule(_localctx, 88, RULE_type_kind);
		int _la;
		try {
			State = 878;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,104,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 857;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Ref) {
					{
					State = 856;
					Match(Ref);
					}
				}

				State = 859;
				Match(Type);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 860;
				Match(Val);
				State = 862;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Exclamation_Mark) {
					{
					State = 861;
					Match(Exclamation_Mark);
					}
				}

				State = 865;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Ampersand) {
					{
					State = 864;
					Match(Ampersand);
					}
				}

				State = 867;
				Match(Type);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 868;
				Match(Val);
				State = 870;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Ampersand) {
					{
					State = 869;
					Match(Ampersand);
					}
				}

				State = 873;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Exclamation_Mark) {
					{
					State = 872;
					Match(Exclamation_Mark);
					}
				}

				State = 875;
				Match(Type);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 876;
				Match(Template);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 877;
				Match(Module);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_access_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Global() { return GetToken(DassieParser.Global, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Local() { return GetToken(DassieParser.Local, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Internal() { return GetToken(DassieParser.Internal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Protected() { return GetToken(DassieParser.Protected, 0); }
		public Member_access_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_access_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterMember_access_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitMember_access_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_access_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_access_modifierContext member_access_modifier() {
		Member_access_modifierContext _localctx = new Member_access_modifierContext(Context, State);
		EnterRule(_localctx, 90, RULE_member_access_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 880;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 94208L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_oop_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Closed() { return GetToken(DassieParser.Closed, 0); }
		public Member_oop_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_oop_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterMember_oop_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitMember_oop_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_oop_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_oop_modifierContext member_oop_modifier() {
		Member_oop_modifierContext _localctx = new Member_oop_modifierContext(Context, State);
		EnterRule(_localctx, 92, RULE_member_oop_modifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 882;
			Match(Closed);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_special_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extern() { return GetToken(DassieParser.Extern, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Inline() { return GetToken(DassieParser.Inline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(DassieParser.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Abstract() { return GetToken(DassieParser.Abstract, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Literal() { return GetToken(DassieParser.Literal, 0); }
		public Member_special_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_special_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterMember_special_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitMember_special_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_special_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_special_modifierContext member_special_modifier() {
		Member_special_modifierContext _localctx = new Member_special_modifierContext(Context, State);
		EnterRule(_localctx, 94, RULE_member_special_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 884;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1099526340608L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_memberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(DassieParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Member_access_modifierContext member_access_modifier() {
			return GetRuleContext<Member_access_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Member_oop_modifierContext member_oop_modifier() {
			return GetRuleContext<Member_oop_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Member_special_modifierContext[] member_special_modifier() {
			return GetRuleContexts<Member_special_modifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Member_special_modifierContext member_special_modifier(int i) {
			return GetRuleContext<Member_special_modifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Override() { return GetToken(DassieParser.Override, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_listContext parameter_list() {
			return GetRuleContext<Parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(DassieParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Var() { return GetToken(DassieParser.Var, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Val() { return GetToken(DassieParser.Val, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(DassieParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(DassieParser.NewLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Auto() { return GetToken(DassieParser.Auto, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Custom_Operator() { return GetToken(DassieParser.Custom_Operator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Paren() { return GetToken(DassieParser.Open_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Paren() { return GetToken(DassieParser.Close_Paren, 0); }
		public Type_memberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_member; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterType_member(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitType_member(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_member(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_memberContext type_member() {
		Type_memberContext _localctx = new Type_memberContext(Context, State);
		EnterRule(_localctx, 96, RULE_type_member);
		int _la;
		try {
			State = 1002;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,131,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 889;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Less_Than) {
					{
					{
					State = 886;
					attribute();
					}
					}
					State = 891;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 893;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 94208L) != 0)) {
					{
					State = 892;
					member_access_modifier();
					}
				}

				State = 896;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Closed) {
					{
					State = 895;
					member_oop_modifier();
					}
				}

				State = 901;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1099526340608L) != 0)) {
					{
					{
					State = 898;
					member_special_modifier();
					}
					}
					State = 903;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 905;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Override) {
					{
					State = 904;
					Match(Override);
					}
				}

				State = 908;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Var || _la==Val) {
					{
					State = 907;
					_la = TokenStream.LA(1);
					if ( !(_la==Var || _la==Val) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 910;
				Match(Identifier);
				State = 912;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Open_Bracket) {
					{
					State = 911;
					type_parameter_list();
					}
				}

				State = 915;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,112,Context) ) {
				case 1:
					{
					State = 914;
					parameter_list();
					}
					break;
				}
				State = 919;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 917;
					Match(Colon);
					State = 918;
					type_name(0);
					}
				}

				State = 929;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Equals) {
					{
					State = 921;
					Match(Equals);
					State = 925;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NewLine) {
						{
						{
						State = 922;
						Match(NewLine);
						}
						}
						State = 927;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 928;
					expression(0);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 934;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Less_Than) {
					{
					{
					State = 931;
					attribute();
					}
					}
					State = 936;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 938;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 94208L) != 0)) {
					{
					State = 937;
					member_access_modifier();
					}
				}

				State = 941;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Closed) {
					{
					State = 940;
					member_oop_modifier();
					}
				}

				State = 946;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1099526340608L) != 0)) {
					{
					{
					State = 943;
					member_special_modifier();
					}
					}
					State = 948;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 950;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Override) {
					{
					State = 949;
					Match(Override);
					}
				}

				State = 953;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Auto) {
					{
					State = 952;
					Match(Auto);
					}
				}

				State = 956;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Var || _la==Val) {
					{
					State = 955;
					_la = TokenStream.LA(1);
					if ( !(_la==Var || _la==Val) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 958;
				Match(Identifier);
				State = 960;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Open_Bracket) {
					{
					State = 959;
					type_parameter_list();
					}
				}

				State = 962;
				Match(Colon);
				State = 963;
				type_name(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 967;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Less_Than) {
					{
					{
					State = 964;
					attribute();
					}
					}
					State = 969;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 971;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 94208L) != 0)) {
					{
					State = 970;
					member_access_modifier();
					}
				}

				State = 974;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Closed) {
					{
					State = 973;
					member_oop_modifier();
					}
				}

				State = 979;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1099526340608L) != 0)) {
					{
					{
					State = 976;
					member_special_modifier();
					}
					}
					State = 981;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 986;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Custom_Operator:
					{
					State = 982;
					Match(Custom_Operator);
					}
					break;
				case Open_Paren:
					{
					State = 983;
					Match(Open_Paren);
					State = 984;
					Match(Custom_Operator);
					State = 985;
					Match(Close_Paren);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 988;
				parameter_list();
				State = 991;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 989;
					Match(Colon);
					State = 990;
					type_name(0);
					}
				}

				State = 993;
				Match(Equals);
				State = 997;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NewLine) {
					{
					{
					State = 994;
					Match(NewLine);
					}
					}
					State = 999;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1000;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Access_modifier_member_groupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Brace() { return GetToken(DassieParser.Open_Brace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Brace() { return GetToken(DassieParser.Close_Brace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Member_access_modifierContext member_access_modifier() {
			return GetRuleContext<Member_access_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Member_oop_modifierContext member_oop_modifier() {
			return GetRuleContext<Member_oop_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Member_special_modifierContext[] member_special_modifier() {
			return GetRuleContexts<Member_special_modifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Member_special_modifierContext member_special_modifier(int i) {
			return GetRuleContext<Member_special_modifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(DassieParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(DassieParser.NewLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_memberContext[] type_member() {
			return GetRuleContexts<Type_memberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_memberContext type_member(int i) {
			return GetRuleContext<Type_memberContext>(i);
		}
		public Access_modifier_member_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_access_modifier_member_group; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterAccess_modifier_member_group(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitAccess_modifier_member_group(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccess_modifier_member_group(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Access_modifier_member_groupContext access_modifier_member_group() {
		Access_modifier_member_groupContext _localctx = new Access_modifier_member_groupContext(Context, State);
		EnterRule(_localctx, 98, RULE_access_modifier_member_group);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1007;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Global:
			case Local:
			case Internal:
			case Protected:
				{
				State = 1004;
				member_access_modifier();
				}
				break;
			case Closed:
				{
				State = 1005;
				member_oop_modifier();
				}
				break;
			case Static:
			case Abstract:
			case Extern:
			case Inline:
			case Literal:
				{
				State = 1006;
				member_special_modifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1012;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1099526340608L) != 0)) {
				{
				{
				State = 1009;
				member_special_modifier();
				}
				}
				State = 1014;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1015;
			Match(Equals);
			State = 1016;
			Match(Open_Brace);
			State = 1021;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3298920361988L) != 0) || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & 2207613190145L) != 0)) {
				{
				State = 1019;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NewLine:
					{
					State = 1017;
					Match(NewLine);
					}
					break;
				case Global:
				case Local:
				case Internal:
				case Static:
				case Protected:
				case Closed:
				case Auto:
				case Abstract:
				case Extern:
				case Inline:
				case Var:
				case Val:
				case Override:
				case Literal:
				case Open_Paren:
				case Less_Than:
				case Identifier:
				case Custom_Operator:
					{
					State = 1018;
					type_member();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 1023;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1024;
			Match(Close_Brace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Paren() { return GetToken(DassieParser.Open_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Paren() { return GetToken(DassieParser.Close_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(DassieParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(DassieParser.Comma, i);
		}
		public Parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterParameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitParameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_listContext parameter_list() {
		Parameter_listContext _localctx = new Parameter_listContext(Context, State);
		EnterRule(_localctx, 100, RULE_parameter_list);
		int _la;
		try {
			State = 1046;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Open_Paren:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1026;
				Match(Open_Paren);
				State = 1035;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Var || _la==Val || ((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & 274877906979L) != 0)) {
					{
					State = 1027;
					parameter();
					State = 1032;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==Comma) {
						{
						{
						State = 1028;
						Match(Comma);
						State = 1029;
						parameter();
						}
						}
						State = 1034;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 1037;
				Match(Close_Paren);
				}
				break;
			case Var:
			case Val:
			case Ampersand_Greater:
			case Less_Ampersand:
			case Less_Than:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1038;
				parameter();
				State = 1043;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 1039;
					Match(Comma);
					State = 1040;
					parameter();
					}
					}
					State = 1045;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ampersand_Greater() { return GetToken(DassieParser.Ampersand_Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less_Ampersand() { return GetToken(DassieParser.Less_Ampersand, 0); }
		public Parameter_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterParameter_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitParameter_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_modifierContext parameter_modifier() {
		Parameter_modifierContext _localctx = new Parameter_modifierContext(Context, State);
		EnterRule(_localctx, 102, RULE_parameter_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1048;
			_la = TokenStream.LA(1);
			if ( !(_la==Ampersand_Greater || _la==Less_Ampersand) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(DassieParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_modifierContext parameter_modifier() {
			return GetRuleContext<Parameter_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Dot() { return GetToken(DassieParser.Double_Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(DassieParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_constraintContext parameter_constraint() {
			return GetRuleContext<Parameter_constraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Val() { return GetToken(DassieParser.Val, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Var() { return GetToken(DassieParser.Var, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 104, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1051;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Less_Than) {
				{
				State = 1050;
				attribute();
				}
			}

			State = 1054;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Var || _la==Val) {
				{
				State = 1053;
				_la = TokenStream.LA(1);
				if ( !(_la==Var || _la==Val) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1057;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Ampersand_Greater || _la==Less_Ampersand) {
				{
				State = 1056;
				parameter_modifier();
				}
			}

			State = 1059;
			Match(Identifier);
			State = 1061;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Double_Dot) {
				{
				State = 1060;
				Match(Double_Dot);
				}
			}

			State = 1065;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,144,Context) ) {
			case 1:
				{
				State = 1063;
				Match(Colon);
				State = 1064;
				type_name(0);
				}
				break;
			}
			State = 1068;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Open_Brace || _la==Question_Mark) {
				{
				State = 1067;
				parameter_constraint();
				}
			}

			State = 1072;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,146,Context) ) {
			case 1:
				{
				State = 1070;
				Match(Equals);
				State = 1071;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_constraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Brace() { return GetToken(DassieParser.Open_Brace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Brace() { return GetToken(DassieParser.Close_Brace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Question_Mark() { return GetToken(DassieParser.Question_Mark, 0); }
		public Parameter_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterParameter_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitParameter_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_constraintContext parameter_constraint() {
		Parameter_constraintContext _localctx = new Parameter_constraintContext(Context, State);
		EnterRule(_localctx, 106, RULE_parameter_constraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1075;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Question_Mark) {
				{
				State = 1074;
				Match(Question_Mark);
				}
			}

			State = 1077;
			Match(Open_Brace);
			State = 1078;
			expression(0);
			State = 1079;
			Match(Close_Brace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Brace() { return GetToken(DassieParser.Open_Brace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Brace() { return GetToken(DassieParser.Close_Brace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_memberContext[] type_member() {
			return GetRuleContexts<Type_memberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_memberContext type_member(int i) {
			return GetRuleContext<Type_memberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(DassieParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(DassieParser.NewLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Access_modifier_member_groupContext[] access_modifier_member_group() {
			return GetRuleContexts<Access_modifier_member_groupContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Access_modifier_member_groupContext access_modifier_member_group(int i) {
			return GetRuleContext<Access_modifier_member_groupContext>(i);
		}
		public Type_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterType_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitType_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_blockContext type_block() {
		Type_blockContext _localctx = new Type_blockContext(Context, State);
		EnterRule(_localctx, 108, RULE_type_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1081;
			Match(Open_Brace);
			State = 1088;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3298937404932L) != 0) || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & 2207613190145L) != 0)) {
				{
				State = 1086;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,148,Context) ) {
				case 1:
					{
					State = 1082;
					type_member();
					}
					break;
				case 2:
					{
					State = 1083;
					type();
					}
					break;
				case 3:
					{
					State = 1084;
					Match(NewLine);
					}
					break;
				case 4:
					{
					State = 1085;
					access_modifier_member_group();
					}
					break;
				}
				}
				State = 1090;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1091;
			Match(Close_Brace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Try_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Try() { return GetToken(DassieParser.Try, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Try_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_try_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterTry_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitTry_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTry_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Try_branchContext try_branch() {
		Try_branchContext _localctx = new Try_branchContext(Context, State);
		EnterRule(_localctx, 110, RULE_try_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1093;
			Match(Try);
			State = 1094;
			Match(Equals);
			State = 1095;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Catch_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Catch() { return GetToken(DassieParser.Catch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(DassieParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(DassieParser.Colon, 0); }
		public Catch_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catch_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterCatch_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitCatch_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatch_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Catch_branchContext catch_branch() {
		Catch_branchContext _localctx = new Catch_branchContext(Context, State);
		EnterRule(_localctx, 112, RULE_catch_branch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1097;
			Match(Catch);
			State = 1103;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Func || _la==Open_Paren || _la==Less_Than || _la==Identifier) {
				{
				State = 1100;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,150,Context) ) {
				case 1:
					{
					State = 1098;
					Match(Identifier);
					State = 1099;
					Match(Colon);
					}
					break;
				}
				State = 1102;
				type_name(0);
				}
			}

			State = 1105;
			Match(Equals);
			State = 1106;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Finally_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Finally() { return GetToken(DassieParser.Finally, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Finally_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finally_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterFinally_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitFinally_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinally_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Finally_branchContext finally_branch() {
		Finally_branchContext _localctx = new Finally_branchContext(Context, State);
		EnterRule(_localctx, 114, RULE_finally_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1108;
			Match(Finally);
			State = 1109;
			Match(Equals);
			State = 1110;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fault_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Fault() { return GetToken(DassieParser.Fault, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Fault_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fault_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterFault_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitFault_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFault_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fault_branchContext fault_branch() {
		Fault_branchContext _localctx = new Fault_branchContext(Context, State);
		EnterRule(_localctx, 116, RULE_fault_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1112;
			Match(Fault);
			State = 1113;
			Match(Equals);
			State = 1114;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_arg_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Bracket() { return GetToken(DassieParser.Open_Bracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext[] type_name() {
			return GetRuleContexts<Type_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name(int i) {
			return GetRuleContext<Type_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Bracket() { return GetToken(DassieParser.Close_Bracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(DassieParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(DassieParser.Comma, i);
		}
		public Type_arg_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_arg_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterType_arg_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitType_arg_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_arg_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_arg_listContext type_arg_list() {
		Type_arg_listContext _localctx = new Type_arg_listContext(Context, State);
		EnterRule(_localctx, 118, RULE_type_arg_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1116;
			Match(Open_Bracket);
			State = 1117;
			type_name(0);
			State = 1122;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 1118;
				Match(Comma);
				State = 1119;
				type_name(0);
				}
				}
				State = 1124;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1125;
			Match(Close_Bracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus_Equals() { return GetToken(DassieParser.Plus_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus_Equals() { return GetToken(DassieParser.Minus_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Asterisk_Equals() { return GetToken(DassieParser.Asterisk_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Slash_Equals() { return GetToken(DassieParser.Slash_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Asterisk_Equals() { return GetToken(DassieParser.Double_Asterisk_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Percent_Equals() { return GetToken(DassieParser.Percent_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Percent_Equals() { return GetToken(DassieParser.Double_Percent_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tilde_Equals() { return GetToken(DassieParser.Tilde_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Less_Than_Equals() { return GetToken(DassieParser.Double_Less_Than_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Greater_Than_Equals() { return GetToken(DassieParser.Double_Greater_Than_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bar_Equals() { return GetToken(DassieParser.Bar_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ampersand_Equals() { return GetToken(DassieParser.Ampersand_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Bar_Equals() { return GetToken(DassieParser.Double_Bar_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Ampersand_Equals() { return GetToken(DassieParser.Double_Ampersand_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Caret_Equals() { return GetToken(DassieParser.Caret_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot_Equals() { return GetToken(DassieParser.Dot_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Question_Mark_Equals() { return GetToken(DassieParser.Double_Question_Mark_Equals, 0); }
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterAssignment_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitAssignment_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_operatorContext assignment_operator() {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(Context, State);
		EnterRule(_localctx, 120, RULE_assignment_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1127;
			_la = TokenStream.LA(1);
			if ( !(_la==Dot_Equals || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 23769607467041281L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_pointer_parameter_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Paren() { return GetToken(DassieParser.Open_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext[] type_name() {
			return GetRuleContexts<Type_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name(int i) {
			return GetRuleContext<Type_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Paren() { return GetToken(DassieParser.Close_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(DassieParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(DassieParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(DassieParser.Comma, i);
		}
		public Function_pointer_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_pointer_parameter_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterFunction_pointer_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitFunction_pointer_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_pointer_parameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_pointer_parameter_listContext function_pointer_parameter_list() {
		Function_pointer_parameter_listContext _localctx = new Function_pointer_parameter_listContext(Context, State);
		EnterRule(_localctx, 122, RULE_function_pointer_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1140;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,154,Context) ) {
			case 1:
				{
				State = 1129;
				Match(Open_Paren);
				State = 1130;
				type_name(0);
				State = 1135;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 1131;
					Match(Comma);
					State = 1132;
					type_name(0);
					}
					}
					State = 1137;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1138;
				Match(Close_Paren);
				}
				break;
			}
			State = 1144;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 1142;
				Match(Colon);
				State = 1143;
				type_name(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Match_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dollar_Sign() { return GetToken(DassieParser.Dollar_Sign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Match_blockContext match_block() {
			return GetRuleContext<Match_blockContext>(0);
		}
		public Match_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_match_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterMatch_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitMatch_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatch_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Match_exprContext match_expr() {
		Match_exprContext _localctx = new Match_exprContext(Context, State);
		EnterRule(_localctx, 124, RULE_match_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1146;
			Match(Dollar_Sign);
			State = 1147;
			expression(0);
			State = 1148;
			Match(Equals);
			State = 1149;
			match_block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Match_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Brace() { return GetToken(DassieParser.Open_Brace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Brace() { return GetToken(DassieParser.Close_Brace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(DassieParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(DassieParser.NewLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Match_first_caseContext match_first_case() {
			return GetRuleContext<Match_first_caseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Match_alternative_caseContext[] match_alternative_case() {
			return GetRuleContexts<Match_alternative_caseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Match_alternative_caseContext match_alternative_case(int i) {
			return GetRuleContext<Match_alternative_caseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Match_default_caseContext match_default_case() {
			return GetRuleContext<Match_default_caseContext>(0);
		}
		public Match_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_match_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterMatch_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitMatch_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatch_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Match_blockContext match_block() {
		Match_blockContext _localctx = new Match_blockContext(Context, State);
		EnterRule(_localctx, 126, RULE_match_block);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1151;
			Match(Open_Brace);
			State = 1155;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,156,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1152;
					Match(NewLine);
					}
					} 
				}
				State = 1157;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,156,Context);
			}
			State = 1165;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Question_Mark) {
				{
				State = 1158;
				match_first_case();
				State = 1162;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,157,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1159;
						Match(NewLine);
						}
						} 
					}
					State = 1164;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,157,Context);
				}
				}
			}

			State = 1176;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,160,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1167;
					match_alternative_case();
					State = 1171;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,159,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 1168;
							Match(NewLine);
							}
							} 
						}
						State = 1173;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,159,Context);
					}
					}
					} 
				}
				State = 1178;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,160,Context);
			}
			State = 1180;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 1179;
				match_default_case();
				}
			}

			State = 1185;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NewLine) {
				{
				{
				State = 1182;
				Match(NewLine);
				}
				}
				State = 1187;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1188;
			Match(Close_Brace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Match_first_caseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Question_Mark() { return GetToken(DassieParser.Question_Mark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Match_case_expressionContext match_case_expression() {
			return GetRuleContext<Match_case_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Match_first_caseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_match_first_case; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterMatch_first_case(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitMatch_first_case(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatch_first_case(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Match_first_caseContext match_first_case() {
		Match_first_caseContext _localctx = new Match_first_caseContext(Context, State);
		EnterRule(_localctx, 128, RULE_match_first_case);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1190;
			Match(Question_Mark);
			State = 1191;
			match_case_expression();
			State = 1192;
			Match(Equals);
			State = 1193;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Match_alternative_caseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(DassieParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Match_case_expressionContext match_case_expression() {
			return GetRuleContext<Match_case_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Match_alternative_caseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_match_alternative_case; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterMatch_alternative_case(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitMatch_alternative_case(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatch_alternative_case(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Match_alternative_caseContext match_alternative_case() {
		Match_alternative_caseContext _localctx = new Match_alternative_caseContext(Context, State);
		EnterRule(_localctx, 130, RULE_match_alternative_case);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1195;
			Match(Colon);
			State = 1196;
			match_case_expression();
			State = 1197;
			Match(Equals);
			State = 1198;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Match_default_caseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(DassieParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Match_default_caseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_match_default_case; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterMatch_default_case(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitMatch_default_case(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatch_default_case(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Match_default_caseContext match_default_case() {
		Match_default_caseContext _localctx = new Match_default_caseContext(Context, State);
		EnterRule(_localctx, 132, RULE_match_default_case);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1200;
			Match(Colon);
			State = 1201;
			Match(Equals);
			State = 1202;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Match_case_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Match_case_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_match_case_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterMatch_case_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitMatch_case_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatch_case_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Match_case_expressionContext match_case_expression() {
		Match_case_expressionContext _localctx = new Match_case_expressionContext(Context, State);
		EnterRule(_localctx, 134, RULE_match_case_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1204;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_functionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(DassieParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_listContext parameter_list() {
			return GetRuleContext<Parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(DassieParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(DassieParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(DassieParser.NewLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Var() { return GetToken(DassieParser.Var, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Val() { return GetToken(DassieParser.Val, 0); }
		public Local_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterLocal_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitLocal_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_functionContext local_function() {
		Local_functionContext _localctx = new Local_functionContext(Context, State);
		EnterRule(_localctx, 136, RULE_local_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Var || _la==Val) {
				{
				State = 1206;
				_la = TokenStream.LA(1);
				if ( !(_la==Var || _la==Val) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1209;
			Match(Identifier);
			State = 1211;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Open_Bracket) {
				{
				State = 1210;
				type_parameter_list();
				}
			}

			State = 1214;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2199123918848L) != 0) || ((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & 274877906979L) != 0)) {
				{
				State = 1213;
				parameter_list();
				}
			}

			State = 1218;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 1216;
				Match(Colon);
				State = 1217;
				type_name(0);
				}
			}

			State = 1220;
			Match(Equals);
			State = 1224;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NewLine) {
				{
				{
				State = 1221;
				Match(NewLine);
				}
				}
				State = 1226;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1227;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 8: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 20: return type_name_sempred((Type_nameContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 61);
		case 1: return Precpred(Context, 59);
		case 2: return Precpred(Context, 58);
		case 3: return Precpred(Context, 56);
		case 4: return Precpred(Context, 55);
		case 5: return Precpred(Context, 54);
		case 6: return Precpred(Context, 53);
		case 7: return Precpred(Context, 52);
		case 8: return Precpred(Context, 51);
		case 9: return Precpred(Context, 50);
		case 10: return Precpred(Context, 49);
		case 11: return Precpred(Context, 48);
		case 12: return Precpred(Context, 47);
		case 13: return Precpred(Context, 45);
		case 14: return Precpred(Context, 43);
		case 15: return Precpred(Context, 41);
		case 16: return Precpred(Context, 37);
		case 17: return Precpred(Context, 32);
		case 18: return Precpred(Context, 30);
		case 19: return Precpred(Context, 29);
		case 20: return Precpred(Context, 28);
		case 21: return Precpred(Context, 2);
		case 22: return Precpred(Context, 46);
		case 23: return Precpred(Context, 44);
		case 24: return Precpred(Context, 42);
		case 25: return Precpred(Context, 40);
		case 26: return Precpred(Context, 39);
		case 27: return Precpred(Context, 27);
		case 28: return Precpred(Context, 21);
		case 29: return Precpred(Context, 19);
		case 30: return Precpred(Context, 7);
		case 31: return Precpred(Context, 6);
		case 32: return Precpred(Context, 3);
		}
		return true;
	}
	private bool type_name_sempred(Type_nameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 33: return Precpred(Context, 4);
		case 34: return Precpred(Context, 3);
		case 35: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,134,1230,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,1,0,1,0,5,0,141,8,0,
		10,0,12,0,144,9,0,1,0,1,0,5,0,148,8,0,10,0,12,0,151,9,0,3,0,153,8,0,1,
		0,1,0,1,0,1,1,1,1,3,1,160,8,1,1,2,1,2,1,2,5,2,165,8,2,10,2,12,2,168,9,
		2,1,3,1,3,5,3,172,8,3,10,3,12,3,175,9,3,1,3,1,3,5,3,179,8,3,10,3,12,3,
		182,9,3,1,4,3,4,185,8,4,1,4,1,4,1,4,1,4,5,4,191,8,4,10,4,12,4,194,9,4,
		1,4,5,4,197,8,4,10,4,12,4,200,9,4,1,4,3,4,203,8,4,1,4,1,4,1,4,1,4,1,4,
		1,4,5,4,211,8,4,10,4,12,4,214,9,4,1,4,1,4,1,4,5,4,219,8,4,10,4,12,4,222,
		9,4,3,4,224,8,4,1,5,1,5,1,5,1,6,1,6,1,6,5,6,232,8,6,10,6,12,6,235,9,6,
		1,7,1,7,1,7,5,7,240,8,7,10,7,12,7,243,9,7,1,7,3,7,246,8,7,1,7,1,7,1,8,
		1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,262,8,8,1,8,1,8,1,8,1,
		8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,276,8,8,1,8,1,8,1,8,3,8,281,8,8,
		1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,4,8,292,8,8,11,8,12,8,293,1,8,1,8,
		1,8,1,8,5,8,300,8,8,10,8,12,8,303,9,8,1,8,5,8,306,8,8,10,8,12,8,309,9,
		8,1,8,5,8,312,8,8,10,8,12,8,315,9,8,1,8,3,8,318,8,8,1,8,1,8,5,8,322,8,
		8,10,8,12,8,325,9,8,1,8,5,8,328,8,8,10,8,12,8,331,9,8,1,8,5,8,334,8,8,
		10,8,12,8,337,9,8,1,8,3,8,340,8,8,1,8,1,8,3,8,344,8,8,1,8,3,8,347,8,8,
		1,8,1,8,1,8,3,8,352,8,8,1,8,3,8,355,8,8,1,8,3,8,358,8,8,1,8,1,8,1,8,1,
		8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,379,
		8,8,10,8,12,8,382,9,8,1,8,3,8,385,8,8,1,8,3,8,388,8,8,1,8,1,8,1,8,1,8,
		1,8,1,8,1,8,5,8,397,8,8,10,8,12,8,400,9,8,3,8,402,8,8,1,8,1,8,1,8,1,8,
		1,8,5,8,409,8,8,10,8,12,8,412,9,8,3,8,414,8,8,1,8,1,8,1,8,1,8,1,8,1,8,
		1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,430,8,8,10,8,12,8,433,9,8,3,8,435,
		8,8,1,8,1,8,1,8,1,8,1,8,3,8,442,8,8,1,8,3,8,445,8,8,1,8,1,8,1,8,1,8,4,
		8,451,8,8,11,8,12,8,452,1,8,1,8,3,8,457,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
		8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
		1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
		8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
		1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
		8,4,8,536,8,8,11,8,12,8,537,1,8,1,8,1,8,4,8,543,8,8,11,8,12,8,544,1,8,
		1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
		8,4,8,566,8,8,11,8,12,8,567,1,8,3,8,571,8,8,1,8,3,8,574,8,8,5,8,576,8,
		8,10,8,12,8,579,9,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,590,8,9,1,
		10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,
		16,1,16,1,17,1,17,1,17,1,18,1,18,1,19,5,19,614,8,19,10,19,12,19,617,9,
		19,1,19,1,19,5,19,621,8,19,10,19,12,19,624,9,19,1,19,3,19,627,8,19,1,20,
		1,20,1,20,1,20,1,20,1,20,4,20,635,8,20,11,20,12,20,636,1,20,1,20,1,20,
		1,20,1,20,1,20,3,20,645,8,20,1,20,1,20,1,20,1,20,1,20,1,20,5,20,653,8,
		20,10,20,12,20,656,9,20,1,21,1,21,5,21,660,8,21,10,21,12,21,663,9,21,1,
		21,1,21,1,22,1,22,1,22,1,22,1,22,3,22,672,8,22,1,23,1,23,1,23,1,24,1,24,
		1,24,1,24,1,24,3,24,682,8,24,1,25,1,25,1,25,1,25,3,25,688,8,25,1,26,1,
		26,1,26,1,26,1,26,3,26,695,8,26,1,27,1,27,1,27,1,27,1,27,3,27,702,8,27,
		1,28,1,28,1,28,1,29,1,29,3,29,709,8,29,1,29,1,29,1,29,1,29,1,29,3,29,716,
		8,29,1,29,5,29,719,8,29,10,29,12,29,722,9,29,1,29,3,29,725,8,29,1,30,1,
		30,1,30,3,30,730,8,30,1,30,1,30,5,30,734,8,30,10,30,12,30,737,9,30,1,31,
		1,31,1,31,1,31,1,31,1,32,1,32,3,32,746,8,32,1,32,1,32,3,32,750,8,32,1,
		32,1,32,3,32,754,8,32,3,32,756,8,32,1,33,1,33,3,33,760,8,33,1,33,1,33,
		1,33,3,33,765,8,33,1,33,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,36,1,
		36,3,36,778,8,36,3,36,780,8,36,1,37,1,37,1,38,5,38,785,8,38,10,38,12,38,
		788,9,38,1,38,1,38,3,38,792,8,38,1,38,3,38,795,8,38,1,38,1,38,1,38,3,38,
		800,8,38,1,38,3,38,803,8,38,1,38,3,38,806,8,38,1,38,1,38,3,38,810,8,38,
		1,39,1,39,1,39,1,39,5,39,816,8,39,10,39,12,39,819,9,39,1,39,1,39,1,40,
		5,40,824,8,40,10,40,12,40,827,9,40,1,40,3,40,830,8,40,1,40,1,40,1,40,1,
		40,1,40,5,40,837,8,40,10,40,12,40,840,9,40,3,40,842,8,40,1,41,1,41,1,42,
		1,42,1,43,1,43,1,43,1,43,5,43,852,8,43,10,43,12,43,855,9,43,1,44,3,44,
		858,8,44,1,44,1,44,1,44,3,44,863,8,44,1,44,3,44,866,8,44,1,44,1,44,1,44,
		3,44,871,8,44,1,44,3,44,874,8,44,1,44,1,44,1,44,3,44,879,8,44,1,45,1,45,
		1,46,1,46,1,47,1,47,1,48,5,48,888,8,48,10,48,12,48,891,9,48,1,48,3,48,
		894,8,48,1,48,3,48,897,8,48,1,48,5,48,900,8,48,10,48,12,48,903,9,48,1,
		48,3,48,906,8,48,1,48,3,48,909,8,48,1,48,1,48,3,48,913,8,48,1,48,3,48,
		916,8,48,1,48,1,48,3,48,920,8,48,1,48,1,48,5,48,924,8,48,10,48,12,48,927,
		9,48,1,48,3,48,930,8,48,1,48,5,48,933,8,48,10,48,12,48,936,9,48,1,48,3,
		48,939,8,48,1,48,3,48,942,8,48,1,48,5,48,945,8,48,10,48,12,48,948,9,48,
		1,48,3,48,951,8,48,1,48,3,48,954,8,48,1,48,3,48,957,8,48,1,48,1,48,3,48,
		961,8,48,1,48,1,48,1,48,5,48,966,8,48,10,48,12,48,969,9,48,1,48,3,48,972,
		8,48,1,48,3,48,975,8,48,1,48,5,48,978,8,48,10,48,12,48,981,9,48,1,48,1,
		48,1,48,1,48,3,48,987,8,48,1,48,1,48,1,48,3,48,992,8,48,1,48,1,48,5,48,
		996,8,48,10,48,12,48,999,9,48,1,48,1,48,3,48,1003,8,48,1,49,1,49,1,49,
		3,49,1008,8,49,1,49,5,49,1011,8,49,10,49,12,49,1014,9,49,1,49,1,49,1,49,
		1,49,5,49,1020,8,49,10,49,12,49,1023,9,49,1,49,1,49,1,50,1,50,1,50,1,50,
		5,50,1031,8,50,10,50,12,50,1034,9,50,3,50,1036,8,50,1,50,1,50,1,50,1,50,
		5,50,1042,8,50,10,50,12,50,1045,9,50,3,50,1047,8,50,1,51,1,51,1,52,3,52,
		1052,8,52,1,52,3,52,1055,8,52,1,52,3,52,1058,8,52,1,52,1,52,3,52,1062,
		8,52,1,52,1,52,3,52,1066,8,52,1,52,3,52,1069,8,52,1,52,1,52,3,52,1073,
		8,52,1,53,3,53,1076,8,53,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,
		5,54,1087,8,54,10,54,12,54,1090,9,54,1,54,1,54,1,55,1,55,1,55,1,55,1,56,
		1,56,1,56,3,56,1101,8,56,1,56,3,56,1104,8,56,1,56,1,56,1,56,1,57,1,57,
		1,57,1,57,1,58,1,58,1,58,1,58,1,59,1,59,1,59,1,59,5,59,1121,8,59,10,59,
		12,59,1124,9,59,1,59,1,59,1,60,1,60,1,61,1,61,1,61,1,61,5,61,1134,8,61,
		10,61,12,61,1137,9,61,1,61,1,61,3,61,1141,8,61,1,61,1,61,3,61,1145,8,61,
		1,62,1,62,1,62,1,62,1,62,1,63,1,63,5,63,1154,8,63,10,63,12,63,1157,9,63,
		1,63,1,63,5,63,1161,8,63,10,63,12,63,1164,9,63,3,63,1166,8,63,1,63,1,63,
		5,63,1170,8,63,10,63,12,63,1173,9,63,5,63,1175,8,63,10,63,12,63,1178,9,
		63,1,63,3,63,1181,8,63,1,63,5,63,1184,8,63,10,63,12,63,1187,9,63,1,63,
		1,63,1,64,1,64,1,64,1,64,1,64,1,65,1,65,1,65,1,65,1,65,1,66,1,66,1,66,
		1,66,1,67,1,67,1,68,3,68,1208,8,68,1,68,1,68,3,68,1212,8,68,1,68,3,68,
		1215,8,68,1,68,1,68,3,68,1219,8,68,1,68,1,68,5,68,1223,8,68,10,68,12,68,
		1226,9,68,1,68,1,68,1,68,0,2,16,40,69,0,2,4,6,8,10,12,14,16,18,20,22,24,
		26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,
		74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,
		116,118,120,122,124,126,128,130,132,134,136,0,16,1,0,37,38,1,0,25,26,1,
		0,97,98,1,0,93,96,1,0,127,129,1,0,34,35,1,0,132,133,2,0,87,87,90,90,1,
		0,49,50,2,0,12,12,14,14,3,0,24,24,26,26,39,39,3,0,99,99,101,101,114,114,
		2,0,12,14,16,16,3,0,15,15,21,23,40,40,1,0,88,89,14,0,54,54,68,68,77,77,
		85,86,91,92,100,100,102,102,104,104,106,106,109,109,112,114,118,118,120,
		120,122,122,1407,0,142,1,0,0,0,2,159,1,0,0,0,4,166,1,0,0,0,6,169,1,0,0,
		0,8,223,1,0,0,0,10,225,1,0,0,0,12,228,1,0,0,0,14,236,1,0,0,0,16,456,1,
		0,0,0,18,589,1,0,0,0,20,591,1,0,0,0,22,593,1,0,0,0,24,597,1,0,0,0,26,599,
		1,0,0,0,28,601,1,0,0,0,30,603,1,0,0,0,32,605,1,0,0,0,34,607,1,0,0,0,36,
		610,1,0,0,0,38,626,1,0,0,0,40,644,1,0,0,0,42,657,1,0,0,0,44,666,1,0,0,
		0,46,673,1,0,0,0,48,676,1,0,0,0,50,683,1,0,0,0,52,689,1,0,0,0,54,696,1,
		0,0,0,56,703,1,0,0,0,58,708,1,0,0,0,60,726,1,0,0,0,62,738,1,0,0,0,64,755,
		1,0,0,0,66,757,1,0,0,0,68,769,1,0,0,0,70,771,1,0,0,0,72,779,1,0,0,0,74,
		781,1,0,0,0,76,786,1,0,0,0,78,811,1,0,0,0,80,825,1,0,0,0,82,843,1,0,0,
		0,84,845,1,0,0,0,86,847,1,0,0,0,88,878,1,0,0,0,90,880,1,0,0,0,92,882,1,
		0,0,0,94,884,1,0,0,0,96,1002,1,0,0,0,98,1007,1,0,0,0,100,1046,1,0,0,0,
		102,1048,1,0,0,0,104,1051,1,0,0,0,106,1075,1,0,0,0,108,1081,1,0,0,0,110,
		1093,1,0,0,0,112,1097,1,0,0,0,114,1108,1,0,0,0,116,1112,1,0,0,0,118,1116,
		1,0,0,0,120,1127,1,0,0,0,122,1140,1,0,0,0,124,1146,1,0,0,0,126,1151,1,
		0,0,0,128,1190,1,0,0,0,130,1195,1,0,0,0,132,1200,1,0,0,0,134,1204,1,0,
		0,0,136,1207,1,0,0,0,138,141,3,8,4,0,139,141,5,2,0,0,140,138,1,0,0,0,140,
		139,1,0,0,0,141,144,1,0,0,0,142,140,1,0,0,0,142,143,1,0,0,0,143,152,1,
		0,0,0,144,142,1,0,0,0,145,149,3,10,5,0,146,148,5,2,0,0,147,146,1,0,0,0,
		148,151,1,0,0,0,149,147,1,0,0,0,149,150,1,0,0,0,150,153,1,0,0,0,151,149,
		1,0,0,0,152,145,1,0,0,0,152,153,1,0,0,0,153,154,1,0,0,0,154,155,3,2,1,
		0,155,156,5,0,0,1,156,1,1,0,0,0,157,160,3,4,2,0,158,160,3,6,3,0,159,157,
		1,0,0,0,159,158,1,0,0,0,160,3,1,0,0,0,161,165,3,16,8,0,162,165,3,136,68,
		0,163,165,5,2,0,0,164,161,1,0,0,0,164,162,1,0,0,0,164,163,1,0,0,0,165,
		168,1,0,0,0,166,164,1,0,0,0,166,167,1,0,0,0,167,5,1,0,0,0,168,166,1,0,
		0,0,169,173,3,76,38,0,170,172,5,2,0,0,171,170,1,0,0,0,172,175,1,0,0,0,
		173,171,1,0,0,0,173,174,1,0,0,0,174,180,1,0,0,0,175,173,1,0,0,0,176,179,
		3,76,38,0,177,179,5,2,0,0,178,176,1,0,0,0,178,177,1,0,0,0,179,182,1,0,
		0,0,180,178,1,0,0,0,180,181,1,0,0,0,181,7,1,0,0,0,182,180,1,0,0,0,183,
		185,5,69,0,0,184,183,1,0,0,0,184,185,1,0,0,0,185,186,1,0,0,0,186,187,5,
		6,0,0,187,198,3,12,6,0,188,192,5,49,0,0,189,191,5,2,0,0,190,189,1,0,0,
		0,191,194,1,0,0,0,192,190,1,0,0,0,192,193,1,0,0,0,193,195,1,0,0,0,194,
		192,1,0,0,0,195,197,3,12,6,0,196,188,1,0,0,0,197,200,1,0,0,0,198,196,1,
		0,0,0,198,199,1,0,0,0,199,224,1,0,0,0,200,198,1,0,0,0,201,203,5,69,0,0,
		202,201,1,0,0,0,202,203,1,0,0,0,203,204,1,0,0,0,204,205,5,6,0,0,205,206,
		5,126,0,0,206,207,5,114,0,0,207,220,3,12,6,0,208,212,5,49,0,0,209,211,
		5,2,0,0,210,209,1,0,0,0,211,214,1,0,0,0,212,210,1,0,0,0,212,213,1,0,0,
		0,213,215,1,0,0,0,214,212,1,0,0,0,215,216,5,126,0,0,216,217,5,114,0,0,
		217,219,3,12,6,0,218,208,1,0,0,0,219,222,1,0,0,0,220,218,1,0,0,0,220,221,
		1,0,0,0,221,224,1,0,0,0,222,220,1,0,0,0,223,184,1,0,0,0,223,202,1,0,0,
		0,224,9,1,0,0,0,225,226,5,7,0,0,226,227,3,12,6,0,227,11,1,0,0,0,228,233,
		5,126,0,0,229,230,5,51,0,0,230,232,5,126,0,0,231,229,1,0,0,0,232,235,1,
		0,0,0,233,231,1,0,0,0,233,234,1,0,0,0,234,13,1,0,0,0,235,233,1,0,0,0,236,
		245,5,47,0,0,237,240,5,2,0,0,238,240,3,16,8,0,239,237,1,0,0,0,239,238,
		1,0,0,0,240,243,1,0,0,0,241,239,1,0,0,0,241,242,1,0,0,0,242,246,1,0,0,
		0,243,241,1,0,0,0,244,246,3,68,34,0,245,241,1,0,0,0,245,244,1,0,0,0,246,
		247,1,0,0,0,247,248,5,48,0,0,248,15,1,0,0,0,249,250,6,8,-1,0,250,251,5,
		134,0,0,251,457,3,16,8,62,252,253,5,116,0,0,253,457,3,16,8,60,254,255,
		5,69,0,0,255,457,3,16,8,57,256,257,5,87,0,0,257,457,3,16,8,38,258,261,
		3,100,50,0,259,260,5,55,0,0,260,262,3,40,20,0,261,259,1,0,0,0,261,262,
		1,0,0,0,262,263,1,0,0,0,263,264,5,115,0,0,264,265,3,16,8,36,265,457,1,
		0,0,0,266,267,7,0,0,0,267,268,3,122,61,0,268,269,3,16,8,35,269,457,1,0,
		0,0,270,271,5,78,0,0,271,457,3,40,20,0,272,273,5,80,0,0,273,457,3,16,8,
		33,274,276,7,1,0,0,275,274,1,0,0,0,275,276,1,0,0,0,276,277,1,0,0,0,277,
		280,5,126,0,0,278,279,5,55,0,0,279,281,3,40,20,0,280,278,1,0,0,0,280,281,
		1,0,0,0,281,282,1,0,0,0,282,283,3,120,60,0,283,284,3,16,8,31,284,457,1,
		0,0,0,285,286,5,52,0,0,286,457,3,16,8,26,287,457,5,52,0,0,288,289,5,76,
		0,0,289,457,3,24,12,0,290,292,3,60,30,0,291,290,1,0,0,0,292,293,1,0,0,
		0,293,291,1,0,0,0,293,294,1,0,0,0,294,295,1,0,0,0,295,296,3,16,8,23,296,
		457,1,0,0,0,297,301,3,44,22,0,298,300,5,2,0,0,299,298,1,0,0,0,300,303,
		1,0,0,0,301,299,1,0,0,0,301,302,1,0,0,0,302,307,1,0,0,0,303,301,1,0,0,
		0,304,306,3,48,24,0,305,304,1,0,0,0,306,309,1,0,0,0,307,305,1,0,0,0,307,
		308,1,0,0,0,308,313,1,0,0,0,309,307,1,0,0,0,310,312,5,2,0,0,311,310,1,
		0,0,0,312,315,1,0,0,0,313,311,1,0,0,0,313,314,1,0,0,0,314,317,1,0,0,0,
		315,313,1,0,0,0,316,318,3,50,25,0,317,316,1,0,0,0,317,318,1,0,0,0,318,
		457,1,0,0,0,319,323,3,52,26,0,320,322,5,2,0,0,321,320,1,0,0,0,322,325,
		1,0,0,0,323,321,1,0,0,0,323,324,1,0,0,0,324,329,1,0,0,0,325,323,1,0,0,
		0,326,328,3,54,27,0,327,326,1,0,0,0,328,331,1,0,0,0,329,327,1,0,0,0,329,
		330,1,0,0,0,330,335,1,0,0,0,331,329,1,0,0,0,332,334,5,2,0,0,333,332,1,
		0,0,0,334,337,1,0,0,0,335,333,1,0,0,0,335,336,1,0,0,0,336,339,1,0,0,0,
		337,335,1,0,0,0,338,340,3,50,25,0,339,338,1,0,0,0,339,340,1,0,0,0,340,
		457,1,0,0,0,341,343,5,72,0,0,342,344,5,41,0,0,343,342,1,0,0,0,343,344,
		1,0,0,0,344,346,1,0,0,0,345,347,7,1,0,0,346,345,1,0,0,0,346,347,1,0,0,
		0,347,348,1,0,0,0,348,354,5,126,0,0,349,351,5,49,0,0,350,352,7,1,0,0,351,
		350,1,0,0,0,351,352,1,0,0,0,352,353,1,0,0,0,353,355,5,126,0,0,354,349,
		1,0,0,0,354,355,1,0,0,0,355,357,1,0,0,0,356,358,5,42,0,0,357,356,1,0,0,
		0,357,358,1,0,0,0,358,359,1,0,0,0,359,360,5,56,0,0,360,361,3,16,8,0,361,
		362,1,0,0,0,362,363,5,114,0,0,363,364,3,16,8,18,364,457,1,0,0,0,365,366,
		5,72,0,0,366,367,3,16,8,0,367,368,5,114,0,0,368,369,3,16,8,17,369,457,
		1,0,0,0,370,371,5,74,0,0,371,372,3,16,8,0,372,373,5,114,0,0,373,374,3,
		16,8,16,374,457,1,0,0,0,375,457,3,124,62,0,376,380,3,110,55,0,377,379,
		3,112,56,0,378,377,1,0,0,0,379,382,1,0,0,0,380,378,1,0,0,0,380,381,1,0,
		0,0,381,384,1,0,0,0,382,380,1,0,0,0,383,385,3,116,58,0,384,383,1,0,0,0,
		384,385,1,0,0,0,385,387,1,0,0,0,386,388,3,114,57,0,387,386,1,0,0,0,387,
		388,1,0,0,0,388,457,1,0,0,0,389,390,5,30,0,0,390,457,3,16,8,13,391,457,
		5,30,0,0,392,401,5,73,0,0,393,398,3,16,8,0,394,395,5,49,0,0,395,397,3,
		16,8,0,396,394,1,0,0,0,397,400,1,0,0,0,398,396,1,0,0,0,398,399,1,0,0,0,
		399,402,1,0,0,0,400,398,1,0,0,0,401,393,1,0,0,0,401,402,1,0,0,0,402,403,
		1,0,0,0,403,457,5,46,0,0,404,413,5,45,0,0,405,410,3,16,8,0,406,407,5,49,
		0,0,407,409,3,16,8,0,408,406,1,0,0,0,409,412,1,0,0,0,410,408,1,0,0,0,410,
		411,1,0,0,0,411,414,1,0,0,0,412,410,1,0,0,0,413,405,1,0,0,0,413,414,1,
		0,0,0,414,415,1,0,0,0,415,457,5,46,0,0,416,434,5,45,0,0,417,418,5,45,0,
		0,418,419,3,16,8,0,419,420,5,49,0,0,420,421,3,16,8,0,421,431,5,46,0,0,
		422,423,5,49,0,0,423,424,5,45,0,0,424,425,3,16,8,0,425,426,5,49,0,0,426,
		427,3,16,8,0,427,428,5,46,0,0,428,430,1,0,0,0,429,422,1,0,0,0,430,433,
		1,0,0,0,431,429,1,0,0,0,431,432,1,0,0,0,432,435,1,0,0,0,433,431,1,0,0,
		0,434,417,1,0,0,0,434,435,1,0,0,0,435,436,1,0,0,0,436,457,5,46,0,0,437,
		457,3,18,9,0,438,457,3,14,7,0,439,441,3,12,6,0,440,442,3,118,59,0,441,
		440,1,0,0,0,441,442,1,0,0,0,442,444,1,0,0,0,443,445,3,58,29,0,444,443,
		1,0,0,0,444,445,1,0,0,0,445,457,1,0,0,0,446,447,5,41,0,0,447,450,3,16,
		8,0,448,449,5,49,0,0,449,451,3,16,8,0,450,448,1,0,0,0,451,452,1,0,0,0,
		452,450,1,0,0,0,452,453,1,0,0,0,453,454,1,0,0,0,454,455,5,42,0,0,455,457,
		1,0,0,0,456,249,1,0,0,0,456,252,1,0,0,0,456,254,1,0,0,0,456,256,1,0,0,
		0,456,258,1,0,0,0,456,266,1,0,0,0,456,270,1,0,0,0,456,272,1,0,0,0,456,
		275,1,0,0,0,456,285,1,0,0,0,456,287,1,0,0,0,456,288,1,0,0,0,456,291,1,
		0,0,0,456,297,1,0,0,0,456,319,1,0,0,0,456,341,1,0,0,0,456,365,1,0,0,0,
		456,370,1,0,0,0,456,375,1,0,0,0,456,376,1,0,0,0,456,389,1,0,0,0,456,391,
		1,0,0,0,456,392,1,0,0,0,456,404,1,0,0,0,456,416,1,0,0,0,456,437,1,0,0,
		0,456,438,1,0,0,0,456,439,1,0,0,0,456,446,1,0,0,0,457,577,1,0,0,0,458,
		459,10,61,0,0,459,460,5,134,0,0,460,576,3,16,8,62,461,462,10,59,0,0,462,
		463,5,45,0,0,463,464,3,16,8,0,464,465,5,46,0,0,465,466,5,114,0,0,466,467,
		3,16,8,60,467,576,1,0,0,0,468,469,10,58,0,0,469,470,5,105,0,0,470,576,
		3,16,8,58,471,472,10,56,0,0,472,473,5,103,0,0,473,576,3,16,8,57,474,475,
		10,55,0,0,475,476,5,107,0,0,476,576,3,16,8,56,477,478,10,54,0,0,478,479,
		5,110,0,0,479,576,3,16,8,55,480,481,10,53,0,0,481,482,5,111,0,0,482,576,
		3,16,8,54,483,484,10,52,0,0,484,485,5,99,0,0,485,576,3,16,8,53,486,487,
		10,51,0,0,487,488,5,101,0,0,488,576,3,16,8,52,489,490,10,50,0,0,490,491,
		5,119,0,0,491,576,3,16,8,51,492,493,10,49,0,0,493,494,5,121,0,0,494,576,
		3,16,8,50,495,496,10,48,0,0,496,497,7,2,0,0,497,576,3,16,8,49,498,499,
		10,47,0,0,499,500,7,3,0,0,500,576,3,16,8,48,501,502,10,45,0,0,502,503,
		5,87,0,0,503,576,3,16,8,46,504,505,10,43,0,0,505,506,5,81,0,0,506,576,
		3,16,8,44,507,508,10,41,0,0,508,509,5,76,0,0,509,576,3,16,8,42,510,511,
		10,37,0,0,511,512,5,59,0,0,512,576,3,16,8,38,513,514,10,32,0,0,514,515,
		5,53,0,0,515,576,3,16,8,33,516,517,10,30,0,0,517,518,5,123,0,0,518,576,
		3,16,8,31,519,520,10,29,0,0,520,521,5,124,0,0,521,576,3,16,8,30,522,523,
		10,28,0,0,523,524,5,52,0,0,524,576,3,16,8,29,525,526,10,2,0,0,526,527,
		3,120,60,0,527,528,3,16,8,3,528,576,1,0,0,0,529,530,10,46,0,0,530,531,
		5,61,0,0,531,576,3,40,20,0,532,535,10,44,0,0,533,534,5,90,0,0,534,536,
		3,16,8,0,535,533,1,0,0,0,536,537,1,0,0,0,537,535,1,0,0,0,537,538,1,0,0,
		0,538,576,1,0,0,0,539,542,10,42,0,0,540,541,5,84,0,0,541,543,3,16,8,0,
		542,540,1,0,0,0,543,544,1,0,0,0,544,542,1,0,0,0,544,545,1,0,0,0,545,576,
		1,0,0,0,546,547,10,40,0,0,547,548,5,57,0,0,548,576,3,40,20,0,549,550,10,
		39,0,0,550,551,5,58,0,0,551,576,3,40,20,0,552,553,10,27,0,0,553,576,5,
		52,0,0,554,555,10,21,0,0,555,576,3,46,23,0,556,557,10,19,0,0,557,576,3,
		56,28,0,558,559,10,7,0,0,559,576,5,2,0,0,560,561,10,6,0,0,561,576,5,62,
		0,0,562,565,10,3,0,0,563,564,5,51,0,0,564,566,5,126,0,0,565,563,1,0,0,
		0,566,567,1,0,0,0,567,565,1,0,0,0,567,568,1,0,0,0,568,570,1,0,0,0,569,
		571,3,118,59,0,570,569,1,0,0,0,570,571,1,0,0,0,571,573,1,0,0,0,572,574,
		3,58,29,0,573,572,1,0,0,0,573,574,1,0,0,0,574,576,1,0,0,0,575,458,1,0,
		0,0,575,461,1,0,0,0,575,468,1,0,0,0,575,471,1,0,0,0,575,474,1,0,0,0,575,
		477,1,0,0,0,575,480,1,0,0,0,575,483,1,0,0,0,575,486,1,0,0,0,575,489,1,
		0,0,0,575,492,1,0,0,0,575,495,1,0,0,0,575,498,1,0,0,0,575,501,1,0,0,0,
		575,504,1,0,0,0,575,507,1,0,0,0,575,510,1,0,0,0,575,513,1,0,0,0,575,516,
		1,0,0,0,575,519,1,0,0,0,575,522,1,0,0,0,575,525,1,0,0,0,575,529,1,0,0,
		0,575,532,1,0,0,0,575,539,1,0,0,0,575,546,1,0,0,0,575,549,1,0,0,0,575,
		552,1,0,0,0,575,554,1,0,0,0,575,556,1,0,0,0,575,558,1,0,0,0,575,560,1,
		0,0,0,575,562,1,0,0,0,576,579,1,0,0,0,577,575,1,0,0,0,577,578,1,0,0,0,
		578,17,1,0,0,0,579,577,1,0,0,0,580,590,3,22,11,0,581,590,3,24,12,0,582,
		590,3,26,13,0,583,590,3,28,14,0,584,590,3,30,15,0,585,590,3,32,16,0,586,
		590,3,34,17,0,587,590,3,36,18,0,588,590,3,20,10,0,589,580,1,0,0,0,589,
		581,1,0,0,0,589,582,1,0,0,0,589,583,1,0,0,0,589,584,1,0,0,0,589,585,1,
		0,0,0,589,586,1,0,0,0,589,587,1,0,0,0,589,588,1,0,0,0,590,19,1,0,0,0,591,
		592,5,36,0,0,592,21,1,0,0,0,593,594,5,41,0,0,594,595,3,16,8,0,595,596,
		5,42,0,0,596,23,1,0,0,0,597,598,7,4,0,0,598,25,1,0,0,0,599,600,5,130,0,
		0,600,27,1,0,0,0,601,602,7,5,0,0,602,29,1,0,0,0,603,604,7,6,0,0,604,31,
		1,0,0,0,605,606,5,131,0,0,606,33,1,0,0,0,607,608,5,41,0,0,608,609,5,42,
		0,0,609,35,1,0,0,0,610,611,5,63,0,0,611,37,1,0,0,0,612,614,3,60,30,0,613,
		612,1,0,0,0,614,617,1,0,0,0,615,613,1,0,0,0,615,616,1,0,0,0,616,618,1,
		0,0,0,617,615,1,0,0,0,618,627,5,126,0,0,619,621,3,60,30,0,620,619,1,0,
		0,0,621,624,1,0,0,0,622,620,1,0,0,0,622,623,1,0,0,0,623,625,1,0,0,0,624,
		622,1,0,0,0,625,627,3,12,6,0,626,615,1,0,0,0,626,622,1,0,0,0,627,39,1,
		0,0,0,628,629,6,20,-1,0,629,645,3,38,19,0,630,631,5,41,0,0,631,634,3,40,
		20,0,632,633,5,81,0,0,633,635,3,40,20,0,634,632,1,0,0,0,635,636,1,0,0,
		0,636,634,1,0,0,0,636,637,1,0,0,0,637,638,1,0,0,0,638,639,5,42,0,0,639,
		645,1,0,0,0,640,645,3,62,31,0,641,642,5,37,0,0,642,643,5,103,0,0,643,645,
		3,118,59,0,644,628,1,0,0,0,644,630,1,0,0,0,644,640,1,0,0,0,644,641,1,0,
		0,0,645,654,1,0,0,0,646,647,10,4,0,0,647,653,3,118,59,0,648,649,10,3,0,
		0,649,653,7,7,0,0,650,651,10,2,0,0,651,653,3,42,21,0,652,646,1,0,0,0,652,
		648,1,0,0,0,652,650,1,0,0,0,653,656,1,0,0,0,654,652,1,0,0,0,654,655,1,
		0,0,0,655,41,1,0,0,0,656,654,1,0,0,0,657,661,5,73,0,0,658,660,7,8,0,0,
		659,658,1,0,0,0,660,663,1,0,0,0,661,659,1,0,0,0,661,662,1,0,0,0,662,664,
		1,0,0,0,663,661,1,0,0,0,664,665,5,46,0,0,665,43,1,0,0,0,666,667,5,66,0,
		0,667,668,3,16,8,0,668,671,5,114,0,0,669,672,3,14,7,0,670,672,3,16,8,0,
		671,669,1,0,0,0,671,670,1,0,0,0,672,45,1,0,0,0,673,674,5,66,0,0,674,675,
		3,16,8,0,675,47,1,0,0,0,676,677,5,55,0,0,677,678,3,16,8,0,678,681,5,114,
		0,0,679,682,3,14,7,0,680,682,3,16,8,0,681,679,1,0,0,0,681,680,1,0,0,0,
		682,49,1,0,0,0,683,684,5,55,0,0,684,687,5,114,0,0,685,688,3,14,7,0,686,
		688,3,16,8,0,687,685,1,0,0,0,687,686,1,0,0,0,688,51,1,0,0,0,689,690,5,
		70,0,0,690,691,3,16,8,0,691,694,5,114,0,0,692,695,3,14,7,0,693,695,3,16,
		8,0,694,692,1,0,0,0,694,693,1,0,0,0,695,53,1,0,0,0,696,697,5,71,0,0,697,
		698,3,16,8,0,698,701,5,114,0,0,699,702,3,14,7,0,700,702,3,16,8,0,701,699,
		1,0,0,0,701,700,1,0,0,0,702,55,1,0,0,0,703,704,5,70,0,0,704,705,3,16,8,
		0,705,57,1,0,0,0,706,707,5,126,0,0,707,709,5,55,0,0,708,706,1,0,0,0,708,
		709,1,0,0,0,709,710,1,0,0,0,710,711,3,16,8,0,711,720,1,0,0,0,712,715,5,
		49,0,0,713,714,5,126,0,0,714,716,5,55,0,0,715,713,1,0,0,0,715,716,1,0,
		0,0,716,717,1,0,0,0,717,719,3,16,8,0,718,712,1,0,0,0,719,722,1,0,0,0,720,
		718,1,0,0,0,720,721,1,0,0,0,721,724,1,0,0,0,722,720,1,0,0,0,723,725,5,
		50,0,0,724,723,1,0,0,0,724,725,1,0,0,0,725,59,1,0,0,0,726,727,5,93,0,0,
		727,729,3,40,20,0,728,730,3,58,29,0,729,728,1,0,0,0,729,730,1,0,0,0,730,
		731,1,0,0,0,731,735,5,94,0,0,732,734,5,2,0,0,733,732,1,0,0,0,734,737,1,
		0,0,0,735,733,1,0,0,0,735,736,1,0,0,0,736,61,1,0,0,0,737,735,1,0,0,0,738,
		739,3,38,19,0,739,740,5,45,0,0,740,741,3,78,39,0,741,742,5,46,0,0,742,
		63,1,0,0,0,743,745,5,12,0,0,744,746,5,17,0,0,745,744,1,0,0,0,745,746,1,
		0,0,0,746,756,1,0,0,0,747,749,5,13,0,0,748,750,5,17,0,0,749,748,1,0,0,
		0,749,750,1,0,0,0,750,756,1,0,0,0,751,753,5,14,0,0,752,754,5,17,0,0,753,
		752,1,0,0,0,753,754,1,0,0,0,754,756,1,0,0,0,755,743,1,0,0,0,755,747,1,
		0,0,0,755,751,1,0,0,0,756,65,1,0,0,0,757,759,3,64,32,0,758,760,7,1,0,0,
		759,758,1,0,0,0,759,760,1,0,0,0,760,761,1,0,0,0,761,764,5,126,0,0,762,
		763,5,55,0,0,763,765,3,40,20,0,764,762,1,0,0,0,764,765,1,0,0,0,765,766,
		1,0,0,0,766,767,5,114,0,0,767,768,3,16,8,0,768,67,1,0,0,0,769,770,5,51,
		0,0,770,69,1,0,0,0,771,772,7,9,0,0,772,71,1,0,0,0,773,780,3,70,35,0,774,
		780,5,13,0,0,775,777,5,16,0,0,776,778,5,14,0,0,777,776,1,0,0,0,777,778,
		1,0,0,0,778,780,1,0,0,0,779,773,1,0,0,0,779,774,1,0,0,0,779,775,1,0,0,
		0,780,73,1,0,0,0,781,782,5,18,0,0,782,75,1,0,0,0,783,785,3,60,30,0,784,
		783,1,0,0,0,785,788,1,0,0,0,786,784,1,0,0,0,786,787,1,0,0,0,787,791,1,
		0,0,0,788,786,1,0,0,0,789,792,3,70,35,0,790,792,3,72,36,0,791,789,1,0,
		0,0,791,790,1,0,0,0,791,792,1,0,0,0,792,794,1,0,0,0,793,795,3,74,37,0,
		794,793,1,0,0,0,794,795,1,0,0,0,795,796,1,0,0,0,796,797,3,88,44,0,797,
		799,5,126,0,0,798,800,3,78,39,0,799,798,1,0,0,0,799,800,1,0,0,0,800,802,
		1,0,0,0,801,803,3,100,50,0,802,801,1,0,0,0,802,803,1,0,0,0,803,805,1,0,
		0,0,804,806,3,86,43,0,805,804,1,0,0,0,805,806,1,0,0,0,806,809,1,0,0,0,
		807,808,5,114,0,0,808,810,3,108,54,0,809,807,1,0,0,0,809,810,1,0,0,0,810,
		77,1,0,0,0,811,812,5,45,0,0,812,817,3,80,40,0,813,814,5,49,0,0,814,816,
		3,80,40,0,815,813,1,0,0,0,816,819,1,0,0,0,817,815,1,0,0,0,817,818,1,0,
		0,0,818,820,1,0,0,0,819,817,1,0,0,0,820,821,5,46,0,0,821,79,1,0,0,0,822,
		824,3,82,41,0,823,822,1,0,0,0,824,827,1,0,0,0,825,823,1,0,0,0,825,826,
		1,0,0,0,826,829,1,0,0,0,827,825,1,0,0,0,828,830,3,84,42,0,829,828,1,0,
		0,0,829,830,1,0,0,0,830,831,1,0,0,0,831,841,5,126,0,0,832,833,5,55,0,0,
		833,838,3,40,20,0,834,835,5,49,0,0,835,837,3,40,20,0,836,834,1,0,0,0,837,
		840,1,0,0,0,838,836,1,0,0,0,838,839,1,0,0,0,839,842,1,0,0,0,840,838,1,
		0,0,0,841,832,1,0,0,0,841,842,1,0,0,0,842,81,1,0,0,0,843,844,7,10,0,0,
		844,83,1,0,0,0,845,846,7,11,0,0,846,85,1,0,0,0,847,848,5,55,0,0,848,853,
		3,40,20,0,849,850,5,49,0,0,850,852,3,40,20,0,851,849,1,0,0,0,852,855,1,
		0,0,0,853,851,1,0,0,0,853,854,1,0,0,0,854,87,1,0,0,0,855,853,1,0,0,0,856,
		858,5,24,0,0,857,856,1,0,0,0,857,858,1,0,0,0,858,859,1,0,0,0,859,879,5,
		9,0,0,860,862,5,26,0,0,861,863,5,69,0,0,862,861,1,0,0,0,862,863,1,0,0,
		0,863,865,1,0,0,0,864,866,5,87,0,0,865,864,1,0,0,0,865,866,1,0,0,0,866,
		867,1,0,0,0,867,879,5,9,0,0,868,870,5,26,0,0,869,871,5,87,0,0,870,869,
		1,0,0,0,870,871,1,0,0,0,871,873,1,0,0,0,872,874,5,69,0,0,873,872,1,0,0,
		0,873,874,1,0,0,0,874,875,1,0,0,0,875,879,5,9,0,0,876,879,5,11,0,0,877,
		879,5,10,0,0,878,857,1,0,0,0,878,860,1,0,0,0,878,868,1,0,0,0,878,876,1,
		0,0,0,878,877,1,0,0,0,879,89,1,0,0,0,880,881,7,12,0,0,881,91,1,0,0,0,882,
		883,5,19,0,0,883,93,1,0,0,0,884,885,7,13,0,0,885,95,1,0,0,0,886,888,3,
		60,30,0,887,886,1,0,0,0,888,891,1,0,0,0,889,887,1,0,0,0,889,890,1,0,0,
		0,890,893,1,0,0,0,891,889,1,0,0,0,892,894,3,90,45,0,893,892,1,0,0,0,893,
		894,1,0,0,0,894,896,1,0,0,0,895,897,3,92,46,0,896,895,1,0,0,0,896,897,
		1,0,0,0,897,901,1,0,0,0,898,900,3,94,47,0,899,898,1,0,0,0,900,903,1,0,
		0,0,901,899,1,0,0,0,901,902,1,0,0,0,902,905,1,0,0,0,903,901,1,0,0,0,904,
		906,5,28,0,0,905,904,1,0,0,0,905,906,1,0,0,0,906,908,1,0,0,0,907,909,7,
		1,0,0,908,907,1,0,0,0,908,909,1,0,0,0,909,910,1,0,0,0,910,912,5,126,0,
		0,911,913,3,78,39,0,912,911,1,0,0,0,912,913,1,0,0,0,913,915,1,0,0,0,914,
		916,3,100,50,0,915,914,1,0,0,0,915,916,1,0,0,0,916,919,1,0,0,0,917,918,
		5,55,0,0,918,920,3,40,20,0,919,917,1,0,0,0,919,920,1,0,0,0,920,929,1,0,
		0,0,921,925,5,114,0,0,922,924,5,2,0,0,923,922,1,0,0,0,924,927,1,0,0,0,
		925,923,1,0,0,0,925,926,1,0,0,0,926,928,1,0,0,0,927,925,1,0,0,0,928,930,
		3,16,8,0,929,921,1,0,0,0,929,930,1,0,0,0,930,1003,1,0,0,0,931,933,3,60,
		30,0,932,931,1,0,0,0,933,936,1,0,0,0,934,932,1,0,0,0,934,935,1,0,0,0,935,
		938,1,0,0,0,936,934,1,0,0,0,937,939,3,90,45,0,938,937,1,0,0,0,938,939,
		1,0,0,0,939,941,1,0,0,0,940,942,3,92,46,0,941,940,1,0,0,0,941,942,1,0,
		0,0,942,946,1,0,0,0,943,945,3,94,47,0,944,943,1,0,0,0,945,948,1,0,0,0,
		946,944,1,0,0,0,946,947,1,0,0,0,947,950,1,0,0,0,948,946,1,0,0,0,949,951,
		5,28,0,0,950,949,1,0,0,0,950,951,1,0,0,0,951,953,1,0,0,0,952,954,5,20,
		0,0,953,952,1,0,0,0,953,954,1,0,0,0,954,956,1,0,0,0,955,957,7,1,0,0,956,
		955,1,0,0,0,956,957,1,0,0,0,957,958,1,0,0,0,958,960,5,126,0,0,959,961,
		3,78,39,0,960,959,1,0,0,0,960,961,1,0,0,0,961,962,1,0,0,0,962,963,5,55,
		0,0,963,1003,3,40,20,0,964,966,3,60,30,0,965,964,1,0,0,0,966,969,1,0,0,
		0,967,965,1,0,0,0,967,968,1,0,0,0,968,971,1,0,0,0,969,967,1,0,0,0,970,
		972,3,90,45,0,971,970,1,0,0,0,971,972,1,0,0,0,972,974,1,0,0,0,973,975,
		3,92,46,0,974,973,1,0,0,0,974,975,1,0,0,0,975,979,1,0,0,0,976,978,3,94,
		47,0,977,976,1,0,0,0,978,981,1,0,0,0,979,977,1,0,0,0,979,980,1,0,0,0,980,
		986,1,0,0,0,981,979,1,0,0,0,982,987,5,134,0,0,983,984,5,41,0,0,984,985,
		5,134,0,0,985,987,5,42,0,0,986,982,1,0,0,0,986,983,1,0,0,0,987,988,1,0,
		0,0,988,991,3,100,50,0,989,990,5,55,0,0,990,992,3,40,20,0,991,989,1,0,
		0,0,991,992,1,0,0,0,992,993,1,0,0,0,993,997,5,114,0,0,994,996,5,2,0,0,
		995,994,1,0,0,0,996,999,1,0,0,0,997,995,1,0,0,0,997,998,1,0,0,0,998,1000,
		1,0,0,0,999,997,1,0,0,0,1000,1001,3,16,8,0,1001,1003,1,0,0,0,1002,889,
		1,0,0,0,1002,934,1,0,0,0,1002,967,1,0,0,0,1003,97,1,0,0,0,1004,1008,3,
		90,45,0,1005,1008,3,92,46,0,1006,1008,3,94,47,0,1007,1004,1,0,0,0,1007,
		1005,1,0,0,0,1007,1006,1,0,0,0,1008,1012,1,0,0,0,1009,1011,3,94,47,0,1010,
		1009,1,0,0,0,1011,1014,1,0,0,0,1012,1010,1,0,0,0,1012,1013,1,0,0,0,1013,
		1015,1,0,0,0,1014,1012,1,0,0,0,1015,1016,5,114,0,0,1016,1021,5,47,0,0,
		1017,1020,5,2,0,0,1018,1020,3,96,48,0,1019,1017,1,0,0,0,1019,1018,1,0,
		0,0,1020,1023,1,0,0,0,1021,1019,1,0,0,0,1021,1022,1,0,0,0,1022,1024,1,
		0,0,0,1023,1021,1,0,0,0,1024,1025,5,48,0,0,1025,99,1,0,0,0,1026,1035,5,
		41,0,0,1027,1032,3,104,52,0,1028,1029,5,49,0,0,1029,1031,3,104,52,0,1030,
		1028,1,0,0,0,1031,1034,1,0,0,0,1032,1030,1,0,0,0,1032,1033,1,0,0,0,1033,
		1036,1,0,0,0,1034,1032,1,0,0,0,1035,1027,1,0,0,0,1035,1036,1,0,0,0,1036,
		1037,1,0,0,0,1037,1047,5,42,0,0,1038,1043,3,104,52,0,1039,1040,5,49,0,
		0,1040,1042,3,104,52,0,1041,1039,1,0,0,0,1042,1045,1,0,0,0,1043,1041,1,
		0,0,0,1043,1044,1,0,0,0,1044,1047,1,0,0,0,1045,1043,1,0,0,0,1046,1026,
		1,0,0,0,1046,1038,1,0,0,0,1047,101,1,0,0,0,1048,1049,7,14,0,0,1049,103,
		1,0,0,0,1050,1052,3,60,30,0,1051,1050,1,0,0,0,1051,1052,1,0,0,0,1052,1054,
		1,0,0,0,1053,1055,7,1,0,0,1054,1053,1,0,0,0,1054,1055,1,0,0,0,1055,1057,
		1,0,0,0,1056,1058,3,102,51,0,1057,1056,1,0,0,0,1057,1058,1,0,0,0,1058,
		1059,1,0,0,0,1059,1061,5,126,0,0,1060,1062,5,52,0,0,1061,1060,1,0,0,0,
		1061,1062,1,0,0,0,1062,1065,1,0,0,0,1063,1064,5,55,0,0,1064,1066,3,40,
		20,0,1065,1063,1,0,0,0,1065,1066,1,0,0,0,1066,1068,1,0,0,0,1067,1069,3,
		106,53,0,1068,1067,1,0,0,0,1068,1069,1,0,0,0,1069,1072,1,0,0,0,1070,1071,
		5,114,0,0,1071,1073,3,16,8,0,1072,1070,1,0,0,0,1072,1073,1,0,0,0,1073,
		105,1,0,0,0,1074,1076,5,66,0,0,1075,1074,1,0,0,0,1075,1076,1,0,0,0,1076,
		1077,1,0,0,0,1077,1078,5,47,0,0,1078,1079,3,16,8,0,1079,1080,5,48,0,0,
		1080,107,1,0,0,0,1081,1088,5,47,0,0,1082,1087,3,96,48,0,1083,1087,3,76,
		38,0,1084,1087,5,2,0,0,1085,1087,3,98,49,0,1086,1082,1,0,0,0,1086,1083,
		1,0,0,0,1086,1084,1,0,0,0,1086,1085,1,0,0,0,1087,1090,1,0,0,0,1088,1086,
		1,0,0,0,1088,1089,1,0,0,0,1089,1091,1,0,0,0,1090,1088,1,0,0,0,1091,1092,
		5,48,0,0,1092,109,1,0,0,0,1093,1094,5,29,0,0,1094,1095,5,114,0,0,1095,
		1096,3,16,8,0,1096,111,1,0,0,0,1097,1103,5,31,0,0,1098,1099,5,126,0,0,
		1099,1101,5,55,0,0,1100,1098,1,0,0,0,1100,1101,1,0,0,0,1101,1102,1,0,0,
		0,1102,1104,3,40,20,0,1103,1100,1,0,0,0,1103,1104,1,0,0,0,1104,1105,1,
		0,0,0,1105,1106,5,114,0,0,1106,1107,3,16,8,0,1107,113,1,0,0,0,1108,1109,
		5,32,0,0,1109,1110,5,114,0,0,1110,1111,3,16,8,0,1111,115,1,0,0,0,1112,
		1113,5,33,0,0,1113,1114,5,114,0,0,1114,1115,3,16,8,0,1115,117,1,0,0,0,
		1116,1117,5,45,0,0,1117,1122,3,40,20,0,1118,1119,5,49,0,0,1119,1121,3,
		40,20,0,1120,1118,1,0,0,0,1121,1124,1,0,0,0,1122,1120,1,0,0,0,1122,1123,
		1,0,0,0,1123,1125,1,0,0,0,1124,1122,1,0,0,0,1125,1126,5,46,0,0,1126,119,
		1,0,0,0,1127,1128,7,15,0,0,1128,121,1,0,0,0,1129,1130,5,41,0,0,1130,1135,
		3,40,20,0,1131,1132,5,49,0,0,1132,1134,3,40,20,0,1133,1131,1,0,0,0,1134,
		1137,1,0,0,0,1135,1133,1,0,0,0,1135,1136,1,0,0,0,1136,1138,1,0,0,0,1137,
		1135,1,0,0,0,1138,1139,5,42,0,0,1139,1141,1,0,0,0,1140,1129,1,0,0,0,1140,
		1141,1,0,0,0,1141,1144,1,0,0,0,1142,1143,5,55,0,0,1143,1145,3,40,20,0,
		1144,1142,1,0,0,0,1144,1145,1,0,0,0,1145,123,1,0,0,0,1146,1147,5,75,0,
		0,1147,1148,3,16,8,0,1148,1149,5,114,0,0,1149,1150,3,126,63,0,1150,125,
		1,0,0,0,1151,1155,5,47,0,0,1152,1154,5,2,0,0,1153,1152,1,0,0,0,1154,1157,
		1,0,0,0,1155,1153,1,0,0,0,1155,1156,1,0,0,0,1156,1165,1,0,0,0,1157,1155,
		1,0,0,0,1158,1162,3,128,64,0,1159,1161,5,2,0,0,1160,1159,1,0,0,0,1161,
		1164,1,0,0,0,1162,1160,1,0,0,0,1162,1163,1,0,0,0,1163,1166,1,0,0,0,1164,
		1162,1,0,0,0,1165,1158,1,0,0,0,1165,1166,1,0,0,0,1166,1176,1,0,0,0,1167,
		1171,3,130,65,0,1168,1170,5,2,0,0,1169,1168,1,0,0,0,1170,1173,1,0,0,0,
		1171,1169,1,0,0,0,1171,1172,1,0,0,0,1172,1175,1,0,0,0,1173,1171,1,0,0,
		0,1174,1167,1,0,0,0,1175,1178,1,0,0,0,1176,1174,1,0,0,0,1176,1177,1,0,
		0,0,1177,1180,1,0,0,0,1178,1176,1,0,0,0,1179,1181,3,132,66,0,1180,1179,
		1,0,0,0,1180,1181,1,0,0,0,1181,1185,1,0,0,0,1182,1184,5,2,0,0,1183,1182,
		1,0,0,0,1184,1187,1,0,0,0,1185,1183,1,0,0,0,1185,1186,1,0,0,0,1186,1188,
		1,0,0,0,1187,1185,1,0,0,0,1188,1189,5,48,0,0,1189,127,1,0,0,0,1190,1191,
		5,66,0,0,1191,1192,3,134,67,0,1192,1193,5,114,0,0,1193,1194,3,16,8,0,1194,
		129,1,0,0,0,1195,1196,5,55,0,0,1196,1197,3,134,67,0,1197,1198,5,114,0,
		0,1198,1199,3,16,8,0,1199,131,1,0,0,0,1200,1201,5,55,0,0,1201,1202,5,114,
		0,0,1202,1203,3,16,8,0,1203,133,1,0,0,0,1204,1205,3,16,8,0,1205,135,1,
		0,0,0,1206,1208,7,1,0,0,1207,1206,1,0,0,0,1207,1208,1,0,0,0,1208,1209,
		1,0,0,0,1209,1211,5,126,0,0,1210,1212,3,78,39,0,1211,1210,1,0,0,0,1211,
		1212,1,0,0,0,1212,1214,1,0,0,0,1213,1215,3,100,50,0,1214,1213,1,0,0,0,
		1214,1215,1,0,0,0,1215,1218,1,0,0,0,1216,1217,5,55,0,0,1217,1219,3,40,
		20,0,1218,1216,1,0,0,0,1218,1219,1,0,0,0,1219,1220,1,0,0,0,1220,1224,5,
		114,0,0,1221,1223,5,2,0,0,1222,1221,1,0,0,0,1223,1226,1,0,0,0,1224,1222,
		1,0,0,0,1224,1225,1,0,0,0,1225,1227,1,0,0,0,1226,1224,1,0,0,0,1227,1228,
		3,16,8,0,1228,137,1,0,0,0,168,140,142,149,152,159,164,166,173,178,180,
		184,192,198,202,212,220,223,233,239,241,245,261,275,280,293,301,307,313,
		317,323,329,335,339,343,346,351,354,357,380,384,387,398,401,410,413,431,
		434,441,444,452,456,537,544,567,570,573,575,577,589,615,622,626,636,644,
		652,654,661,671,681,687,694,701,708,715,720,724,729,735,745,749,753,755,
		759,764,777,779,786,791,794,799,802,805,809,817,825,829,838,841,853,857,
		862,865,870,873,878,889,893,896,901,905,908,912,915,919,925,929,934,938,
		941,946,950,953,956,960,967,971,974,979,986,991,997,1002,1007,1012,1019,
		1021,1032,1035,1043,1046,1051,1054,1057,1061,1065,1068,1072,1075,1086,
		1088,1100,1103,1122,1135,1140,1144,1155,1162,1165,1171,1176,1180,1185,
		1207,1211,1214,1218,1224
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Dassie.Parser
