//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Jonas/source/repos/dassie/src/Dassie/Parser/DassieParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Dassie.Parser {

    #pragma warning disable CS0108

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class DassieParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Ws=1, NewLine=2, Single_Line_Comment=3, Delimited_Comment=4, Documentation_Comment=5, 
		Import=6, Export=7, Type=8, Module=9, Template=10, Global=11, Local=12, 
		Internal=13, Static=14, Protected=15, Open=16, Closed=17, Abstract=18, 
		Extern=19, Inline=20, Ref=21, Var=22, Val=23, Base=24, Try=25, Raise=26, 
		Catch=27, Finally=28, Fault=29, Lock=30, True=31, False=32, This=33, Func=34, 
		Func_Ampersand=35, Default=36, Literal=37, Open_Paren=38, Close_Paren=39, 
		Open_Paren_Bar=40, Bar_Close_Paren=41, Open_Bracket=42, Close_Bracket=43, 
		Open_Brace=44, Close_Brace=45, Comma=46, Double_Comma=47, Dot=48, Double_Dot=49, 
		Double_Dot_Question_Mark=50, Dot_Equals=51, Colon=52, Colon_Greater_Than=53, 
		Less_Than_Colon=54, Less_Than_Question_Mark_Colon=55, Double_Colon=56, 
		Triple_Colon=57, Colon_Question_Mark=58, Semicolon=59, Underscore=60, 
		Single_Quote=61, Double_Quote=62, Question_Mark=63, Double_Question_Mark=64, 
		Double_Question_Mark_Equals=65, Exclamation_Mark=66, Exclamation_Question=67, 
		Exclamation_Colon=68, At_Sign=69, At_Open_Bracket=70, Exclamation_At=71, 
		Dollar_Sign=72, Caret=73, Caret_Equals=74, Caret_Backslash=75, Percent_Caret=76, 
		Dollar_Backslash=77, Bar=78, Bar_GreaterThan=79, LessThan_Bar=80, Double_Bar=81, 
		Bar_Equals=82, Double_Bar_Equals=83, Ampersand=84, Ampersand_Greater=85, 
		Less_Ampersand=86, Double_Ampersand=87, Double_Ampersand_Equals=88, Ampersand_Equals=89, 
		Less_Than=90, Greater_Than=91, Less_Equals=92, Greater_Equals=93, Double_Equals=94, 
		Exclamation_Equals=95, Plus=96, Plus_Equals=97, Minus=98, Minus_Equals=99, 
		Asterisk=100, Asterisk_Equals=101, Double_Asterisk=102, Double_Asterisk_Equals=103, 
		Slash=104, Backslash=105, Slash_Equals=106, Percent=107, Double_Percent=108, 
		Percent_Equals=109, Double_Percent_Equals=110, Equals=111, Equals_Greater=112, 
		Tilde=113, Double_Tilde=114, Tilde_Equals=115, Double_Less_Than=116, Double_Less_Than_Equals=117, 
		Double_Greater_Than=118, Double_Greater_Than_Equals=119, Arrow_Right=120, 
		Arrow_Left=121, Backtick=122, Add_Handler=123, Remove_Handler=124, Get=125, 
		Set=126, Operator_Open_Paren=127, Operator_Close_Paren=128, Identifier=129, 
		Integer_Literal=130, Hex_Integer_Literal=131, Binary_Integer_Literal=132, 
		Real_Literal=133, Character_Literal=134, String_Literal=135, Verbatim_String_Literal=136, 
		Custom_Operator=137;
	public const int
		RULE_compilation_unit = 0, RULE_file_body = 1, RULE_top_level_statements = 2, 
		RULE_full_program = 3, RULE_import_directive = 4, RULE_export_directive = 5, 
		RULE_full_identifier = 6, RULE_code_block = 7, RULE_expression = 8, RULE_atom = 9, 
		RULE_this_atom = 10, RULE_expression_atom = 11, RULE_integer_atom = 12, 
		RULE_real_atom = 13, RULE_boolean_atom = 14, RULE_string_atom = 15, RULE_character_atom = 16, 
		RULE_empty_atom = 17, RULE_wildcard_atom = 18, RULE_identifier_atom = 19, 
		RULE_type_name = 20, RULE_union_or_tuple_type_member = 21, RULE_array_type_specifier = 22, 
		RULE_if_branch = 23, RULE_postfix_if_branch = 24, RULE_elif_branch = 25, 
		RULE_else_branch = 26, RULE_unless_branch = 27, RULE_else_unless_branch = 28, 
		RULE_postfix_unless_branch = 29, RULE_arglist = 30, RULE_attribute = 31, 
		RULE_generic_identifier = 32, RULE_field_access_modifier = 33, RULE_field_declaration = 34, 
		RULE_placeholder = 35, RULE_type_access_modifier = 36, RULE_nested_type_access_modifier = 37, 
		RULE_type_special_modifier = 38, RULE_type = 39, RULE_type_parameter_list = 40, 
		RULE_type_parameter = 41, RULE_type_parameter_attribute = 42, RULE_type_parameter_variance = 43, 
		RULE_inheritance_list = 44, RULE_type_kind = 45, RULE_member_access_modifier = 46, 
		RULE_member_oop_modifier = 47, RULE_member_special_modifier = 48, RULE_type_member = 49, 
		RULE_access_modifier_member_group = 50, RULE_parameter_list = 51, RULE_parameter_modifier = 52, 
		RULE_parameter = 53, RULE_parameter_constraint = 54, RULE_type_block = 55, 
		RULE_try_branch = 56, RULE_catch_branch = 57, RULE_finally_branch = 58, 
		RULE_fault_branch = 59, RULE_type_arg_list = 60, RULE_assignment_operator = 61, 
		RULE_function_pointer_parameter_list = 62, RULE_match_expr = 63, RULE_match_block = 64, 
		RULE_match_first_case = 65, RULE_match_alternative_case = 66, RULE_match_default_case = 67, 
		RULE_match_case_expression = 68, RULE_local_function = 69, RULE_add_handler = 70, 
		RULE_remove_handler = 71, RULE_property_getter = 72, RULE_property_setter = 73, 
		RULE_property_or_event_block = 74;
	public static readonly string[] ruleNames = {
		"compilation_unit", "file_body", "top_level_statements", "full_program", 
		"import_directive", "export_directive", "full_identifier", "code_block", 
		"expression", "atom", "this_atom", "expression_atom", "integer_atom", 
		"real_atom", "boolean_atom", "string_atom", "character_atom", "empty_atom", 
		"wildcard_atom", "identifier_atom", "type_name", "union_or_tuple_type_member", 
		"array_type_specifier", "if_branch", "postfix_if_branch", "elif_branch", 
		"else_branch", "unless_branch", "else_unless_branch", "postfix_unless_branch", 
		"arglist", "attribute", "generic_identifier", "field_access_modifier", 
		"field_declaration", "placeholder", "type_access_modifier", "nested_type_access_modifier", 
		"type_special_modifier", "type", "type_parameter_list", "type_parameter", 
		"type_parameter_attribute", "type_parameter_variance", "inheritance_list", 
		"type_kind", "member_access_modifier", "member_oop_modifier", "member_special_modifier", 
		"type_member", "access_modifier_member_group", "parameter_list", "parameter_modifier", 
		"parameter", "parameter_constraint", "type_block", "try_branch", "catch_branch", 
		"finally_branch", "fault_branch", "type_arg_list", "assignment_operator", 
		"function_pointer_parameter_list", "match_expr", "match_block", "match_first_case", 
		"match_alternative_case", "match_default_case", "match_case_expression", 
		"local_function", "add_handler", "remove_handler", "property_getter", 
		"property_setter", "property_or_event_block"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'import'", "'export'", "'type'", 
		"'module'", "'template'", "'global'", "'local'", "'internal'", "'static'", 
		"'protected'", "'open'", "'closed'", "'abstract'", "'extern'", "'inline'", 
		"'ref'", "'var'", "'val'", "'base'", "'$try'", "'$throw'", "'$catch'", 
		"'$finally'", "'$fault'", "'$lock'", "'true'", "'false'", "'this'", "'func'", 
		"'func&'", "'default'", "'literal'", "'('", "')'", "'(|'", "'|)'", "'['", 
		"']'", "'{'", "'}'", "','", "',,'", "'.'", "'..'", "'..?'", "'.='", "':'", 
		"':>'", "'<:'", "'<?:'", "'::'", "':::'", "':?'", "';'", "'_'", "'''", 
		"'\"'", "'?'", "'??'", "'??='", "'!'", "'!?'", "'!:'", "'@'", "'@['", 
		"'!@'", "'$'", "'^'", "'^='", "'^\\'", "'%^'", "'$\\'", "'|'", "'|>'", 
		"'<|'", "'||'", "'|='", "'||='", "'&'", "'&>'", "'<&'", "'&&'", "'&&='", 
		"'&='", "'<'", "'>'", "'<='", "'>='", "'=='", "'!='", "'+'", "'+='", "'-'", 
		"'-='", "'*'", "'*='", "'**'", "'**='", "'/'", "'\\'", "'/='", "'%'", 
		"'%%'", "'%='", "'%%='", "'='", "'=>'", "'~'", "'~~'", "'~='", "'<<'", 
		"'<<='", "'>>'", "'>>='", "'->'", "'<-'", "'`'", "'@add'", "'@remove'", 
		"'@get'", "'@set'", "'\\u00EF\\u00B9\\u2122'", "'\\u00EF\\u00B9\\u0161'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Ws", "NewLine", "Single_Line_Comment", "Delimited_Comment", "Documentation_Comment", 
		"Import", "Export", "Type", "Module", "Template", "Global", "Local", "Internal", 
		"Static", "Protected", "Open", "Closed", "Abstract", "Extern", "Inline", 
		"Ref", "Var", "Val", "Base", "Try", "Raise", "Catch", "Finally", "Fault", 
		"Lock", "True", "False", "This", "Func", "Func_Ampersand", "Default", 
		"Literal", "Open_Paren", "Close_Paren", "Open_Paren_Bar", "Bar_Close_Paren", 
		"Open_Bracket", "Close_Bracket", "Open_Brace", "Close_Brace", "Comma", 
		"Double_Comma", "Dot", "Double_Dot", "Double_Dot_Question_Mark", "Dot_Equals", 
		"Colon", "Colon_Greater_Than", "Less_Than_Colon", "Less_Than_Question_Mark_Colon", 
		"Double_Colon", "Triple_Colon", "Colon_Question_Mark", "Semicolon", "Underscore", 
		"Single_Quote", "Double_Quote", "Question_Mark", "Double_Question_Mark", 
		"Double_Question_Mark_Equals", "Exclamation_Mark", "Exclamation_Question", 
		"Exclamation_Colon", "At_Sign", "At_Open_Bracket", "Exclamation_At", "Dollar_Sign", 
		"Caret", "Caret_Equals", "Caret_Backslash", "Percent_Caret", "Dollar_Backslash", 
		"Bar", "Bar_GreaterThan", "LessThan_Bar", "Double_Bar", "Bar_Equals", 
		"Double_Bar_Equals", "Ampersand", "Ampersand_Greater", "Less_Ampersand", 
		"Double_Ampersand", "Double_Ampersand_Equals", "Ampersand_Equals", "Less_Than", 
		"Greater_Than", "Less_Equals", "Greater_Equals", "Double_Equals", "Exclamation_Equals", 
		"Plus", "Plus_Equals", "Minus", "Minus_Equals", "Asterisk", "Asterisk_Equals", 
		"Double_Asterisk", "Double_Asterisk_Equals", "Slash", "Backslash", "Slash_Equals", 
		"Percent", "Double_Percent", "Percent_Equals", "Double_Percent_Equals", 
		"Equals", "Equals_Greater", "Tilde", "Double_Tilde", "Tilde_Equals", "Double_Less_Than", 
		"Double_Less_Than_Equals", "Double_Greater_Than", "Double_Greater_Than_Equals", 
		"Arrow_Right", "Arrow_Left", "Backtick", "Add_Handler", "Remove_Handler", 
		"Get", "Set", "Operator_Open_Paren", "Operator_Close_Paren", "Identifier", 
		"Integer_Literal", "Hex_Integer_Literal", "Binary_Integer_Literal", "Real_Literal", 
		"Character_Literal", "String_Literal", "Verbatim_String_Literal", "Custom_Operator"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DassieParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static DassieParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DassieParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DassieParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Compilation_unitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public File_bodyContext file_body() {
			return GetRuleContext<File_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(DassieParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Import_directiveContext[] import_directive() {
			return GetRuleContexts<Import_directiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Import_directiveContext import_directive(int i) {
			return GetRuleContext<Import_directiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(DassieParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(DassieParser.NewLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Export_directiveContext export_directive() {
			return GetRuleContext<Export_directiveContext>(0);
		}
		public Compilation_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilation_unit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterCompilation_unit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitCompilation_unit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilation_unit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compilation_unitContext compilation_unit() {
		Compilation_unitContext _localctx = new Compilation_unitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilation_unit);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 152;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case Import:
					case Exclamation_Mark:
						{
						State = 150;
						import_directive();
						}
						break;
					case NewLine:
						{
						State = 151;
						Match(NewLine);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 156;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 164;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Export) {
				{
				State = 157;
				export_directive();
				State = 161;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 158;
						Match(NewLine);
						}
						} 
					}
					State = 163;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
				}
				}
			}

			State = 166;
			file_body();
			State = 167;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementsContext top_level_statements() {
			return GetRuleContext<Top_level_statementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Full_programContext full_program() {
			return GetRuleContext<Full_programContext>(0);
		}
		public File_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterFile_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitFile_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public File_bodyContext file_body() {
		File_bodyContext _localctx = new File_bodyContext(Context, State);
		EnterRule(_localctx, 2, RULE_file_body);
		try {
			State = 171;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 169;
				top_level_statements();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 170;
				full_program();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_level_statementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Local_functionContext[] local_function() {
			return GetRuleContexts<Local_functionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Local_functionContext local_function(int i) {
			return GetRuleContext<Local_functionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(DassieParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(DassieParser.NewLine, i);
		}
		public Top_level_statementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_level_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterTop_level_statements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitTop_level_statements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_level_statements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Top_level_statementsContext top_level_statements() {
		Top_level_statementsContext _localctx = new Top_level_statementsContext(Context, State);
		EnterRule(_localctx, 4, RULE_top_level_statements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8069865249425063932L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & -9223231299347805445L) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & 127L) != 0)) {
				{
				State = 176;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
				case 1:
					{
					State = 173;
					expression(0);
					}
					break;
				case 2:
					{
					State = 174;
					local_function();
					}
					break;
				case 3:
					{
					State = 175;
					Match(NewLine);
					}
					break;
				}
				}
				State = 180;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Full_programContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(DassieParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(DassieParser.NewLine, i);
		}
		public Full_programContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_full_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterFull_program(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitFull_program(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFull_program(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Full_programContext full_program() {
		Full_programContext _localctx = new Full_programContext(Context, State);
		EnterRule(_localctx, 6, RULE_full_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 184;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
				case 1:
					{
					State = 181;
					type();
					}
					break;
				case 2:
					{
					State = 182;
					attribute();
					}
					break;
				case 3:
					{
					State = 183;
					Match(NewLine);
					}
					break;
				}
				}
				State = 186;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 10600196L) != 0) || _la==Less_Than );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_directiveContext : ParserRuleContext {
		public Import_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_directive; } }
	 
		public Import_directiveContext() { }
		public virtual void CopyFrom(Import_directiveContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Basic_importContext : Import_directiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Import() { return GetToken(DassieParser.Import, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Full_identifierContext[] full_identifier() {
			return GetRuleContexts<Full_identifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Full_identifierContext full_identifier(int i) {
			return GetRuleContext<Full_identifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation_Mark() { return GetToken(DassieParser.Exclamation_Mark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(DassieParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(DassieParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(DassieParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(DassieParser.NewLine, i);
		}
		public Basic_importContext(Import_directiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterBasic_import(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitBasic_import(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasic_import(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Import_directiveContext import_directive() {
		Import_directiveContext _localctx = new Import_directiveContext(Context, State);
		EnterRule(_localctx, 8, RULE_import_directive);
		int _la;
		try {
			_localctx = new Basic_importContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Exclamation_Mark) {
				{
				State = 188;
				Match(Exclamation_Mark);
				}
			}

			State = 191;
			Match(Import);
			State = 192;
			full_identifier();
			State = 203;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 193;
				Match(Comma);
				State = 197;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NewLine) {
					{
					{
					State = 194;
					Match(NewLine);
					}
					}
					State = 199;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 200;
				full_identifier();
				}
				}
				State = 205;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Export_directiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Export() { return GetToken(DassieParser.Export, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Full_identifierContext full_identifier() {
			return GetRuleContext<Full_identifierContext>(0);
		}
		public Export_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_export_directive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterExport_directive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitExport_directive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExport_directive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Export_directiveContext export_directive() {
		Export_directiveContext _localctx = new Export_directiveContext(Context, State);
		EnterRule(_localctx, 10, RULE_export_directive);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			Match(Export);
			State = 207;
			full_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Full_identifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(DassieParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(DassieParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dot() { return GetTokens(DassieParser.Dot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot(int i) {
			return GetToken(DassieParser.Dot, i);
		}
		public Full_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_full_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterFull_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitFull_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFull_identifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Full_identifierContext full_identifier() {
		Full_identifierContext _localctx = new Full_identifierContext(Context, State);
		EnterRule(_localctx, 12, RULE_full_identifier);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			Match(Identifier);
			State = 214;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 210;
					Match(Dot);
					State = 211;
					Match(Identifier);
					}
					} 
				}
				State = 216;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Code_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Brace() { return GetToken(DassieParser.Open_Brace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Brace() { return GetToken(DassieParser.Close_Brace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PlaceholderContext placeholder() {
			return GetRuleContext<PlaceholderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(DassieParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(DassieParser.NewLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Code_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterCode_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitCode_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCode_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Code_blockContext code_block() {
		Code_blockContext _localctx = new Code_blockContext(Context, State);
		EnterRule(_localctx, 14, RULE_code_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217;
			Match(Open_Brace);
			State = 226;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NewLine:
			case Var:
			case Val:
			case Try:
			case Raise:
			case Lock:
			case True:
			case False:
			case This:
			case Func:
			case Func_Ampersand:
			case Open_Paren:
			case Open_Bracket:
			case Open_Brace:
			case Close_Brace:
			case Double_Dot:
			case Underscore:
			case Question_Mark:
			case Exclamation_Mark:
			case Exclamation_Question:
			case At_Sign:
			case At_Open_Bracket:
			case Exclamation_At:
			case Dollar_Sign:
			case Caret:
			case Caret_Backslash:
			case Dollar_Backslash:
			case Ampersand:
			case Ampersand_Greater:
			case Less_Ampersand:
			case Less_Than:
			case Tilde:
			case Identifier:
			case Integer_Literal:
			case Hex_Integer_Literal:
			case Binary_Integer_Literal:
			case Real_Literal:
			case Character_Literal:
			case String_Literal:
			case Verbatim_String_Literal:
				{
				State = 222;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8069865249425063932L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & -9223231299347805445L) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & 127L) != 0)) {
					{
					State = 220;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case NewLine:
						{
						State = 218;
						Match(NewLine);
						}
						break;
					case Var:
					case Val:
					case Try:
					case Raise:
					case Lock:
					case True:
					case False:
					case This:
					case Func:
					case Func_Ampersand:
					case Open_Paren:
					case Open_Bracket:
					case Open_Brace:
					case Double_Dot:
					case Underscore:
					case Question_Mark:
					case Exclamation_Mark:
					case Exclamation_Question:
					case At_Sign:
					case At_Open_Bracket:
					case Exclamation_At:
					case Dollar_Sign:
					case Caret:
					case Caret_Backslash:
					case Dollar_Backslash:
					case Ampersand:
					case Ampersand_Greater:
					case Less_Ampersand:
					case Less_Than:
					case Tilde:
					case Identifier:
					case Integer_Literal:
					case Hex_Integer_Literal:
					case Binary_Integer_Literal:
					case Real_Literal:
					case Character_Literal:
					case String_Literal:
					case Verbatim_String_Literal:
						{
						State = 219;
						expression(0);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 224;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case Dot:
				{
				State = 225;
				placeholder();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 228;
			Match(Close_Brace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Function_pointer_expressionContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public Function_pointer_parameter_listContext function_pointer_parameter_list() {
			return GetRuleContext<Function_pointer_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Func() { return GetToken(DassieParser.Func, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Func_Ampersand() { return GetToken(DassieParser.Func_Ampersand, 0); }
		public Function_pointer_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterFunction_pointer_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitFunction_pointer_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_pointer_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Subtraction_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(DassieParser.Minus, 0); }
		public Subtraction_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterSubtraction_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitSubtraction_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtraction_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Bitwise_complement_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tilde() { return GetToken(DassieParser.Tilde, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Bitwise_complement_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterBitwise_complement_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitBitwise_complement_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwise_complement_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Right_pipe_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Arrow_Right() { return GetToken(DassieParser.Arrow_Right, 0); }
		public Right_pipe_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterRight_pipe_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitRight_pipe_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRight_pipe_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Array_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode At_Open_Bracket() { return GetToken(DassieParser.At_Open_Bracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Bracket() { return GetToken(DassieParser.Close_Bracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(DassieParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(DassieParser.Comma, i);
		}
		public Array_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterArray_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitArray_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Multiply_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Asterisk() { return GetToken(DassieParser.Asterisk, 0); }
		public Multiply_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterMultiply_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitMultiply_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiply_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Logical_or_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Double_Bar() { return GetTokens(DassieParser.Double_Bar); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Bar(int i) {
			return GetToken(DassieParser.Double_Bar, i);
		}
		public Logical_or_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterLogical_or_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitLogical_or_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_or_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Open_ended_range_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Dot() { return GetToken(DassieParser.Double_Dot, 0); }
		public Open_ended_range_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterOpen_ended_range_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitOpen_ended_range_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpen_ended_range_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Raise_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Raise() { return GetToken(DassieParser.Raise, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Raise_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterRaise_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitRaise_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaise_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class And_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ampersand() { return GetToken(DassieParser.Ampersand, 0); }
		public And_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterAnd_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitAnd_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Newlined_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine() { return GetToken(DassieParser.NewLine, 0); }
		public Newlined_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterNewlined_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitNewlined_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewlined_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Closed_ended_range_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Dot() { return GetToken(DassieParser.Double_Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Closed_ended_range_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterClosed_ended_range_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitClosed_ended_range_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClosed_ended_range_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Foreach_loopContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode At_Sign() { return GetToken(DassieParser.At_Sign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(DassieParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(DassieParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon_Greater_Than() { return GetToken(DassieParser.Colon_Greater_Than, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Paren() { return GetToken(DassieParser.Open_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(DassieParser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Paren() { return GetToken(DassieParser.Close_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Var() { return GetTokens(DassieParser.Var); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Var(int i) {
			return GetToken(DassieParser.Var, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Val() { return GetTokens(DassieParser.Val); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Val(int i) {
			return GetToken(DassieParser.Val, i);
		}
		public Foreach_loopContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterForeach_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitForeach_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeach_loop(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Postfix_unless_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Postfix_unless_branchContext postfix_unless_branch() {
			return GetRuleContext<Postfix_unless_branchContext>(0);
		}
		public Postfix_unless_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterPostfix_unless_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitPostfix_unless_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfix_unless_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Delimited_range_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Dot() { return GetToken(DassieParser.Double_Dot, 0); }
		public Delimited_range_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterDelimited_range_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitDelimited_range_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelimited_range_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Power_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Asterisk() { return GetToken(DassieParser.Double_Asterisk, 0); }
		public Power_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterPower_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitPower_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPower_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Conversion_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less_Than_Colon() { return GetToken(DassieParser.Less_Than_Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Conversion_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterConversion_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitConversion_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConversion_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Range_index_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Caret() { return GetToken(DassieParser.Caret, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Integer_atomContext integer_atom() {
			return GetRuleContext<Integer_atomContext>(0);
		}
		public Range_index_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterRange_index_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitRange_index_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange_index_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Addition_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(DassieParser.Plus, 0); }
		public Addition_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterAddition_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitAddition_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddition_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Atom_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public Atom_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterAtom_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitAtom_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Index_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Colon() { return GetToken(DassieParser.Double_Colon, 0); }
		public Index_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterIndex_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitIndex_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Safe_conversion_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less_Than_Question_Mark_Colon() { return GetToken(DassieParser.Less_Than_Question_Mark_Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Safe_conversion_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterSafe_conversion_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitSafe_conversion_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSafe_conversion_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Comparison_expressionContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less_Than() { return GetToken(DassieParser.Less_Than, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less_Equals() { return GetToken(DassieParser.Less_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater_Than() { return GetToken(DassieParser.Greater_Than, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater_Equals() { return GetToken(DassieParser.Greater_Equals, 0); }
		public Comparison_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterComparison_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitComparison_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Or_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bar() { return GetToken(DassieParser.Bar, 0); }
		public Or_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterOr_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitOr_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Try_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Try_branchContext try_branch() {
			return GetRuleContext<Try_branchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Catch_branchContext[] catch_branch() {
			return GetRuleContexts<Catch_branchContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Catch_branchContext catch_branch(int i) {
			return GetRuleContext<Catch_branchContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fault_branchContext fault_branch() {
			return GetRuleContext<Fault_branchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Finally_branchContext finally_branch() {
			return GetRuleContext<Finally_branchContext>(0);
		}
		public Try_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterTry_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitTry_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTry_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class List_initializer_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Bracket() { return GetToken(DassieParser.Open_Bracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Bracket() { return GetToken(DassieParser.Close_Bracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(DassieParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(DassieParser.Comma, i);
		}
		public List_initializer_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterList_initializer_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitList_initializer_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList_initializer_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Left_shift_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Less_Than() { return GetToken(DassieParser.Double_Less_Than, 0); }
		public Left_shift_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterLeft_shift_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitLeft_shift_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeft_shift_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Match_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Match_exprContext match_expr() {
			return GetRuleContext<Match_exprContext>(0);
		}
		public Match_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterMatch_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitMatch_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatch_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Attributed_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public Attributed_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterAttributed_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitAttributed_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributed_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Modulus_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Percent() { return GetToken(DassieParser.Double_Percent, 0); }
		public Modulus_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterModulus_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitModulus_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModulus_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Equality_expressionContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Equals() { return GetToken(DassieParser.Double_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation_Equals() { return GetToken(DassieParser.Exclamation_Equals, 0); }
		public Equality_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterEquality_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitEquality_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Until_loopContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation_At() { return GetToken(DassieParser.Exclamation_At, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		public Until_loopContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterUntil_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitUntil_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUntil_loop(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class While_loopContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode At_Sign() { return GetToken(DassieParser.At_Sign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		public While_loopContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterWhile_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitWhile_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_loop(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Xor_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Caret() { return GetToken(DassieParser.Caret, 0); }
		public Xor_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterXor_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitXor_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXor_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Prefix_if_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public If_branchContext if_branch() {
			return GetRuleContext<If_branchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(DassieParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(DassieParser.NewLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Elif_branchContext[] elif_branch() {
			return GetRuleContexts<Elif_branchContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Elif_branchContext elif_branch(int i) {
			return GetRuleContext<Elif_branchContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_branchContext else_branch() {
			return GetRuleContext<Else_branchContext>(0);
		}
		public Prefix_if_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterPrefix_if_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitPrefix_if_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefix_if_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Logical_negation_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation_Mark() { return GetToken(DassieParser.Exclamation_Mark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Logical_negation_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterLogical_negation_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitLogical_negation_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_negation_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Right_shift_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Greater_Than() { return GetToken(DassieParser.Double_Greater_Than, 0); }
		public Right_shift_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterRight_shift_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitRight_shift_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRight_shift_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Anonymous_function_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_listContext parameter_list() {
			return GetRuleContext<Parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals_Greater() { return GetToken(DassieParser.Equals_Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(DassieParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Anonymous_function_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterAnonymous_function_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitAnonymous_function_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymous_function_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Rethrow_exceptionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Raise() { return GetToken(DassieParser.Raise, 0); }
		public Rethrow_exceptionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterRethrow_exception(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitRethrow_exception(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRethrow_exception(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Separated_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(DassieParser.Semicolon, 0); }
		public Separated_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterSeparated_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitSeparated_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeparated_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Member_access_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dot() { return GetTokens(DassieParser.Dot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot(int i) {
			return GetToken(DassieParser.Dot, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(DassieParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(DassieParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_arg_listContext type_arg_list() {
			return GetRuleContext<Type_arg_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArglistContext arglist() {
			return GetRuleContext<ArglistContext>(0);
		}
		public Member_access_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterMember_access_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitMember_access_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_access_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Custom_operator_binary_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Custom_Operator() { return GetToken(DassieParser.Custom_Operator, 0); }
		public Custom_operator_binary_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterCustom_operator_binary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitCustom_operator_binary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCustom_operator_binary_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Remainder_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Percent() { return GetToken(DassieParser.Percent, 0); }
		public Remainder_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterRemainder_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitRemainder_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemainder_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Typeof_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Caret_Backslash() { return GetToken(DassieParser.Caret_Backslash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Typeof_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterTypeof_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitTypeof_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeof_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Block_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		public Block_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterBlock_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitBlock_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Full_range_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Dot() { return GetToken(DassieParser.Double_Dot, 0); }
		public Full_range_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterFull_range_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitFull_range_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFull_range_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Left_pipe_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Arrow_Left() { return GetToken(DassieParser.Arrow_Left, 0); }
		public Left_pipe_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterLeft_pipe_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitLeft_pipe_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeft_pipe_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Dictionary_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Open_Bracket() { return GetTokens(DassieParser.Open_Bracket); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Bracket(int i) {
			return GetToken(DassieParser.Open_Bracket, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Close_Bracket() { return GetTokens(DassieParser.Close_Bracket); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Bracket(int i) {
			return GetToken(DassieParser.Close_Bracket, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(DassieParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(DassieParser.Comma, i);
		}
		public Dictionary_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterDictionary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitDictionary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictionary_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public AssignmentContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Prefix_unless_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unless_branchContext unless_branch() {
			return GetRuleContext<Unless_branchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(DassieParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(DassieParser.NewLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_unless_branchContext[] else_unless_branch() {
			return GetRuleContexts<Else_unless_branchContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_unless_branchContext else_unless_branch(int i) {
			return GetRuleContext<Else_unless_branchContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_branchContext else_branch() {
			return GetRuleContext<Else_branchContext>(0);
		}
		public Prefix_unless_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterPrefix_unless_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitPrefix_unless_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefix_unless_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Isinstance_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon_Question_Mark() { return GetToken(DassieParser.Colon_Question_Mark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Isinstance_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterIsinstance_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitIsinstance_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsinstance_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Local_declaration_or_assignmentContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(DassieParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(DassieParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Var() { return GetToken(DassieParser.Var, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Val() { return GetToken(DassieParser.Val, 0); }
		public Local_declaration_or_assignmentContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterLocal_declaration_or_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitLocal_declaration_or_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_declaration_or_assignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Tuple_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Paren() { return GetToken(DassieParser.Open_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Paren() { return GetToken(DassieParser.Close_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(DassieParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(DassieParser.Comma, i);
		}
		public Tuple_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterTuple_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitTuple_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTuple_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Nameof_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dollar_Backslash() { return GetToken(DassieParser.Dollar_Backslash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Nameof_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterNameof_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitNameof_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameof_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Postfix_if_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Postfix_if_branchContext postfix_if_branch() {
			return GetRuleContext<Postfix_if_branchContext>(0);
		}
		public Postfix_if_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterPostfix_if_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitPostfix_if_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfix_if_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Divide_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Slash() { return GetToken(DassieParser.Slash, 0); }
		public Divide_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterDivide_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitDivide_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivide_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Byref_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ampersand() { return GetToken(DassieParser.Ampersand, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Byref_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterByref_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitByref_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitByref_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Array_element_assignmentContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Bracket() { return GetToken(DassieParser.Open_Bracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Bracket() { return GetToken(DassieParser.Close_Bracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		public Array_element_assignmentContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterArray_element_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitArray_element_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_element_assignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Logical_and_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Double_Ampersand() { return GetTokens(DassieParser.Double_Ampersand); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Ampersand(int i) {
			return GetToken(DassieParser.Double_Ampersand, i);
		}
		public Logical_and_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterLogical_and_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitLogical_and_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_and_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Lock_statementContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lock() { return GetToken(DassieParser.Lock, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		public Lock_statementContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterLock_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitLock_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLock_statement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Full_identifier_member_access_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Full_identifierContext full_identifier() {
			return GetRuleContext<Full_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_arg_listContext type_arg_list() {
			return GetRuleContext<Type_arg_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArglistContext arglist() {
			return GetRuleContext<ArglistContext>(0);
		}
		public Full_identifier_member_access_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterFull_identifier_member_access_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitFull_identifier_member_access_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFull_identifier_member_access_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Implementation_query_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Dot_Question_Mark() { return GetToken(DassieParser.Double_Dot_Question_Mark, 0); }
		public Implementation_query_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterImplementation_query_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitImplementation_query_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplementation_query_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 440;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				{
				_localctx = new Bitwise_complement_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 231;
				Match(Tilde);
				State = 232;
				expression(61);
				}
				break;
			case 2:
				{
				_localctx = new Logical_negation_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 233;
				Match(Exclamation_Mark);
				State = 234;
				expression(58);
				}
				break;
			case 3:
				{
				_localctx = new Byref_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 235;
				Match(Ampersand);
				State = 236;
				expression(39);
				}
				break;
			case 4:
				{
				_localctx = new Anonymous_function_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 237;
				parameter_list();
				State = 240;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 238;
					Match(Colon);
					State = 239;
					type_name(0);
					}
				}

				State = 242;
				Match(Equals_Greater);
				State = 243;
				expression(37);
				}
				break;
			case 5:
				{
				_localctx = new Function_pointer_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 245;
				((Function_pointer_expressionContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==Func || _la==Func_Ampersand) ) {
					((Function_pointer_expressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 246;
				function_pointer_parameter_list();
				State = 247;
				expression(36);
				}
				break;
			case 6:
				{
				_localctx = new Typeof_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 249;
				Match(Caret_Backslash);
				State = 250;
				type_name(0);
				}
				break;
			case 7:
				{
				_localctx = new Nameof_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 251;
				Match(Dollar_Backslash);
				State = 252;
				expression(34);
				}
				break;
			case 8:
				{
				_localctx = new Local_declaration_or_assignmentContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 254;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Var || _la==Val) {
					{
					State = 253;
					_la = TokenStream.LA(1);
					if ( !(_la==Var || _la==Val) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 256;
				Match(Identifier);
				State = 259;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 257;
					Match(Colon);
					State = 258;
					type_name(0);
					}
				}

				State = 261;
				assignment_operator();
				State = 262;
				expression(32);
				}
				break;
			case 9:
				{
				_localctx = new Closed_ended_range_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 264;
				Match(Double_Dot);
				State = 265;
				expression(27);
				}
				break;
			case 10:
				{
				_localctx = new Full_range_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 266;
				Match(Double_Dot);
				}
				break;
			case 11:
				{
				_localctx = new Range_index_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 267;
				Match(Caret);
				State = 268;
				integer_atom();
				}
				break;
			case 12:
				{
				_localctx = new Attributed_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 270;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 269;
						attribute();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 272;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 274;
				expression(24);
				}
				break;
			case 13:
				{
				_localctx = new Prefix_if_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 276;
				if_branch();
				State = 280;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 277;
						Match(NewLine);
						}
						} 
					}
					State = 282;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
				}
				State = 286;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 283;
						elif_branch();
						}
						} 
					}
					State = 288;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
				}
				State = 292;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 289;
						Match(NewLine);
						}
						} 
					}
					State = 294;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
				}
				State = 296;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
				case 1:
					{
					State = 295;
					else_branch();
					}
					break;
				}
				}
				break;
			case 14:
				{
				_localctx = new Prefix_unless_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 298;
				unless_branch();
				State = 302;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 299;
						Match(NewLine);
						}
						} 
					}
					State = 304;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
				}
				State = 308;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 305;
						else_unless_branch();
						}
						} 
					}
					State = 310;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
				}
				State = 314;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 311;
						Match(NewLine);
						}
						} 
					}
					State = 316;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
				}
				State = 318;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
				case 1:
					{
					State = 317;
					else_branch();
					}
					break;
				}
				}
				break;
			case 15:
				{
				_localctx = new Foreach_loopContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 320;
				Match(At_Sign);
				State = 322;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Open_Paren) {
					{
					State = 321;
					Match(Open_Paren);
					}
				}

				{
				State = 325;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Var || _la==Val) {
					{
					State = 324;
					_la = TokenStream.LA(1);
					if ( !(_la==Var || _la==Val) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 327;
				Match(Identifier);
				State = 333;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 328;
					Match(Comma);
					{
					State = 330;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==Var || _la==Val) {
						{
						State = 329;
						_la = TokenStream.LA(1);
						if ( !(_la==Var || _la==Val) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					State = 332;
					Match(Identifier);
					}
					}
				}

				State = 336;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Close_Paren) {
					{
					State = 335;
					Match(Close_Paren);
					}
				}

				State = 338;
				Match(Colon_Greater_Than);
				State = 339;
				expression(0);
				}
				State = 341;
				Match(Equals);
				State = 342;
				expression(19);
				}
				break;
			case 16:
				{
				_localctx = new While_loopContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 344;
				Match(At_Sign);
				State = 345;
				expression(0);
				State = 346;
				Match(Equals);
				State = 347;
				expression(18);
				}
				break;
			case 17:
				{
				_localctx = new Until_loopContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 349;
				Match(Exclamation_At);
				State = 350;
				expression(0);
				State = 351;
				Match(Equals);
				State = 352;
				expression(17);
				}
				break;
			case 18:
				{
				_localctx = new Match_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 354;
				match_expr();
				}
				break;
			case 19:
				{
				_localctx = new Try_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 355;
				try_branch();
				State = 359;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 356;
						catch_branch();
						}
						} 
					}
					State = 361;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
				}
				State = 363;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
				case 1:
					{
					State = 362;
					fault_branch();
					}
					break;
				}
				State = 366;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
				case 1:
					{
					State = 365;
					finally_branch();
					}
					break;
				}
				}
				break;
			case 20:
				{
				_localctx = new Raise_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 368;
				Match(Raise);
				State = 369;
				expression(14);
				}
				break;
			case 21:
				{
				_localctx = new Rethrow_exceptionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 370;
				Match(Raise);
				}
				break;
			case 22:
				{
				_localctx = new Lock_statementContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 371;
				Match(Lock);
				State = 372;
				expression(0);
				State = 373;
				Match(Equals);
				State = 374;
				expression(12);
				}
				break;
			case 23:
				{
				_localctx = new Array_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 376;
				Match(At_Open_Bracket);
				State = 385;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 22)) & ~0x3f) == 0 && ((1L << (_la - 22)) & -4562231909415829733L) != 0) || ((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & 2243003854880785L) != 0)) {
					{
					State = 377;
					expression(0);
					State = 382;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==Comma) {
						{
						{
						State = 378;
						Match(Comma);
						State = 379;
						expression(0);
						}
						}
						State = 384;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 387;
				Match(Close_Bracket);
				}
				break;
			case 24:
				{
				_localctx = new List_initializer_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 388;
				Match(Open_Bracket);
				State = 397;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 22)) & ~0x3f) == 0 && ((1L << (_la - 22)) & -4562231909415829733L) != 0) || ((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & 2243003854880785L) != 0)) {
					{
					State = 389;
					expression(0);
					State = 394;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==Comma) {
						{
						{
						State = 390;
						Match(Comma);
						State = 391;
						expression(0);
						}
						}
						State = 396;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 399;
				Match(Close_Bracket);
				}
				break;
			case 25:
				{
				_localctx = new Dictionary_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 400;
				Match(Open_Bracket);
				State = 418;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Open_Bracket) {
					{
					State = 401;
					Match(Open_Bracket);
					State = 402;
					expression(0);
					State = 403;
					Match(Comma);
					State = 404;
					expression(0);
					State = 405;
					Match(Close_Bracket);
					State = 415;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==Comma) {
						{
						{
						State = 406;
						Match(Comma);
						State = 407;
						Match(Open_Bracket);
						State = 408;
						expression(0);
						State = 409;
						Match(Comma);
						State = 410;
						expression(0);
						State = 411;
						Match(Close_Bracket);
						}
						}
						State = 417;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 420;
				Match(Close_Bracket);
				}
				break;
			case 26:
				{
				_localctx = new Atom_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 421;
				atom();
				}
				break;
			case 27:
				{
				_localctx = new Block_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 422;
				code_block();
				}
				break;
			case 28:
				{
				_localctx = new Full_identifier_member_access_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 423;
				full_identifier();
				State = 425;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
				case 1:
					{
					State = 424;
					type_arg_list();
					}
					break;
				}
				State = 428;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
				case 1:
					{
					State = 427;
					arglist();
					}
					break;
				}
				}
				break;
			case 29:
				{
				_localctx = new Tuple_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 430;
				Match(Open_Paren);
				State = 431;
				expression(0);
				State = 434;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 432;
					Match(Comma);
					State = 433;
					expression(0);
					}
					}
					State = 436;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Comma );
				State = 438;
				Match(Close_Paren);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 561;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 559;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
					case 1:
						{
						_localctx = new Custom_operator_binary_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 442;
						if (!(Precpred(Context, 62))) throw new FailedPredicateException(this, "Precpred(Context, 62)");
						State = 443;
						Match(Custom_Operator);
						State = 444;
						expression(63);
						}
						break;
					case 2:
						{
						_localctx = new Array_element_assignmentContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 445;
						if (!(Precpred(Context, 60))) throw new FailedPredicateException(this, "Precpred(Context, 60)");
						State = 446;
						Match(Open_Bracket);
						State = 447;
						expression(0);
						State = 448;
						Match(Close_Bracket);
						State = 449;
						Match(Equals);
						State = 450;
						expression(61);
						}
						break;
					case 3:
						{
						_localctx = new Power_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 452;
						if (!(Precpred(Context, 59))) throw new FailedPredicateException(this, "Precpred(Context, 59)");
						State = 453;
						Match(Double_Asterisk);
						State = 454;
						expression(59);
						}
						break;
					case 4:
						{
						_localctx = new Multiply_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 455;
						if (!(Precpred(Context, 57))) throw new FailedPredicateException(this, "Precpred(Context, 57)");
						State = 456;
						Match(Asterisk);
						State = 457;
						expression(58);
						}
						break;
					case 5:
						{
						_localctx = new Divide_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 458;
						if (!(Precpred(Context, 56))) throw new FailedPredicateException(this, "Precpred(Context, 56)");
						State = 459;
						Match(Slash);
						State = 460;
						expression(57);
						}
						break;
					case 6:
						{
						_localctx = new Remainder_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 461;
						if (!(Precpred(Context, 55))) throw new FailedPredicateException(this, "Precpred(Context, 55)");
						State = 462;
						Match(Percent);
						State = 463;
						expression(56);
						}
						break;
					case 7:
						{
						_localctx = new Modulus_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 464;
						if (!(Precpred(Context, 54))) throw new FailedPredicateException(this, "Precpred(Context, 54)");
						State = 465;
						Match(Double_Percent);
						State = 466;
						expression(55);
						}
						break;
					case 8:
						{
						_localctx = new Addition_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 467;
						if (!(Precpred(Context, 53))) throw new FailedPredicateException(this, "Precpred(Context, 53)");
						State = 468;
						Match(Plus);
						State = 469;
						expression(54);
						}
						break;
					case 9:
						{
						_localctx = new Subtraction_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 470;
						if (!(Precpred(Context, 52))) throw new FailedPredicateException(this, "Precpred(Context, 52)");
						State = 471;
						Match(Minus);
						State = 472;
						expression(53);
						}
						break;
					case 10:
						{
						_localctx = new Left_shift_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 473;
						if (!(Precpred(Context, 51))) throw new FailedPredicateException(this, "Precpred(Context, 51)");
						State = 474;
						Match(Double_Less_Than);
						State = 475;
						expression(52);
						}
						break;
					case 11:
						{
						_localctx = new Right_shift_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 476;
						if (!(Precpred(Context, 50))) throw new FailedPredicateException(this, "Precpred(Context, 50)");
						State = 477;
						Match(Double_Greater_Than);
						State = 478;
						expression(51);
						}
						break;
					case 12:
						{
						_localctx = new Equality_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 479;
						if (!(Precpred(Context, 49))) throw new FailedPredicateException(this, "Precpred(Context, 49)");
						State = 480;
						((Equality_expressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==Double_Equals || _la==Exclamation_Equals) ) {
							((Equality_expressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 481;
						expression(50);
						}
						break;
					case 13:
						{
						_localctx = new Comparison_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 482;
						if (!(Precpred(Context, 48))) throw new FailedPredicateException(this, "Precpred(Context, 48)");
						State = 483;
						((Comparison_expressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 90)) & ~0x3f) == 0 && ((1L << (_la - 90)) & 15L) != 0)) ) {
							((Comparison_expressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 484;
						expression(49);
						}
						break;
					case 14:
						{
						_localctx = new And_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 485;
						if (!(Precpred(Context, 46))) throw new FailedPredicateException(this, "Precpred(Context, 46)");
						State = 486;
						Match(Ampersand);
						State = 487;
						expression(47);
						}
						break;
					case 15:
						{
						_localctx = new Or_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 488;
						if (!(Precpred(Context, 44))) throw new FailedPredicateException(this, "Precpred(Context, 44)");
						State = 489;
						Match(Bar);
						State = 490;
						expression(45);
						}
						break;
					case 16:
						{
						_localctx = new Xor_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 491;
						if (!(Precpred(Context, 42))) throw new FailedPredicateException(this, "Precpred(Context, 42)");
						State = 492;
						Match(Caret);
						State = 493;
						expression(43);
						}
						break;
					case 17:
						{
						_localctx = new Index_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 494;
						if (!(Precpred(Context, 38))) throw new FailedPredicateException(this, "Precpred(Context, 38)");
						State = 495;
						Match(Double_Colon);
						State = 496;
						expression(39);
						}
						break;
					case 18:
						{
						_localctx = new Implementation_query_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 497;
						if (!(Precpred(Context, 33))) throw new FailedPredicateException(this, "Precpred(Context, 33)");
						State = 498;
						Match(Double_Dot_Question_Mark);
						State = 499;
						expression(34);
						}
						break;
					case 19:
						{
						_localctx = new Right_pipe_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 500;
						if (!(Precpred(Context, 31))) throw new FailedPredicateException(this, "Precpred(Context, 31)");
						State = 501;
						Match(Arrow_Right);
						State = 502;
						expression(32);
						}
						break;
					case 20:
						{
						_localctx = new Left_pipe_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 503;
						if (!(Precpred(Context, 30))) throw new FailedPredicateException(this, "Precpred(Context, 30)");
						State = 504;
						Match(Arrow_Left);
						State = 505;
						expression(31);
						}
						break;
					case 21:
						{
						_localctx = new Delimited_range_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 506;
						if (!(Precpred(Context, 29))) throw new FailedPredicateException(this, "Precpred(Context, 29)");
						State = 507;
						Match(Double_Dot);
						State = 508;
						expression(30);
						}
						break;
					case 22:
						{
						_localctx = new AssignmentContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 509;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 510;
						assignment_operator();
						State = 511;
						expression(3);
						}
						break;
					case 23:
						{
						_localctx = new Isinstance_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 513;
						if (!(Precpred(Context, 47))) throw new FailedPredicateException(this, "Precpred(Context, 47)");
						State = 514;
						Match(Colon_Question_Mark);
						State = 515;
						type_name(0);
						}
						break;
					case 24:
						{
						_localctx = new Logical_and_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 516;
						if (!(Precpred(Context, 45))) throw new FailedPredicateException(this, "Precpred(Context, 45)");
						State = 519;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 517;
								Match(Double_Ampersand);
								State = 518;
								expression(0);
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 521;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						}
						break;
					case 25:
						{
						_localctx = new Logical_or_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 523;
						if (!(Precpred(Context, 43))) throw new FailedPredicateException(this, "Precpred(Context, 43)");
						State = 526;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 524;
								Match(Double_Bar);
								State = 525;
								expression(0);
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 528;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						}
						break;
					case 26:
						{
						_localctx = new Conversion_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 530;
						if (!(Precpred(Context, 41))) throw new FailedPredicateException(this, "Precpred(Context, 41)");
						State = 531;
						Match(Less_Than_Colon);
						State = 532;
						type_name(0);
						}
						break;
					case 27:
						{
						_localctx = new Safe_conversion_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 533;
						if (!(Precpred(Context, 40))) throw new FailedPredicateException(this, "Precpred(Context, 40)");
						State = 534;
						Match(Less_Than_Question_Mark_Colon);
						State = 535;
						type_name(0);
						}
						break;
					case 28:
						{
						_localctx = new Open_ended_range_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 536;
						if (!(Precpred(Context, 28))) throw new FailedPredicateException(this, "Precpred(Context, 28)");
						State = 537;
						Match(Double_Dot);
						}
						break;
					case 29:
						{
						_localctx = new Postfix_if_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 538;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 539;
						postfix_if_branch();
						}
						break;
					case 30:
						{
						_localctx = new Postfix_unless_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 540;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 541;
						postfix_unless_branch();
						}
						break;
					case 31:
						{
						_localctx = new Newlined_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 542;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 543;
						Match(NewLine);
						}
						break;
					case 32:
						{
						_localctx = new Separated_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 544;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 545;
						Match(Semicolon);
						}
						break;
					case 33:
						{
						_localctx = new Member_access_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 546;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 549;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 547;
								Match(Dot);
								State = 548;
								Match(Identifier);
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 551;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						State = 554;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
						case 1:
							{
							State = 553;
							type_arg_list();
							}
							break;
						}
						State = 557;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
						case 1:
							{
							State = 556;
							arglist();
							}
							break;
						}
						}
						break;
					}
					} 
				}
				State = 563;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression_atomContext expression_atom() {
			return GetRuleContext<Expression_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Integer_atomContext integer_atom() {
			return GetRuleContext<Integer_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Real_atomContext real_atom() {
			return GetRuleContext<Real_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Boolean_atomContext boolean_atom() {
			return GetRuleContext<Boolean_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_atomContext string_atom() {
			return GetRuleContext<String_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Character_atomContext character_atom() {
			return GetRuleContext<Character_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Empty_atomContext empty_atom() {
			return GetRuleContext<Empty_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Wildcard_atomContext wildcard_atom() {
			return GetRuleContext<Wildcard_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public This_atomContext this_atom() {
			return GetRuleContext<This_atomContext>(0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 18, RULE_atom);
		try {
			State = 573;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 564;
				expression_atom();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 565;
				integer_atom();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 566;
				real_atom();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 567;
				boolean_atom();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 568;
				string_atom();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 569;
				character_atom();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 570;
				empty_atom();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 571;
				wildcard_atom();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 572;
				this_atom();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class This_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode This() { return GetToken(DassieParser.This, 0); }
		public This_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_this_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterThis_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitThis_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThis_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public This_atomContext this_atom() {
		This_atomContext _localctx = new This_atomContext(Context, State);
		EnterRule(_localctx, 20, RULE_this_atom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 575;
			Match(This);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Paren() { return GetToken(DassieParser.Open_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Paren() { return GetToken(DassieParser.Close_Paren, 0); }
		public Expression_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterExpression_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitExpression_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_atomContext expression_atom() {
		Expression_atomContext _localctx = new Expression_atomContext(Context, State);
		EnterRule(_localctx, 22, RULE_expression_atom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 577;
			Match(Open_Paren);
			State = 578;
			expression(0);
			State = 579;
			Match(Close_Paren);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Integer_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Integer_Literal() { return GetToken(DassieParser.Integer_Literal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Binary_Integer_Literal() { return GetToken(DassieParser.Binary_Integer_Literal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hex_Integer_Literal() { return GetToken(DassieParser.Hex_Integer_Literal, 0); }
		public Integer_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterInteger_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitInteger_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteger_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Integer_atomContext integer_atom() {
		Integer_atomContext _localctx = new Integer_atomContext(Context, State);
		EnterRule(_localctx, 24, RULE_integer_atom);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 581;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Real_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Real_Literal() { return GetToken(DassieParser.Real_Literal, 0); }
		public Real_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_real_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterReal_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitReal_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReal_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Real_atomContext real_atom() {
		Real_atomContext _localctx = new Real_atomContext(Context, State);
		EnterRule(_localctx, 26, RULE_real_atom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 583;
			Match(Real_Literal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Boolean_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode True() { return GetToken(DassieParser.True, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode False() { return GetToken(DassieParser.False, 0); }
		public Boolean_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterBoolean_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitBoolean_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Boolean_atomContext boolean_atom() {
		Boolean_atomContext _localctx = new Boolean_atomContext(Context, State);
		EnterRule(_localctx, 28, RULE_boolean_atom);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 585;
			_la = TokenStream.LA(1);
			if ( !(_la==True || _la==False) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String_Literal() { return GetToken(DassieParser.String_Literal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Verbatim_String_Literal() { return GetToken(DassieParser.Verbatim_String_Literal, 0); }
		public String_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterString_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitString_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_atomContext string_atom() {
		String_atomContext _localctx = new String_atomContext(Context, State);
		EnterRule(_localctx, 30, RULE_string_atom);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 587;
			_la = TokenStream.LA(1);
			if ( !(_la==String_Literal || _la==Verbatim_String_Literal) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Character_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Character_Literal() { return GetToken(DassieParser.Character_Literal, 0); }
		public Character_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_character_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterCharacter_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitCharacter_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharacter_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Character_atomContext character_atom() {
		Character_atomContext _localctx = new Character_atomContext(Context, State);
		EnterRule(_localctx, 32, RULE_character_atom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 589;
			Match(Character_Literal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Empty_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Paren() { return GetToken(DassieParser.Open_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Paren() { return GetToken(DassieParser.Close_Paren, 0); }
		public Empty_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_empty_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterEmpty_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitEmpty_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmpty_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Empty_atomContext empty_atom() {
		Empty_atomContext _localctx = new Empty_atomContext(Context, State);
		EnterRule(_localctx, 34, RULE_empty_atom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 591;
			Match(Open_Paren);
			State = 592;
			Match(Close_Paren);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Wildcard_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Underscore() { return GetToken(DassieParser.Underscore, 0); }
		public Wildcard_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wildcard_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterWildcard_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitWildcard_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWildcard_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Wildcard_atomContext wildcard_atom() {
		Wildcard_atomContext _localctx = new Wildcard_atomContext(Context, State);
		EnterRule(_localctx, 36, RULE_wildcard_atom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 594;
			Match(Underscore);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Identifier_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(DassieParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Full_identifierContext full_identifier() {
			return GetRuleContext<Full_identifierContext>(0);
		}
		public Identifier_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterIdentifier_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitIdentifier_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Identifier_atomContext identifier_atom() {
		Identifier_atomContext _localctx = new Identifier_atomContext(Context, State);
		EnterRule(_localctx, 38, RULE_identifier_atom);
		int _la;
		try {
			State = 610;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 599;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Less_Than) {
					{
					{
					State = 596;
					attribute();
					}
					}
					State = 601;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 602;
				Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 606;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Less_Than) {
					{
					{
					State = 603;
					attribute();
					}
					}
					State = 608;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 609;
				full_identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_atomContext identifier_atom() {
			return GetRuleContext<Identifier_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Paren() { return GetToken(DassieParser.Open_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Union_or_tuple_type_memberContext[] union_or_tuple_type_member() {
			return GetRuleContexts<Union_or_tuple_type_memberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Union_or_tuple_type_memberContext union_or_tuple_type_member(int i) {
			return GetRuleContext<Union_or_tuple_type_memberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Paren() { return GetToken(DassieParser.Close_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Bar() { return GetTokens(DassieParser.Bar); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bar(int i) {
			return GetToken(DassieParser.Bar, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(DassieParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(DassieParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_identifierContext generic_identifier() {
			return GetRuleContext<Generic_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Func() { return GetToken(DassieParser.Func, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Asterisk() { return GetToken(DassieParser.Asterisk, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_arg_listContext type_arg_list() {
			return GetRuleContext<Type_arg_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ampersand() { return GetToken(DassieParser.Ampersand, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Ampersand() { return GetToken(DassieParser.Double_Ampersand, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Array_type_specifierContext array_type_specifier() {
			return GetRuleContext<Array_type_specifierContext>(0);
		}
		public Type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterType_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitType_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_nameContext type_name() {
		return type_name(0);
	}

	private Type_nameContext type_name(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Type_nameContext _localctx = new Type_nameContext(Context, _parentState);
		Type_nameContext _prevctx = _localctx;
		int _startState = 40;
		EnterRecursionRule(_localctx, 40, RULE_type_name, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 638;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				{
				State = 613;
				identifier_atom();
				}
				break;
			case 2:
				{
				State = 614;
				Match(Open_Paren);
				State = 615;
				union_or_tuple_type_member();
				State = 618;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 616;
					Match(Bar);
					State = 617;
					union_or_tuple_type_member();
					}
					}
					State = 620;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Bar );
				State = 622;
				Match(Close_Paren);
				}
				break;
			case 3:
				{
				State = 624;
				Match(Open_Paren);
				State = 625;
				union_or_tuple_type_member();
				State = 628;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 626;
					Match(Comma);
					State = 627;
					union_or_tuple_type_member();
					}
					}
					State = 630;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Comma );
				State = 632;
				Match(Close_Paren);
				}
				break;
			case 4:
				{
				State = 634;
				generic_identifier();
				}
				break;
			case 5:
				{
				State = 635;
				Match(Func);
				State = 636;
				Match(Asterisk);
				State = 637;
				type_arg_list();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 648;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 646;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
					case 1:
						{
						_localctx = new Type_nameContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_type_name);
						State = 640;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 641;
						type_arg_list();
						}
						break;
					case 2:
						{
						_localctx = new Type_nameContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_type_name);
						State = 642;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 643;
						_la = TokenStream.LA(1);
						if ( !(_la==Ampersand || _la==Double_Ampersand) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case 3:
						{
						_localctx = new Type_nameContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_type_name);
						State = 644;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 645;
						array_type_specifier();
						}
						break;
					}
					} 
				}
				State = 650;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Union_or_tuple_type_memberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(DassieParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(DassieParser.Colon, 0); }
		public Union_or_tuple_type_memberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_union_or_tuple_type_member; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterUnion_or_tuple_type_member(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitUnion_or_tuple_type_member(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnion_or_tuple_type_member(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Union_or_tuple_type_memberContext union_or_tuple_type_member() {
		Union_or_tuple_type_memberContext _localctx = new Union_or_tuple_type_memberContext(Context, State);
		EnterRule(_localctx, 42, RULE_union_or_tuple_type_member);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 653;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				{
				State = 651;
				Match(Identifier);
				State = 652;
				Match(Colon);
				}
				break;
			}
			State = 655;
			type_name(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_type_specifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode At_Open_Bracket() { return GetToken(DassieParser.At_Open_Bracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Bracket() { return GetToken(DassieParser.Close_Bracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(DassieParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(DassieParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Double_Comma() { return GetTokens(DassieParser.Double_Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Comma(int i) {
			return GetToken(DassieParser.Double_Comma, i);
		}
		public Array_type_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_type_specifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterArray_type_specifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitArray_type_specifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_type_specifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_type_specifierContext array_type_specifier() {
		Array_type_specifierContext _localctx = new Array_type_specifierContext(Context, State);
		EnterRule(_localctx, 44, RULE_array_type_specifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 657;
			Match(At_Open_Bracket);
			State = 661;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma || _la==Double_Comma) {
				{
				{
				State = 658;
				_la = TokenStream.LA(1);
				if ( !(_la==Comma || _la==Double_Comma) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 663;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 664;
			Match(Close_Bracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Question_Mark() { return GetToken(DassieParser.Question_Mark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		public If_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterIf_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitIf_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_branchContext if_branch() {
		If_branchContext _localctx = new If_branchContext(Context, State);
		EnterRule(_localctx, 46, RULE_if_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 666;
			Match(Question_Mark);
			State = 667;
			expression(0);
			State = 668;
			Match(Equals);
			State = 671;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
			case 1:
				{
				State = 669;
				code_block();
				}
				break;
			case 2:
				{
				State = 670;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Postfix_if_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Question_Mark() { return GetToken(DassieParser.Question_Mark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Postfix_if_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfix_if_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterPostfix_if_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitPostfix_if_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfix_if_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Postfix_if_branchContext postfix_if_branch() {
		Postfix_if_branchContext _localctx = new Postfix_if_branchContext(Context, State);
		EnterRule(_localctx, 48, RULE_postfix_if_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 673;
			Match(Question_Mark);
			State = 674;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Elif_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(DassieParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		public Elif_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elif_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterElif_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitElif_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElif_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Elif_branchContext elif_branch() {
		Elif_branchContext _localctx = new Elif_branchContext(Context, State);
		EnterRule(_localctx, 50, RULE_elif_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 676;
			Match(Colon);
			State = 677;
			expression(0);
			State = 678;
			Match(Equals);
			State = 681;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				{
				State = 679;
				code_block();
				}
				break;
			case 2:
				{
				State = 680;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(DassieParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Else_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterElse_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitElse_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_branchContext else_branch() {
		Else_branchContext _localctx = new Else_branchContext(Context, State);
		EnterRule(_localctx, 52, RULE_else_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 683;
			Match(Colon);
			State = 684;
			Match(Equals);
			State = 687;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
			case 1:
				{
				State = 685;
				code_block();
				}
				break;
			case 2:
				{
				State = 686;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unless_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation_Question() { return GetToken(DassieParser.Exclamation_Question, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		public Unless_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unless_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterUnless_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitUnless_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnless_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unless_branchContext unless_branch() {
		Unless_branchContext _localctx = new Unless_branchContext(Context, State);
		EnterRule(_localctx, 54, RULE_unless_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 689;
			Match(Exclamation_Question);
			State = 690;
			expression(0);
			State = 691;
			Match(Equals);
			State = 694;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
			case 1:
				{
				State = 692;
				code_block();
				}
				break;
			case 2:
				{
				State = 693;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_unless_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation_Colon() { return GetToken(DassieParser.Exclamation_Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		public Else_unless_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_unless_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterElse_unless_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitElse_unless_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_unless_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_unless_branchContext else_unless_branch() {
		Else_unless_branchContext _localctx = new Else_unless_branchContext(Context, State);
		EnterRule(_localctx, 56, RULE_else_unless_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 696;
			Match(Exclamation_Colon);
			State = 697;
			expression(0);
			State = 698;
			Match(Equals);
			State = 701;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
			case 1:
				{
				State = 699;
				code_block();
				}
				break;
			case 2:
				{
				State = 700;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Postfix_unless_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation_Question() { return GetToken(DassieParser.Exclamation_Question, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Postfix_unless_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfix_unless_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterPostfix_unless_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitPostfix_unless_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfix_unless_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Postfix_unless_branchContext postfix_unless_branch() {
		Postfix_unless_branchContext _localctx = new Postfix_unless_branchContext(Context, State);
		EnterRule(_localctx, 58, RULE_postfix_unless_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 703;
			Match(Exclamation_Question);
			State = 704;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArglistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(DassieParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(DassieParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Comma() { return GetToken(DassieParser.Double_Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(DassieParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(DassieParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Colon() { return GetTokens(DassieParser.Colon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon(int i) {
			return GetToken(DassieParser.Colon, i);
		}
		public ArglistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arglist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterArglist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitArglist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArglist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArglistContext arglist() {
		ArglistContext _localctx = new ArglistContext(Context, State);
		EnterRule(_localctx, 60, RULE_arglist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 708;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
			case 1:
				{
				State = 706;
				Match(Identifier);
				State = 707;
				Match(Colon);
				}
				break;
			}
			State = 710;
			expression(0);
			}
			State = 720;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,71,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 712;
					Match(Comma);
					{
					State = 715;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
					case 1:
						{
						State = 713;
						Match(Identifier);
						State = 714;
						Match(Colon);
						}
						break;
					}
					State = 717;
					expression(0);
					}
					}
					} 
				}
				State = 722;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,71,Context);
			}
			State = 724;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				{
				State = 723;
				Match(Double_Comma);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less_Than() { return GetToken(DassieParser.Less_Than, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater_Than() { return GetToken(DassieParser.Greater_Than, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(DassieParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArglistContext arglist() {
			return GetRuleContext<ArglistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(DassieParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(DassieParser.NewLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(DassieParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Module() { return GetToken(DassieParser.Module, 0); }
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 62, RULE_attribute);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 726;
			Match(Less_Than);
			State = 729;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
			case 1:
				{
				State = 727;
				_la = TokenStream.LA(1);
				if ( !(_la==Module || _la==Identifier) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 728;
				Match(Colon);
				}
				break;
			}
			State = 731;
			type_name(0);
			State = 733;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 22)) & ~0x3f) == 0 && ((1L << (_la - 22)) & -4562231909415829733L) != 0) || ((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & 2243003854880785L) != 0)) {
				{
				State = 732;
				arglist();
				}
			}

			State = 735;
			Match(Greater_Than);
			State = 739;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 736;
					Match(NewLine);
					}
					} 
				}
				State = 741;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_identifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_atomContext identifier_atom() {
			return GetRuleContext<Identifier_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Bracket() { return GetToken(DassieParser.Open_Bracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Bracket() { return GetToken(DassieParser.Close_Bracket, 0); }
		public Generic_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterGeneric_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitGeneric_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneric_identifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Generic_identifierContext generic_identifier() {
		Generic_identifierContext _localctx = new Generic_identifierContext(Context, State);
		EnterRule(_localctx, 64, RULE_generic_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 742;
			identifier_atom();
			State = 743;
			Match(Open_Bracket);
			State = 744;
			type_parameter_list();
			State = 745;
			Match(Close_Bracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_access_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Global() { return GetToken(DassieParser.Global, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Local() { return GetToken(DassieParser.Local, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Internal() { return GetToken(DassieParser.Internal, 0); }
		public Field_access_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_access_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterField_access_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitField_access_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField_access_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Field_access_modifierContext field_access_modifier() {
		Field_access_modifierContext _localctx = new Field_access_modifierContext(Context, State);
		EnterRule(_localctx, 66, RULE_field_access_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 747;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 14336L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Field_access_modifierContext field_access_modifier() {
			return GetRuleContext<Field_access_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(DassieParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(DassieParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Var() { return GetToken(DassieParser.Var, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Val() { return GetToken(DassieParser.Val, 0); }
		public Field_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterField_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitField_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Field_declarationContext field_declaration() {
		Field_declarationContext _localctx = new Field_declarationContext(Context, State);
		EnterRule(_localctx, 68, RULE_field_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 749;
			field_access_modifier();
			State = 751;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Var || _la==Val) {
				{
				State = 750;
				_la = TokenStream.LA(1);
				if ( !(_la==Var || _la==Val) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 753;
			Match(Identifier);
			State = 756;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 754;
				Match(Colon);
				State = 755;
				type_name(0);
				}
			}

			State = 758;
			Match(Equals);
			State = 759;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlaceholderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(DassieParser.Dot, 0); }
		public PlaceholderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_placeholder; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterPlaceholder(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitPlaceholder(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlaceholder(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlaceholderContext placeholder() {
		PlaceholderContext _localctx = new PlaceholderContext(Context, State);
		EnterRule(_localctx, 70, RULE_placeholder);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 761;
			Match(Dot);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_access_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Global() { return GetToken(DassieParser.Global, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Internal() { return GetToken(DassieParser.Internal, 0); }
		public Type_access_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_access_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterType_access_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitType_access_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_access_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_access_modifierContext type_access_modifier() {
		Type_access_modifierContext _localctx = new Type_access_modifierContext(Context, State);
		EnterRule(_localctx, 72, RULE_type_access_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 763;
			_la = TokenStream.LA(1);
			if ( !(_la==Global || _la==Internal) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nested_type_access_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_access_modifierContext type_access_modifier() {
			return GetRuleContext<Type_access_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Local() { return GetToken(DassieParser.Local, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Protected() { return GetToken(DassieParser.Protected, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Internal() { return GetToken(DassieParser.Internal, 0); }
		public Nested_type_access_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nested_type_access_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterNested_type_access_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitNested_type_access_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNested_type_access_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Nested_type_access_modifierContext nested_type_access_modifier() {
		Nested_type_access_modifierContext _localctx = new Nested_type_access_modifierContext(Context, State);
		EnterRule(_localctx, 74, RULE_nested_type_access_modifier);
		int _la;
		try {
			State = 771;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Global:
			case Internal:
				EnterOuterAlt(_localctx, 1);
				{
				State = 765;
				type_access_modifier();
				}
				break;
			case Local:
				EnterOuterAlt(_localctx, 2);
				{
				State = 766;
				Match(Local);
				}
				break;
			case Protected:
				EnterOuterAlt(_localctx, 3);
				{
				State = 767;
				Match(Protected);
				State = 769;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Internal) {
					{
					State = 768;
					Match(Internal);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_special_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open() { return GetToken(DassieParser.Open, 0); }
		public Type_special_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_special_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterType_special_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitType_special_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_special_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_special_modifierContext type_special_modifier() {
		Type_special_modifierContext _localctx = new Type_special_modifierContext(Context, State);
		EnterRule(_localctx, 76, RULE_type_special_modifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 773;
			Match(Open);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_kindContext type_kind() {
			return GetRuleContext<Type_kindContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(DassieParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_access_modifierContext type_access_modifier() {
			return GetRuleContext<Type_access_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Nested_type_access_modifierContext nested_type_access_modifier() {
			return GetRuleContext<Nested_type_access_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_special_modifierContext type_special_modifier() {
			return GetRuleContext<Type_special_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_listContext parameter_list() {
			return GetRuleContext<Parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Inheritance_listContext inheritance_list() {
			return GetRuleContext<Inheritance_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_blockContext type_block() {
			return GetRuleContext<Type_blockContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 78, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 778;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Less_Than) {
				{
				{
				State = 775;
				attribute();
				}
				}
				State = 780;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 783;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
			case 1:
				{
				State = 781;
				type_access_modifier();
				}
				break;
			case 2:
				{
				State = 782;
				nested_type_access_modifier();
				}
				break;
			}
			State = 786;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Open) {
				{
				State = 785;
				type_special_modifier();
				}
			}

			State = 788;
			type_kind();
			State = 789;
			Match(Identifier);
			State = 791;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Open_Bracket) {
				{
				State = 790;
				type_parameter_list();
				}
			}

			State = 794;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,84,Context) ) {
			case 1:
				{
				State = 793;
				parameter_list();
				}
				break;
			}
			State = 797;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 796;
				inheritance_list();
				}
			}

			State = 801;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Equals) {
				{
				State = 799;
				Match(Equals);
				State = 800;
				type_block();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameter_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Bracket() { return GetToken(DassieParser.Open_Bracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameterContext[] type_parameter() {
			return GetRuleContexts<Type_parameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameterContext type_parameter(int i) {
			return GetRuleContext<Type_parameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Bracket() { return GetToken(DassieParser.Close_Bracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(DassieParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(DassieParser.Comma, i);
		}
		public Type_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterType_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitType_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_parameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameter_listContext type_parameter_list() {
		Type_parameter_listContext _localctx = new Type_parameter_listContext(Context, State);
		EnterRule(_localctx, 80, RULE_type_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 803;
			Match(Open_Bracket);
			State = 804;
			type_parameter();
			State = 809;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 805;
				Match(Comma);
				State = 806;
				type_parameter();
				}
				}
				State = 811;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 812;
			Match(Close_Bracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(DassieParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_attributeContext[] type_parameter_attribute() {
			return GetRuleContexts<Type_parameter_attributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_attributeContext type_parameter_attribute(int i) {
			return GetRuleContext<Type_parameter_attributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_varianceContext type_parameter_variance() {
			return GetRuleContext<Type_parameter_varianceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(DassieParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext[] type_name() {
			return GetRuleContexts<Type_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name(int i) {
			return GetRuleContext<Type_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(DassieParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(DassieParser.Comma, i);
		}
		public Type_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterType_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitType_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameterContext type_parameter() {
		Type_parameterContext _localctx = new Type_parameterContext(Context, State);
		EnterRule(_localctx, 82, RULE_type_parameter);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 817;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 68729962496L) != 0)) {
				{
				{
				State = 814;
				type_parameter_attribute();
				}
				}
				State = 819;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 821;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 96)) & ~0x3f) == 0 && ((1L << (_la - 96)) & 32773L) != 0)) {
				{
				State = 820;
				type_parameter_variance();
				}
			}

			State = 823;
			Match(Identifier);
			State = 833;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 824;
				Match(Colon);
				State = 825;
				type_name(0);
				State = 830;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,90,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 826;
						Match(Comma);
						State = 827;
						type_name(0);
						}
						} 
					}
					State = 832;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,90,Context);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameter_attributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ref() { return GetToken(DassieParser.Ref, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Val() { return GetToken(DassieParser.Val, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(DassieParser.Default, 0); }
		public Type_parameter_attributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterType_parameter_attribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitType_parameter_attribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_parameter_attribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameter_attributeContext type_parameter_attribute() {
		Type_parameter_attributeContext _localctx = new Type_parameter_attributeContext(Context, State);
		EnterRule(_localctx, 84, RULE_type_parameter_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 835;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 68729962496L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameter_varianceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(DassieParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(DassieParser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		public Type_parameter_varianceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter_variance; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterType_parameter_variance(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitType_parameter_variance(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_parameter_variance(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameter_varianceContext type_parameter_variance() {
		Type_parameter_varianceContext _localctx = new Type_parameter_varianceContext(Context, State);
		EnterRule(_localctx, 86, RULE_type_parameter_variance);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 837;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 96)) & ~0x3f) == 0 && ((1L << (_la - 96)) & 32773L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inheritance_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(DassieParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext[] type_name() {
			return GetRuleContexts<Type_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name(int i) {
			return GetRuleContext<Type_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(DassieParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(DassieParser.Comma, i);
		}
		public Inheritance_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inheritance_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterInheritance_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitInheritance_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInheritance_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inheritance_listContext inheritance_list() {
		Inheritance_listContext _localctx = new Inheritance_listContext(Context, State);
		EnterRule(_localctx, 88, RULE_inheritance_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 839;
			Match(Colon);
			State = 840;
			type_name(0);
			State = 845;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 841;
				Match(Comma);
				State = 842;
				type_name(0);
				}
				}
				State = 847;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_kindContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Type() { return GetToken(DassieParser.Type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ref() { return GetToken(DassieParser.Ref, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Val() { return GetToken(DassieParser.Val, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation_Mark() { return GetToken(DassieParser.Exclamation_Mark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ampersand() { return GetToken(DassieParser.Ampersand, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Template() { return GetToken(DassieParser.Template, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Module() { return GetToken(DassieParser.Module, 0); }
		public Type_kindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_kind; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterType_kind(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitType_kind(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_kind(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_kindContext type_kind() {
		Type_kindContext _localctx = new Type_kindContext(Context, State);
		EnterRule(_localctx, 90, RULE_type_kind);
		int _la;
		try {
			State = 870;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 849;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Ref) {
					{
					State = 848;
					Match(Ref);
					}
				}

				State = 851;
				Match(Type);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 852;
				Match(Val);
				State = 854;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Exclamation_Mark) {
					{
					State = 853;
					Match(Exclamation_Mark);
					}
				}

				State = 857;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Ampersand) {
					{
					State = 856;
					Match(Ampersand);
					}
				}

				State = 859;
				Match(Type);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 860;
				Match(Val);
				State = 862;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Ampersand) {
					{
					State = 861;
					Match(Ampersand);
					}
				}

				State = 865;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Exclamation_Mark) {
					{
					State = 864;
					Match(Exclamation_Mark);
					}
				}

				State = 867;
				Match(Type);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 868;
				Match(Template);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 869;
				Match(Module);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_access_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Global() { return GetToken(DassieParser.Global, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Local() { return GetToken(DassieParser.Local, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Internal() { return GetToken(DassieParser.Internal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Protected() { return GetToken(DassieParser.Protected, 0); }
		public Member_access_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_access_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterMember_access_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitMember_access_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_access_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_access_modifierContext member_access_modifier() {
		Member_access_modifierContext _localctx = new Member_access_modifierContext(Context, State);
		EnterRule(_localctx, 92, RULE_member_access_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 872;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 47104L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_oop_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Closed() { return GetToken(DassieParser.Closed, 0); }
		public Member_oop_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_oop_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterMember_oop_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitMember_oop_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_oop_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_oop_modifierContext member_oop_modifier() {
		Member_oop_modifierContext _localctx = new Member_oop_modifierContext(Context, State);
		EnterRule(_localctx, 94, RULE_member_oop_modifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 874;
			Match(Closed);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_special_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extern() { return GetToken(DassieParser.Extern, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Inline() { return GetToken(DassieParser.Inline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(DassieParser.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Abstract() { return GetToken(DassieParser.Abstract, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Literal() { return GetToken(DassieParser.Literal, 0); }
		public Member_special_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_special_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterMember_special_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitMember_special_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_special_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_special_modifierContext member_special_modifier() {
		Member_special_modifierContext _localctx = new Member_special_modifierContext(Context, State);
		EnterRule(_localctx, 96, RULE_member_special_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 876;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 137440804864L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_memberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(DassieParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Member_access_modifierContext member_access_modifier() {
			return GetRuleContext<Member_access_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Member_oop_modifierContext member_oop_modifier() {
			return GetRuleContext<Member_oop_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Member_special_modifierContext[] member_special_modifier() {
			return GetRuleContexts<Member_special_modifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Member_special_modifierContext member_special_modifier(int i) {
			return GetRuleContext<Member_special_modifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_listContext parameter_list() {
			return GetRuleContext<Parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(DassieParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Var() { return GetToken(DassieParser.Var, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Val() { return GetToken(DassieParser.Val, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(DassieParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(DassieParser.NewLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Custom_Operator() { return GetToken(DassieParser.Custom_Operator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Paren() { return GetToken(DassieParser.Open_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Paren() { return GetToken(DassieParser.Close_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Property_or_event_blockContext property_or_event_block() {
			return GetRuleContext<Property_or_event_blockContext>(0);
		}
		public Type_memberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_member; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterType_member(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitType_member(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_member(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_memberContext type_member() {
		Type_memberContext _localctx = new Type_memberContext(Context, State);
		EnterRule(_localctx, 98, RULE_type_member);
		int _la;
		try {
			State = 1019;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,129,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 881;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Less_Than) {
					{
					{
					State = 878;
					attribute();
					}
					}
					State = 883;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 885;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 47104L) != 0)) {
					{
					State = 884;
					member_access_modifier();
					}
				}

				State = 888;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Closed) {
					{
					State = 887;
					member_oop_modifier();
					}
				}

				State = 893;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 137440804864L) != 0)) {
					{
					{
					State = 890;
					member_special_modifier();
					}
					}
					State = 895;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 897;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Var || _la==Val) {
					{
					State = 896;
					_la = TokenStream.LA(1);
					if ( !(_la==Var || _la==Val) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 899;
				Match(Identifier);
				State = 901;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Open_Bracket) {
					{
					State = 900;
					type_parameter_list();
					}
				}

				State = 904;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,105,Context) ) {
				case 1:
					{
					State = 903;
					parameter_list();
					}
					break;
				}
				State = 908;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 906;
					Match(Colon);
					State = 907;
					type_name(0);
					}
				}

				State = 918;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Equals) {
					{
					State = 910;
					Match(Equals);
					State = 914;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NewLine) {
						{
						{
						State = 911;
						Match(NewLine);
						}
						}
						State = 916;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 917;
					expression(0);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 923;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Less_Than) {
					{
					{
					State = 920;
					attribute();
					}
					}
					State = 925;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 927;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 47104L) != 0)) {
					{
					State = 926;
					member_access_modifier();
					}
				}

				State = 930;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Closed) {
					{
					State = 929;
					member_oop_modifier();
					}
				}

				State = 935;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 137440804864L) != 0)) {
					{
					{
					State = 932;
					member_special_modifier();
					}
					}
					State = 937;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 939;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Var || _la==Val) {
					{
					State = 938;
					_la = TokenStream.LA(1);
					if ( !(_la==Var || _la==Val) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 941;
				Match(Identifier);
				State = 943;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Open_Bracket) {
					{
					State = 942;
					type_parameter_list();
					}
				}

				State = 945;
				Match(Colon);
				State = 946;
				type_name(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 950;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Less_Than) {
					{
					{
					State = 947;
					attribute();
					}
					}
					State = 952;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 954;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 47104L) != 0)) {
					{
					State = 953;
					member_access_modifier();
					}
				}

				State = 957;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Closed) {
					{
					State = 956;
					member_oop_modifier();
					}
				}

				State = 962;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 137440804864L) != 0)) {
					{
					{
					State = 959;
					member_special_modifier();
					}
					}
					State = 964;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 969;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Custom_Operator:
					{
					State = 965;
					Match(Custom_Operator);
					}
					break;
				case Open_Paren:
					{
					State = 966;
					Match(Open_Paren);
					State = 967;
					Match(Custom_Operator);
					State = 968;
					Match(Close_Paren);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 971;
				parameter_list();
				State = 974;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 972;
					Match(Colon);
					State = 973;
					type_name(0);
					}
				}

				State = 976;
				Match(Equals);
				State = 980;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NewLine) {
					{
					{
					State = 977;
					Match(NewLine);
					}
					}
					State = 982;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 983;
				expression(0);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 988;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Less_Than) {
					{
					{
					State = 985;
					attribute();
					}
					}
					State = 990;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 992;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 47104L) != 0)) {
					{
					State = 991;
					member_access_modifier();
					}
				}

				State = 995;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Closed) {
					{
					State = 994;
					member_oop_modifier();
					}
				}

				State = 1000;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 137440804864L) != 0)) {
					{
					{
					State = 997;
					member_special_modifier();
					}
					}
					State = 1002;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1003;
				Match(Identifier);
				State = 1005;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Open_Bracket) {
					{
					State = 1004;
					type_parameter_list();
					}
				}

				State = 1009;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 1007;
					Match(Colon);
					State = 1008;
					type_name(0);
					}
				}

				State = 1011;
				Match(Equals);
				State = 1015;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NewLine) {
					{
					{
					State = 1012;
					Match(NewLine);
					}
					}
					State = 1017;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1018;
				property_or_event_block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Access_modifier_member_groupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Brace() { return GetToken(DassieParser.Open_Brace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Brace() { return GetToken(DassieParser.Close_Brace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Member_access_modifierContext member_access_modifier() {
			return GetRuleContext<Member_access_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Member_oop_modifierContext member_oop_modifier() {
			return GetRuleContext<Member_oop_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Member_special_modifierContext[] member_special_modifier() {
			return GetRuleContexts<Member_special_modifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Member_special_modifierContext member_special_modifier(int i) {
			return GetRuleContext<Member_special_modifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(DassieParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(DassieParser.NewLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_memberContext[] type_member() {
			return GetRuleContexts<Type_memberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_memberContext type_member(int i) {
			return GetRuleContext<Type_memberContext>(i);
		}
		public Access_modifier_member_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_access_modifier_member_group; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterAccess_modifier_member_group(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitAccess_modifier_member_group(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccess_modifier_member_group(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Access_modifier_member_groupContext access_modifier_member_group() {
		Access_modifier_member_groupContext _localctx = new Access_modifier_member_groupContext(Context, State);
		EnterRule(_localctx, 100, RULE_access_modifier_member_group);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1024;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Global:
			case Local:
			case Internal:
			case Protected:
				{
				State = 1021;
				member_access_modifier();
				}
				break;
			case Closed:
				{
				State = 1022;
				member_oop_modifier();
				}
				break;
			case Static:
			case Abstract:
			case Extern:
			case Inline:
			case Literal:
				{
				State = 1023;
				member_special_modifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1029;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 137440804864L) != 0)) {
				{
				{
				State = 1026;
				member_special_modifier();
				}
				}
				State = 1031;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1032;
			Match(Equals);
			State = 1033;
			Match(Open_Brace);
			State = 1038;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 412331472900L) != 0) || ((((_la - 90)) & ~0x3f) == 0 && ((1L << (_la - 90)) & 141287244169217L) != 0)) {
				{
				State = 1036;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NewLine:
					{
					State = 1034;
					Match(NewLine);
					}
					break;
				case Global:
				case Local:
				case Internal:
				case Static:
				case Protected:
				case Closed:
				case Abstract:
				case Extern:
				case Inline:
				case Var:
				case Val:
				case Literal:
				case Open_Paren:
				case Less_Than:
				case Identifier:
				case Custom_Operator:
					{
					State = 1035;
					type_member();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 1040;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1041;
			Match(Close_Brace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Paren() { return GetToken(DassieParser.Open_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Paren() { return GetToken(DassieParser.Close_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(DassieParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(DassieParser.Comma, i);
		}
		public Parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterParameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitParameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_listContext parameter_list() {
		Parameter_listContext _localctx = new Parameter_listContext(Context, State);
		EnterRule(_localctx, 102, RULE_parameter_list);
		int _la;
		try {
			State = 1063;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Open_Paren:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1043;
				Match(Open_Paren);
				State = 1052;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Var || _la==Val || ((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & 17592186044451L) != 0)) {
					{
					State = 1044;
					parameter();
					State = 1049;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==Comma) {
						{
						{
						State = 1045;
						Match(Comma);
						State = 1046;
						parameter();
						}
						}
						State = 1051;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 1054;
				Match(Close_Paren);
				}
				break;
			case Var:
			case Val:
			case Ampersand_Greater:
			case Less_Ampersand:
			case Less_Than:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1055;
				parameter();
				State = 1060;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 1056;
					Match(Comma);
					State = 1057;
					parameter();
					}
					}
					State = 1062;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ampersand_Greater() { return GetToken(DassieParser.Ampersand_Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less_Ampersand() { return GetToken(DassieParser.Less_Ampersand, 0); }
		public Parameter_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterParameter_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitParameter_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_modifierContext parameter_modifier() {
		Parameter_modifierContext _localctx = new Parameter_modifierContext(Context, State);
		EnterRule(_localctx, 104, RULE_parameter_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1065;
			_la = TokenStream.LA(1);
			if ( !(_la==Ampersand_Greater || _la==Less_Ampersand) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(DassieParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_modifierContext parameter_modifier() {
			return GetRuleContext<Parameter_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Dot() { return GetToken(DassieParser.Double_Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(DassieParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_constraintContext parameter_constraint() {
			return GetRuleContext<Parameter_constraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Val() { return GetToken(DassieParser.Val, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Var() { return GetToken(DassieParser.Var, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 106, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1068;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Less_Than) {
				{
				State = 1067;
				attribute();
				}
			}

			State = 1071;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Var || _la==Val) {
				{
				State = 1070;
				_la = TokenStream.LA(1);
				if ( !(_la==Var || _la==Val) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1074;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Ampersand_Greater || _la==Less_Ampersand) {
				{
				State = 1073;
				parameter_modifier();
				}
			}

			State = 1076;
			Match(Identifier);
			State = 1078;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Double_Dot) {
				{
				State = 1077;
				Match(Double_Dot);
				}
			}

			State = 1082;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,142,Context) ) {
			case 1:
				{
				State = 1080;
				Match(Colon);
				State = 1081;
				type_name(0);
				}
				break;
			}
			State = 1085;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Open_Brace || _la==Question_Mark) {
				{
				State = 1084;
				parameter_constraint();
				}
			}

			State = 1089;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,144,Context) ) {
			case 1:
				{
				State = 1087;
				Match(Equals);
				State = 1088;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_constraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Brace() { return GetToken(DassieParser.Open_Brace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Brace() { return GetToken(DassieParser.Close_Brace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Question_Mark() { return GetToken(DassieParser.Question_Mark, 0); }
		public Parameter_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterParameter_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitParameter_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_constraintContext parameter_constraint() {
		Parameter_constraintContext _localctx = new Parameter_constraintContext(Context, State);
		EnterRule(_localctx, 108, RULE_parameter_constraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1092;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Question_Mark) {
				{
				State = 1091;
				Match(Question_Mark);
				}
			}

			State = 1094;
			Match(Open_Brace);
			State = 1095;
			expression(0);
			State = 1096;
			Match(Close_Brace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Brace() { return GetToken(DassieParser.Open_Brace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Brace() { return GetToken(DassieParser.Close_Brace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_memberContext[] type_member() {
			return GetRuleContexts<Type_memberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_memberContext type_member(int i) {
			return GetRuleContext<Type_memberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(DassieParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(DassieParser.NewLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Access_modifier_member_groupContext[] access_modifier_member_group() {
			return GetRuleContexts<Access_modifier_member_groupContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Access_modifier_member_groupContext access_modifier_member_group(int i) {
			return GetRuleContext<Access_modifier_member_groupContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Type_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterType_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitType_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_blockContext type_block() {
		Type_blockContext _localctx = new Type_blockContext(Context, State);
		EnterRule(_localctx, 110, RULE_type_block);
		int _la;
		try {
			State = 1110;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Open_Brace:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1098;
				Match(Open_Brace);
				State = 1105;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 412333637380L) != 0) || ((((_la - 90)) & ~0x3f) == 0 && ((1L << (_la - 90)) & 141287244169217L) != 0)) {
					{
					State = 1103;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,146,Context) ) {
					case 1:
						{
						State = 1099;
						type_member();
						}
						break;
					case 2:
						{
						State = 1100;
						type();
						}
						break;
					case 3:
						{
						State = 1101;
						Match(NewLine);
						}
						break;
					case 4:
						{
						State = 1102;
						access_modifier_member_group();
						}
						break;
					}
					}
					State = 1107;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1108;
				Match(Close_Brace);
				}
				break;
			case Func:
			case Open_Paren:
			case Less_Than:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1109;
				type_name(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Try_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Try() { return GetToken(DassieParser.Try, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Try_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_try_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterTry_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitTry_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTry_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Try_branchContext try_branch() {
		Try_branchContext _localctx = new Try_branchContext(Context, State);
		EnterRule(_localctx, 112, RULE_try_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1112;
			Match(Try);
			State = 1113;
			Match(Equals);
			State = 1114;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Catch_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Catch() { return GetToken(DassieParser.Catch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(DassieParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(DassieParser.Colon, 0); }
		public Catch_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catch_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterCatch_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitCatch_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatch_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Catch_branchContext catch_branch() {
		Catch_branchContext _localctx = new Catch_branchContext(Context, State);
		EnterRule(_localctx, 114, RULE_catch_branch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1116;
			Match(Catch);
			State = 1122;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Func || _la==Open_Paren || _la==Less_Than || _la==Identifier) {
				{
				State = 1119;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,149,Context) ) {
				case 1:
					{
					State = 1117;
					Match(Identifier);
					State = 1118;
					Match(Colon);
					}
					break;
				}
				State = 1121;
				type_name(0);
				}
			}

			State = 1124;
			Match(Equals);
			State = 1125;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Finally_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Finally() { return GetToken(DassieParser.Finally, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Finally_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finally_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterFinally_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitFinally_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinally_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Finally_branchContext finally_branch() {
		Finally_branchContext _localctx = new Finally_branchContext(Context, State);
		EnterRule(_localctx, 116, RULE_finally_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1127;
			Match(Finally);
			State = 1128;
			Match(Equals);
			State = 1129;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fault_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Fault() { return GetToken(DassieParser.Fault, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Fault_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fault_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterFault_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitFault_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFault_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fault_branchContext fault_branch() {
		Fault_branchContext _localctx = new Fault_branchContext(Context, State);
		EnterRule(_localctx, 118, RULE_fault_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1131;
			Match(Fault);
			State = 1132;
			Match(Equals);
			State = 1133;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_arg_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Bracket() { return GetToken(DassieParser.Open_Bracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext[] type_name() {
			return GetRuleContexts<Type_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name(int i) {
			return GetRuleContext<Type_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Bracket() { return GetToken(DassieParser.Close_Bracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(DassieParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(DassieParser.Comma, i);
		}
		public Type_arg_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_arg_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterType_arg_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitType_arg_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_arg_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_arg_listContext type_arg_list() {
		Type_arg_listContext _localctx = new Type_arg_listContext(Context, State);
		EnterRule(_localctx, 120, RULE_type_arg_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1135;
			Match(Open_Bracket);
			State = 1136;
			type_name(0);
			State = 1141;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 1137;
				Match(Comma);
				State = 1138;
				type_name(0);
				}
				}
				State = 1143;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1144;
			Match(Close_Bracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus_Equals() { return GetToken(DassieParser.Plus_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus_Equals() { return GetToken(DassieParser.Minus_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Asterisk_Equals() { return GetToken(DassieParser.Asterisk_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Slash_Equals() { return GetToken(DassieParser.Slash_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Asterisk_Equals() { return GetToken(DassieParser.Double_Asterisk_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Percent_Equals() { return GetToken(DassieParser.Percent_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Percent_Equals() { return GetToken(DassieParser.Double_Percent_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tilde_Equals() { return GetToken(DassieParser.Tilde_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Less_Than_Equals() { return GetToken(DassieParser.Double_Less_Than_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Greater_Than_Equals() { return GetToken(DassieParser.Double_Greater_Than_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bar_Equals() { return GetToken(DassieParser.Bar_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ampersand_Equals() { return GetToken(DassieParser.Ampersand_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Bar_Equals() { return GetToken(DassieParser.Double_Bar_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Ampersand_Equals() { return GetToken(DassieParser.Double_Ampersand_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Caret_Equals() { return GetToken(DassieParser.Caret_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot_Equals() { return GetToken(DassieParser.Dot_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Question_Mark_Equals() { return GetToken(DassieParser.Double_Question_Mark_Equals, 0); }
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterAssignment_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitAssignment_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_operatorContext assignment_operator() {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(Context, State);
		EnterRule(_localctx, 122, RULE_assignment_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1146;
			_la = TokenStream.LA(1);
			if ( !(_la==Dot_Equals || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 23769607467041281L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_pointer_parameter_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Paren() { return GetToken(DassieParser.Open_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext[] type_name() {
			return GetRuleContexts<Type_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name(int i) {
			return GetRuleContext<Type_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Paren() { return GetToken(DassieParser.Close_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(DassieParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(DassieParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(DassieParser.Comma, i);
		}
		public Function_pointer_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_pointer_parameter_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterFunction_pointer_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitFunction_pointer_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_pointer_parameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_pointer_parameter_listContext function_pointer_parameter_list() {
		Function_pointer_parameter_listContext _localctx = new Function_pointer_parameter_listContext(Context, State);
		EnterRule(_localctx, 124, RULE_function_pointer_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1159;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,153,Context) ) {
			case 1:
				{
				State = 1148;
				Match(Open_Paren);
				State = 1149;
				type_name(0);
				State = 1154;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 1150;
					Match(Comma);
					State = 1151;
					type_name(0);
					}
					}
					State = 1156;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1157;
				Match(Close_Paren);
				}
				break;
			}
			State = 1163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 1161;
				Match(Colon);
				State = 1162;
				type_name(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Match_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dollar_Sign() { return GetToken(DassieParser.Dollar_Sign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Match_blockContext match_block() {
			return GetRuleContext<Match_blockContext>(0);
		}
		public Match_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_match_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterMatch_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitMatch_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatch_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Match_exprContext match_expr() {
		Match_exprContext _localctx = new Match_exprContext(Context, State);
		EnterRule(_localctx, 126, RULE_match_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1165;
			Match(Dollar_Sign);
			State = 1166;
			expression(0);
			State = 1167;
			Match(Equals);
			State = 1168;
			match_block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Match_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Brace() { return GetToken(DassieParser.Open_Brace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Brace() { return GetToken(DassieParser.Close_Brace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(DassieParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(DassieParser.NewLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Match_first_caseContext match_first_case() {
			return GetRuleContext<Match_first_caseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Match_alternative_caseContext[] match_alternative_case() {
			return GetRuleContexts<Match_alternative_caseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Match_alternative_caseContext match_alternative_case(int i) {
			return GetRuleContext<Match_alternative_caseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Match_default_caseContext match_default_case() {
			return GetRuleContext<Match_default_caseContext>(0);
		}
		public Match_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_match_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterMatch_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitMatch_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatch_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Match_blockContext match_block() {
		Match_blockContext _localctx = new Match_blockContext(Context, State);
		EnterRule(_localctx, 128, RULE_match_block);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1170;
			Match(Open_Brace);
			State = 1174;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,155,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1171;
					Match(NewLine);
					}
					} 
				}
				State = 1176;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,155,Context);
			}
			State = 1184;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Question_Mark) {
				{
				State = 1177;
				match_first_case();
				State = 1181;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,156,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1178;
						Match(NewLine);
						}
						} 
					}
					State = 1183;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,156,Context);
				}
				}
			}

			State = 1195;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,159,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1186;
					match_alternative_case();
					State = 1190;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,158,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 1187;
							Match(NewLine);
							}
							} 
						}
						State = 1192;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,158,Context);
					}
					}
					} 
				}
				State = 1197;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,159,Context);
			}
			State = 1199;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 1198;
				match_default_case();
				}
			}

			State = 1204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NewLine) {
				{
				{
				State = 1201;
				Match(NewLine);
				}
				}
				State = 1206;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1207;
			Match(Close_Brace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Match_first_caseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Question_Mark() { return GetToken(DassieParser.Question_Mark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Match_case_expressionContext match_case_expression() {
			return GetRuleContext<Match_case_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Match_first_caseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_match_first_case; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterMatch_first_case(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitMatch_first_case(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatch_first_case(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Match_first_caseContext match_first_case() {
		Match_first_caseContext _localctx = new Match_first_caseContext(Context, State);
		EnterRule(_localctx, 130, RULE_match_first_case);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1209;
			Match(Question_Mark);
			State = 1210;
			match_case_expression();
			State = 1211;
			Match(Equals);
			State = 1212;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Match_alternative_caseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(DassieParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Match_case_expressionContext match_case_expression() {
			return GetRuleContext<Match_case_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Match_alternative_caseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_match_alternative_case; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterMatch_alternative_case(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitMatch_alternative_case(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatch_alternative_case(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Match_alternative_caseContext match_alternative_case() {
		Match_alternative_caseContext _localctx = new Match_alternative_caseContext(Context, State);
		EnterRule(_localctx, 132, RULE_match_alternative_case);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1214;
			Match(Colon);
			State = 1215;
			match_case_expression();
			State = 1216;
			Match(Equals);
			State = 1217;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Match_default_caseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(DassieParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Match_default_caseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_match_default_case; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterMatch_default_case(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitMatch_default_case(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatch_default_case(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Match_default_caseContext match_default_case() {
		Match_default_caseContext _localctx = new Match_default_caseContext(Context, State);
		EnterRule(_localctx, 134, RULE_match_default_case);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1219;
			Match(Colon);
			State = 1220;
			Match(Equals);
			State = 1221;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Match_case_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Match_case_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_match_case_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterMatch_case_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitMatch_case_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatch_case_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Match_case_expressionContext match_case_expression() {
		Match_case_expressionContext _localctx = new Match_case_expressionContext(Context, State);
		EnterRule(_localctx, 136, RULE_match_case_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1223;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_functionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(DassieParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_listContext parameter_list() {
			return GetRuleContext<Parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(DassieParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(DassieParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(DassieParser.NewLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Var() { return GetToken(DassieParser.Var, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Val() { return GetToken(DassieParser.Val, 0); }
		public Local_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterLocal_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitLocal_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_functionContext local_function() {
		Local_functionContext _localctx = new Local_functionContext(Context, State);
		EnterRule(_localctx, 138, RULE_local_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1226;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Var || _la==Val) {
				{
				State = 1225;
				_la = TokenStream.LA(1);
				if ( !(_la==Var || _la==Val) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1228;
			Match(Identifier);
			State = 1230;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Open_Bracket) {
				{
				State = 1229;
				type_parameter_list();
				}
			}

			State = 1233;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 274890489856L) != 0) || ((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & 17592186044451L) != 0)) {
				{
				State = 1232;
				parameter_list();
				}
			}

			State = 1237;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 1235;
				Match(Colon);
				State = 1236;
				type_name(0);
				}
			}

			State = 1239;
			Match(Equals);
			State = 1243;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NewLine) {
				{
				{
				State = 1240;
				Match(NewLine);
				}
				}
				State = 1245;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1246;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_handlerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Add_Handler() { return GetToken(DassieParser.Add_Handler, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Add_handlerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_handler; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterAdd_handler(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitAdd_handler(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd_handler(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Add_handlerContext add_handler() {
		Add_handlerContext _localctx = new Add_handlerContext(Context, State);
		EnterRule(_localctx, 140, RULE_add_handler);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1248;
			Match(Add_Handler);
			State = 1249;
			Match(Equals);
			State = 1250;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Remove_handlerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Remove_Handler() { return GetToken(DassieParser.Remove_Handler, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Remove_handlerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_remove_handler; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterRemove_handler(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitRemove_handler(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemove_handler(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Remove_handlerContext remove_handler() {
		Remove_handlerContext _localctx = new Remove_handlerContext(Context, State);
		EnterRule(_localctx, 142, RULE_remove_handler);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1252;
			Match(Remove_Handler);
			State = 1253;
			Match(Equals);
			State = 1254;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_getterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Get() { return GetToken(DassieParser.Get, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Property_getterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_getter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterProperty_getter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitProperty_getter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty_getter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Property_getterContext property_getter() {
		Property_getterContext _localctx = new Property_getterContext(Context, State);
		EnterRule(_localctx, 144, RULE_property_getter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1256;
			Match(Get);
			State = 1257;
			Match(Equals);
			State = 1258;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_setterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Set() { return GetToken(DassieParser.Set, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Property_setterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_setter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterProperty_setter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitProperty_setter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty_setter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Property_setterContext property_setter() {
		Property_setterContext _localctx = new Property_setterContext(Context, State);
		EnterRule(_localctx, 146, RULE_property_setter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1260;
			Match(Set);
			State = 1261;
			Match(Equals);
			State = 1262;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_or_event_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Brace() { return GetToken(DassieParser.Open_Brace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Brace() { return GetToken(DassieParser.Close_Brace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(DassieParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(DassieParser.NewLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Add_handlerContext[] add_handler() {
			return GetRuleContexts<Add_handlerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Add_handlerContext add_handler(int i) {
			return GetRuleContext<Add_handlerContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Remove_handlerContext[] remove_handler() {
			return GetRuleContexts<Remove_handlerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Remove_handlerContext remove_handler(int i) {
			return GetRuleContext<Remove_handlerContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Property_getterContext[] property_getter() {
			return GetRuleContexts<Property_getterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Property_getterContext property_getter(int i) {
			return GetRuleContext<Property_getterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Property_setterContext[] property_setter() {
			return GetRuleContexts<Property_setterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Property_setterContext property_setter(int i) {
			return GetRuleContext<Property_setterContext>(i);
		}
		public Property_or_event_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_or_event_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterProperty_or_event_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitProperty_or_event_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty_or_event_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Property_or_event_blockContext property_or_event_block() {
		Property_or_event_blockContext _localctx = new Property_or_event_blockContext(Context, State);
		EnterRule(_localctx, 148, RULE_property_or_event_block);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1264;
			Match(Open_Brace);
			State = 1268;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,167,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1265;
					Match(NewLine);
					}
					} 
				}
				State = 1270;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,167,Context);
			}
			State = 1285;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,172,Context) ) {
			case 1:
				{
				State = 1274;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 1274;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case Add_Handler:
							{
							State = 1271;
							add_handler();
							}
							break;
						case Remove_Handler:
							{
							State = 1272;
							remove_handler();
							}
							break;
						case NewLine:
							{
							State = 1273;
							Match(NewLine);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1276;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,169,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				{
				State = 1281;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 1281;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case Get:
							{
							State = 1278;
							property_getter();
							}
							break;
						case Set:
							{
							State = 1279;
							property_setter();
							}
							break;
						case NewLine:
							{
							State = 1280;
							Match(NewLine);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1283;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,171,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
			State = 1290;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NewLine) {
				{
				{
				State = 1287;
				Match(NewLine);
				}
				}
				State = 1292;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1293;
			Match(Close_Brace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 8: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 20: return type_name_sempred((Type_nameContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 62);
		case 1: return Precpred(Context, 60);
		case 2: return Precpred(Context, 59);
		case 3: return Precpred(Context, 57);
		case 4: return Precpred(Context, 56);
		case 5: return Precpred(Context, 55);
		case 6: return Precpred(Context, 54);
		case 7: return Precpred(Context, 53);
		case 8: return Precpred(Context, 52);
		case 9: return Precpred(Context, 51);
		case 10: return Precpred(Context, 50);
		case 11: return Precpred(Context, 49);
		case 12: return Precpred(Context, 48);
		case 13: return Precpred(Context, 46);
		case 14: return Precpred(Context, 44);
		case 15: return Precpred(Context, 42);
		case 16: return Precpred(Context, 38);
		case 17: return Precpred(Context, 33);
		case 18: return Precpred(Context, 31);
		case 19: return Precpred(Context, 30);
		case 20: return Precpred(Context, 29);
		case 21: return Precpred(Context, 2);
		case 22: return Precpred(Context, 47);
		case 23: return Precpred(Context, 45);
		case 24: return Precpred(Context, 43);
		case 25: return Precpred(Context, 41);
		case 26: return Precpred(Context, 40);
		case 27: return Precpred(Context, 28);
		case 28: return Precpred(Context, 22);
		case 29: return Precpred(Context, 20);
		case 30: return Precpred(Context, 7);
		case 31: return Precpred(Context, 6);
		case 32: return Precpred(Context, 3);
		}
		return true;
	}
	private bool type_name_sempred(Type_nameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 33: return Precpred(Context, 4);
		case 34: return Precpred(Context, 3);
		case 35: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,137,1296,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,1,0,1,0,5,0,153,8,0,10,0,12,0,
		156,9,0,1,0,1,0,5,0,160,8,0,10,0,12,0,163,9,0,3,0,165,8,0,1,0,1,0,1,0,
		1,1,1,1,3,1,172,8,1,1,2,1,2,1,2,5,2,177,8,2,10,2,12,2,180,9,2,1,3,1,3,
		1,3,4,3,185,8,3,11,3,12,3,186,1,4,3,4,190,8,4,1,4,1,4,1,4,1,4,5,4,196,
		8,4,10,4,12,4,199,9,4,1,4,5,4,202,8,4,10,4,12,4,205,9,4,1,5,1,5,1,5,1,
		6,1,6,1,6,5,6,213,8,6,10,6,12,6,216,9,6,1,7,1,7,1,7,5,7,221,8,7,10,7,12,
		7,224,9,7,1,7,3,7,227,8,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
		1,8,3,8,241,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,255,
		8,8,1,8,1,8,1,8,3,8,260,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,4,8,271,
		8,8,11,8,12,8,272,1,8,1,8,1,8,1,8,5,8,279,8,8,10,8,12,8,282,9,8,1,8,5,
		8,285,8,8,10,8,12,8,288,9,8,1,8,5,8,291,8,8,10,8,12,8,294,9,8,1,8,3,8,
		297,8,8,1,8,1,8,5,8,301,8,8,10,8,12,8,304,9,8,1,8,5,8,307,8,8,10,8,12,
		8,310,9,8,1,8,5,8,313,8,8,10,8,12,8,316,9,8,1,8,3,8,319,8,8,1,8,1,8,3,
		8,323,8,8,1,8,3,8,326,8,8,1,8,1,8,1,8,3,8,331,8,8,1,8,3,8,334,8,8,1,8,
		3,8,337,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
		8,1,8,1,8,1,8,1,8,5,8,358,8,8,10,8,12,8,361,9,8,1,8,3,8,364,8,8,1,8,3,
		8,367,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,381,8,8,
		10,8,12,8,384,9,8,3,8,386,8,8,1,8,1,8,1,8,1,8,1,8,5,8,393,8,8,10,8,12,
		8,396,9,8,3,8,398,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
		1,8,1,8,5,8,414,8,8,10,8,12,8,417,9,8,3,8,419,8,8,1,8,1,8,1,8,1,8,1,8,
		3,8,426,8,8,1,8,3,8,429,8,8,1,8,1,8,1,8,1,8,4,8,435,8,8,11,8,12,8,436,
		1,8,1,8,3,8,441,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
		8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
		1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
		8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
		1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,4,8,520,8,8,11,8,12,8,
		521,1,8,1,8,1,8,4,8,527,8,8,11,8,12,8,528,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
		1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,4,8,550,8,8,11,8,12,8,
		551,1,8,3,8,555,8,8,1,8,3,8,558,8,8,5,8,560,8,8,10,8,12,8,563,9,8,1,9,
		1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,574,8,9,1,10,1,10,1,11,1,11,1,11,1,
		11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,
		18,1,18,1,19,5,19,598,8,19,10,19,12,19,601,9,19,1,19,1,19,5,19,605,8,19,
		10,19,12,19,608,9,19,1,19,3,19,611,8,19,1,20,1,20,1,20,1,20,1,20,1,20,
		4,20,619,8,20,11,20,12,20,620,1,20,1,20,1,20,1,20,1,20,1,20,4,20,629,8,
		20,11,20,12,20,630,1,20,1,20,1,20,1,20,1,20,1,20,3,20,639,8,20,1,20,1,
		20,1,20,1,20,1,20,1,20,5,20,647,8,20,10,20,12,20,650,9,20,1,21,1,21,3,
		21,654,8,21,1,21,1,21,1,22,1,22,5,22,660,8,22,10,22,12,22,663,9,22,1,22,
		1,22,1,23,1,23,1,23,1,23,1,23,3,23,672,8,23,1,24,1,24,1,24,1,25,1,25,1,
		25,1,25,1,25,3,25,682,8,25,1,26,1,26,1,26,1,26,3,26,688,8,26,1,27,1,27,
		1,27,1,27,1,27,3,27,695,8,27,1,28,1,28,1,28,1,28,1,28,3,28,702,8,28,1,
		29,1,29,1,29,1,30,1,30,3,30,709,8,30,1,30,1,30,1,30,1,30,1,30,3,30,716,
		8,30,1,30,5,30,719,8,30,10,30,12,30,722,9,30,1,30,3,30,725,8,30,1,31,1,
		31,1,31,3,31,730,8,31,1,31,1,31,3,31,734,8,31,1,31,1,31,5,31,738,8,31,
		10,31,12,31,741,9,31,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,34,1,34,3,34,
		752,8,34,1,34,1,34,1,34,3,34,757,8,34,1,34,1,34,1,34,1,35,1,35,1,36,1,
		36,1,37,1,37,1,37,1,37,3,37,770,8,37,3,37,772,8,37,1,38,1,38,1,39,5,39,
		777,8,39,10,39,12,39,780,9,39,1,39,1,39,3,39,784,8,39,1,39,3,39,787,8,
		39,1,39,1,39,1,39,3,39,792,8,39,1,39,3,39,795,8,39,1,39,3,39,798,8,39,
		1,39,1,39,3,39,802,8,39,1,40,1,40,1,40,1,40,5,40,808,8,40,10,40,12,40,
		811,9,40,1,40,1,40,1,41,5,41,816,8,41,10,41,12,41,819,9,41,1,41,3,41,822,
		8,41,1,41,1,41,1,41,1,41,1,41,5,41,829,8,41,10,41,12,41,832,9,41,3,41,
		834,8,41,1,42,1,42,1,43,1,43,1,44,1,44,1,44,1,44,5,44,844,8,44,10,44,12,
		44,847,9,44,1,45,3,45,850,8,45,1,45,1,45,1,45,3,45,855,8,45,1,45,3,45,
		858,8,45,1,45,1,45,1,45,3,45,863,8,45,1,45,3,45,866,8,45,1,45,1,45,1,45,
		3,45,871,8,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,5,49,880,8,49,10,49,12,
		49,883,9,49,1,49,3,49,886,8,49,1,49,3,49,889,8,49,1,49,5,49,892,8,49,10,
		49,12,49,895,9,49,1,49,3,49,898,8,49,1,49,1,49,3,49,902,8,49,1,49,3,49,
		905,8,49,1,49,1,49,3,49,909,8,49,1,49,1,49,5,49,913,8,49,10,49,12,49,916,
		9,49,1,49,3,49,919,8,49,1,49,5,49,922,8,49,10,49,12,49,925,9,49,1,49,3,
		49,928,8,49,1,49,3,49,931,8,49,1,49,5,49,934,8,49,10,49,12,49,937,9,49,
		1,49,3,49,940,8,49,1,49,1,49,3,49,944,8,49,1,49,1,49,1,49,5,49,949,8,49,
		10,49,12,49,952,9,49,1,49,3,49,955,8,49,1,49,3,49,958,8,49,1,49,5,49,961,
		8,49,10,49,12,49,964,9,49,1,49,1,49,1,49,1,49,3,49,970,8,49,1,49,1,49,
		1,49,3,49,975,8,49,1,49,1,49,5,49,979,8,49,10,49,12,49,982,9,49,1,49,1,
		49,1,49,5,49,987,8,49,10,49,12,49,990,9,49,1,49,3,49,993,8,49,1,49,3,49,
		996,8,49,1,49,5,49,999,8,49,10,49,12,49,1002,9,49,1,49,1,49,3,49,1006,
		8,49,1,49,1,49,3,49,1010,8,49,1,49,1,49,5,49,1014,8,49,10,49,12,49,1017,
		9,49,1,49,3,49,1020,8,49,1,50,1,50,1,50,3,50,1025,8,50,1,50,5,50,1028,
		8,50,10,50,12,50,1031,9,50,1,50,1,50,1,50,1,50,5,50,1037,8,50,10,50,12,
		50,1040,9,50,1,50,1,50,1,51,1,51,1,51,1,51,5,51,1048,8,51,10,51,12,51,
		1051,9,51,3,51,1053,8,51,1,51,1,51,1,51,1,51,5,51,1059,8,51,10,51,12,51,
		1062,9,51,3,51,1064,8,51,1,52,1,52,1,53,3,53,1069,8,53,1,53,3,53,1072,
		8,53,1,53,3,53,1075,8,53,1,53,1,53,3,53,1079,8,53,1,53,1,53,3,53,1083,
		8,53,1,53,3,53,1086,8,53,1,53,1,53,3,53,1090,8,53,1,54,3,54,1093,8,54,
		1,54,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,5,55,1104,8,55,10,55,12,55,
		1107,9,55,1,55,1,55,3,55,1111,8,55,1,56,1,56,1,56,1,56,1,57,1,57,1,57,
		3,57,1120,8,57,1,57,3,57,1123,8,57,1,57,1,57,1,57,1,58,1,58,1,58,1,58,
		1,59,1,59,1,59,1,59,1,60,1,60,1,60,1,60,5,60,1140,8,60,10,60,12,60,1143,
		9,60,1,60,1,60,1,61,1,61,1,62,1,62,1,62,1,62,5,62,1153,8,62,10,62,12,62,
		1156,9,62,1,62,1,62,3,62,1160,8,62,1,62,1,62,3,62,1164,8,62,1,63,1,63,
		1,63,1,63,1,63,1,64,1,64,5,64,1173,8,64,10,64,12,64,1176,9,64,1,64,1,64,
		5,64,1180,8,64,10,64,12,64,1183,9,64,3,64,1185,8,64,1,64,1,64,5,64,1189,
		8,64,10,64,12,64,1192,9,64,5,64,1194,8,64,10,64,12,64,1197,9,64,1,64,3,
		64,1200,8,64,1,64,5,64,1203,8,64,10,64,12,64,1206,9,64,1,64,1,64,1,65,
		1,65,1,65,1,65,1,65,1,66,1,66,1,66,1,66,1,66,1,67,1,67,1,67,1,67,1,68,
		1,68,1,69,3,69,1227,8,69,1,69,1,69,3,69,1231,8,69,1,69,3,69,1234,8,69,
		1,69,1,69,3,69,1238,8,69,1,69,1,69,5,69,1242,8,69,10,69,12,69,1245,9,69,
		1,69,1,69,1,70,1,70,1,70,1,70,1,71,1,71,1,71,1,71,1,72,1,72,1,72,1,72,
		1,73,1,73,1,73,1,73,1,74,1,74,5,74,1267,8,74,10,74,12,74,1270,9,74,1,74,
		1,74,1,74,4,74,1275,8,74,11,74,12,74,1276,1,74,1,74,1,74,4,74,1282,8,74,
		11,74,12,74,1283,3,74,1286,8,74,1,74,5,74,1289,8,74,10,74,12,74,1292,9,
		74,1,74,1,74,1,74,0,2,16,40,75,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,
		30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,
		78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
		120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,0,18,1,0,34,
		35,1,0,22,23,1,0,94,95,1,0,90,93,1,0,130,132,1,0,31,32,1,0,135,136,2,0,
		84,84,87,87,1,0,46,47,2,0,9,9,129,129,1,0,11,13,2,0,11,11,13,13,3,0,21,
		21,23,23,36,36,3,0,96,96,98,98,111,111,2,0,11,13,15,15,3,0,14,14,18,20,
		37,37,1,0,85,86,14,0,51,51,65,65,74,74,82,83,88,89,97,97,99,99,101,101,
		103,103,106,106,109,111,115,115,117,117,119,119,1477,0,154,1,0,0,0,2,171,
		1,0,0,0,4,178,1,0,0,0,6,184,1,0,0,0,8,189,1,0,0,0,10,206,1,0,0,0,12,209,
		1,0,0,0,14,217,1,0,0,0,16,440,1,0,0,0,18,573,1,0,0,0,20,575,1,0,0,0,22,
		577,1,0,0,0,24,581,1,0,0,0,26,583,1,0,0,0,28,585,1,0,0,0,30,587,1,0,0,
		0,32,589,1,0,0,0,34,591,1,0,0,0,36,594,1,0,0,0,38,610,1,0,0,0,40,638,1,
		0,0,0,42,653,1,0,0,0,44,657,1,0,0,0,46,666,1,0,0,0,48,673,1,0,0,0,50,676,
		1,0,0,0,52,683,1,0,0,0,54,689,1,0,0,0,56,696,1,0,0,0,58,703,1,0,0,0,60,
		708,1,0,0,0,62,726,1,0,0,0,64,742,1,0,0,0,66,747,1,0,0,0,68,749,1,0,0,
		0,70,761,1,0,0,0,72,763,1,0,0,0,74,771,1,0,0,0,76,773,1,0,0,0,78,778,1,
		0,0,0,80,803,1,0,0,0,82,817,1,0,0,0,84,835,1,0,0,0,86,837,1,0,0,0,88,839,
		1,0,0,0,90,870,1,0,0,0,92,872,1,0,0,0,94,874,1,0,0,0,96,876,1,0,0,0,98,
		1019,1,0,0,0,100,1024,1,0,0,0,102,1063,1,0,0,0,104,1065,1,0,0,0,106,1068,
		1,0,0,0,108,1092,1,0,0,0,110,1110,1,0,0,0,112,1112,1,0,0,0,114,1116,1,
		0,0,0,116,1127,1,0,0,0,118,1131,1,0,0,0,120,1135,1,0,0,0,122,1146,1,0,
		0,0,124,1159,1,0,0,0,126,1165,1,0,0,0,128,1170,1,0,0,0,130,1209,1,0,0,
		0,132,1214,1,0,0,0,134,1219,1,0,0,0,136,1223,1,0,0,0,138,1226,1,0,0,0,
		140,1248,1,0,0,0,142,1252,1,0,0,0,144,1256,1,0,0,0,146,1260,1,0,0,0,148,
		1264,1,0,0,0,150,153,3,8,4,0,151,153,5,2,0,0,152,150,1,0,0,0,152,151,1,
		0,0,0,153,156,1,0,0,0,154,152,1,0,0,0,154,155,1,0,0,0,155,164,1,0,0,0,
		156,154,1,0,0,0,157,161,3,10,5,0,158,160,5,2,0,0,159,158,1,0,0,0,160,163,
		1,0,0,0,161,159,1,0,0,0,161,162,1,0,0,0,162,165,1,0,0,0,163,161,1,0,0,
		0,164,157,1,0,0,0,164,165,1,0,0,0,165,166,1,0,0,0,166,167,3,2,1,0,167,
		168,5,0,0,1,168,1,1,0,0,0,169,172,3,4,2,0,170,172,3,6,3,0,171,169,1,0,
		0,0,171,170,1,0,0,0,172,3,1,0,0,0,173,177,3,16,8,0,174,177,3,138,69,0,
		175,177,5,2,0,0,176,173,1,0,0,0,176,174,1,0,0,0,176,175,1,0,0,0,177,180,
		1,0,0,0,178,176,1,0,0,0,178,179,1,0,0,0,179,5,1,0,0,0,180,178,1,0,0,0,
		181,185,3,78,39,0,182,185,3,62,31,0,183,185,5,2,0,0,184,181,1,0,0,0,184,
		182,1,0,0,0,184,183,1,0,0,0,185,186,1,0,0,0,186,184,1,0,0,0,186,187,1,
		0,0,0,187,7,1,0,0,0,188,190,5,66,0,0,189,188,1,0,0,0,189,190,1,0,0,0,190,
		191,1,0,0,0,191,192,5,6,0,0,192,203,3,12,6,0,193,197,5,46,0,0,194,196,
		5,2,0,0,195,194,1,0,0,0,196,199,1,0,0,0,197,195,1,0,0,0,197,198,1,0,0,
		0,198,200,1,0,0,0,199,197,1,0,0,0,200,202,3,12,6,0,201,193,1,0,0,0,202,
		205,1,0,0,0,203,201,1,0,0,0,203,204,1,0,0,0,204,9,1,0,0,0,205,203,1,0,
		0,0,206,207,5,7,0,0,207,208,3,12,6,0,208,11,1,0,0,0,209,214,5,129,0,0,
		210,211,5,48,0,0,211,213,5,129,0,0,212,210,1,0,0,0,213,216,1,0,0,0,214,
		212,1,0,0,0,214,215,1,0,0,0,215,13,1,0,0,0,216,214,1,0,0,0,217,226,5,44,
		0,0,218,221,5,2,0,0,219,221,3,16,8,0,220,218,1,0,0,0,220,219,1,0,0,0,221,
		224,1,0,0,0,222,220,1,0,0,0,222,223,1,0,0,0,223,227,1,0,0,0,224,222,1,
		0,0,0,225,227,3,70,35,0,226,222,1,0,0,0,226,225,1,0,0,0,227,228,1,0,0,
		0,228,229,5,45,0,0,229,15,1,0,0,0,230,231,6,8,-1,0,231,232,5,113,0,0,232,
		441,3,16,8,61,233,234,5,66,0,0,234,441,3,16,8,58,235,236,5,84,0,0,236,
		441,3,16,8,39,237,240,3,102,51,0,238,239,5,52,0,0,239,241,3,40,20,0,240,
		238,1,0,0,0,240,241,1,0,0,0,241,242,1,0,0,0,242,243,5,112,0,0,243,244,
		3,16,8,37,244,441,1,0,0,0,245,246,7,0,0,0,246,247,3,124,62,0,247,248,3,
		16,8,36,248,441,1,0,0,0,249,250,5,75,0,0,250,441,3,40,20,0,251,252,5,77,
		0,0,252,441,3,16,8,34,253,255,7,1,0,0,254,253,1,0,0,0,254,255,1,0,0,0,
		255,256,1,0,0,0,256,259,5,129,0,0,257,258,5,52,0,0,258,260,3,40,20,0,259,
		257,1,0,0,0,259,260,1,0,0,0,260,261,1,0,0,0,261,262,3,122,61,0,262,263,
		3,16,8,32,263,441,1,0,0,0,264,265,5,49,0,0,265,441,3,16,8,27,266,441,5,
		49,0,0,267,268,5,73,0,0,268,441,3,24,12,0,269,271,3,62,31,0,270,269,1,
		0,0,0,271,272,1,0,0,0,272,270,1,0,0,0,272,273,1,0,0,0,273,274,1,0,0,0,
		274,275,3,16,8,24,275,441,1,0,0,0,276,280,3,46,23,0,277,279,5,2,0,0,278,
		277,1,0,0,0,279,282,1,0,0,0,280,278,1,0,0,0,280,281,1,0,0,0,281,286,1,
		0,0,0,282,280,1,0,0,0,283,285,3,50,25,0,284,283,1,0,0,0,285,288,1,0,0,
		0,286,284,1,0,0,0,286,287,1,0,0,0,287,292,1,0,0,0,288,286,1,0,0,0,289,
		291,5,2,0,0,290,289,1,0,0,0,291,294,1,0,0,0,292,290,1,0,0,0,292,293,1,
		0,0,0,293,296,1,0,0,0,294,292,1,0,0,0,295,297,3,52,26,0,296,295,1,0,0,
		0,296,297,1,0,0,0,297,441,1,0,0,0,298,302,3,54,27,0,299,301,5,2,0,0,300,
		299,1,0,0,0,301,304,1,0,0,0,302,300,1,0,0,0,302,303,1,0,0,0,303,308,1,
		0,0,0,304,302,1,0,0,0,305,307,3,56,28,0,306,305,1,0,0,0,307,310,1,0,0,
		0,308,306,1,0,0,0,308,309,1,0,0,0,309,314,1,0,0,0,310,308,1,0,0,0,311,
		313,5,2,0,0,312,311,1,0,0,0,313,316,1,0,0,0,314,312,1,0,0,0,314,315,1,
		0,0,0,315,318,1,0,0,0,316,314,1,0,0,0,317,319,3,52,26,0,318,317,1,0,0,
		0,318,319,1,0,0,0,319,441,1,0,0,0,320,322,5,69,0,0,321,323,5,38,0,0,322,
		321,1,0,0,0,322,323,1,0,0,0,323,325,1,0,0,0,324,326,7,1,0,0,325,324,1,
		0,0,0,325,326,1,0,0,0,326,327,1,0,0,0,327,333,5,129,0,0,328,330,5,46,0,
		0,329,331,7,1,0,0,330,329,1,0,0,0,330,331,1,0,0,0,331,332,1,0,0,0,332,
		334,5,129,0,0,333,328,1,0,0,0,333,334,1,0,0,0,334,336,1,0,0,0,335,337,
		5,39,0,0,336,335,1,0,0,0,336,337,1,0,0,0,337,338,1,0,0,0,338,339,5,53,
		0,0,339,340,3,16,8,0,340,341,1,0,0,0,341,342,5,111,0,0,342,343,3,16,8,
		19,343,441,1,0,0,0,344,345,5,69,0,0,345,346,3,16,8,0,346,347,5,111,0,0,
		347,348,3,16,8,18,348,441,1,0,0,0,349,350,5,71,0,0,350,351,3,16,8,0,351,
		352,5,111,0,0,352,353,3,16,8,17,353,441,1,0,0,0,354,441,3,126,63,0,355,
		359,3,112,56,0,356,358,3,114,57,0,357,356,1,0,0,0,358,361,1,0,0,0,359,
		357,1,0,0,0,359,360,1,0,0,0,360,363,1,0,0,0,361,359,1,0,0,0,362,364,3,
		118,59,0,363,362,1,0,0,0,363,364,1,0,0,0,364,366,1,0,0,0,365,367,3,116,
		58,0,366,365,1,0,0,0,366,367,1,0,0,0,367,441,1,0,0,0,368,369,5,26,0,0,
		369,441,3,16,8,14,370,441,5,26,0,0,371,372,5,30,0,0,372,373,3,16,8,0,373,
		374,5,111,0,0,374,375,3,16,8,12,375,441,1,0,0,0,376,385,5,70,0,0,377,382,
		3,16,8,0,378,379,5,46,0,0,379,381,3,16,8,0,380,378,1,0,0,0,381,384,1,0,
		0,0,382,380,1,0,0,0,382,383,1,0,0,0,383,386,1,0,0,0,384,382,1,0,0,0,385,
		377,1,0,0,0,385,386,1,0,0,0,386,387,1,0,0,0,387,441,5,43,0,0,388,397,5,
		42,0,0,389,394,3,16,8,0,390,391,5,46,0,0,391,393,3,16,8,0,392,390,1,0,
		0,0,393,396,1,0,0,0,394,392,1,0,0,0,394,395,1,0,0,0,395,398,1,0,0,0,396,
		394,1,0,0,0,397,389,1,0,0,0,397,398,1,0,0,0,398,399,1,0,0,0,399,441,5,
		43,0,0,400,418,5,42,0,0,401,402,5,42,0,0,402,403,3,16,8,0,403,404,5,46,
		0,0,404,405,3,16,8,0,405,415,5,43,0,0,406,407,5,46,0,0,407,408,5,42,0,
		0,408,409,3,16,8,0,409,410,5,46,0,0,410,411,3,16,8,0,411,412,5,43,0,0,
		412,414,1,0,0,0,413,406,1,0,0,0,414,417,1,0,0,0,415,413,1,0,0,0,415,416,
		1,0,0,0,416,419,1,0,0,0,417,415,1,0,0,0,418,401,1,0,0,0,418,419,1,0,0,
		0,419,420,1,0,0,0,420,441,5,43,0,0,421,441,3,18,9,0,422,441,3,14,7,0,423,
		425,3,12,6,0,424,426,3,120,60,0,425,424,1,0,0,0,425,426,1,0,0,0,426,428,
		1,0,0,0,427,429,3,60,30,0,428,427,1,0,0,0,428,429,1,0,0,0,429,441,1,0,
		0,0,430,431,5,38,0,0,431,434,3,16,8,0,432,433,5,46,0,0,433,435,3,16,8,
		0,434,432,1,0,0,0,435,436,1,0,0,0,436,434,1,0,0,0,436,437,1,0,0,0,437,
		438,1,0,0,0,438,439,5,39,0,0,439,441,1,0,0,0,440,230,1,0,0,0,440,233,1,
		0,0,0,440,235,1,0,0,0,440,237,1,0,0,0,440,245,1,0,0,0,440,249,1,0,0,0,
		440,251,1,0,0,0,440,254,1,0,0,0,440,264,1,0,0,0,440,266,1,0,0,0,440,267,
		1,0,0,0,440,270,1,0,0,0,440,276,1,0,0,0,440,298,1,0,0,0,440,320,1,0,0,
		0,440,344,1,0,0,0,440,349,1,0,0,0,440,354,1,0,0,0,440,355,1,0,0,0,440,
		368,1,0,0,0,440,370,1,0,0,0,440,371,1,0,0,0,440,376,1,0,0,0,440,388,1,
		0,0,0,440,400,1,0,0,0,440,421,1,0,0,0,440,422,1,0,0,0,440,423,1,0,0,0,
		440,430,1,0,0,0,441,561,1,0,0,0,442,443,10,62,0,0,443,444,5,137,0,0,444,
		560,3,16,8,63,445,446,10,60,0,0,446,447,5,42,0,0,447,448,3,16,8,0,448,
		449,5,43,0,0,449,450,5,111,0,0,450,451,3,16,8,61,451,560,1,0,0,0,452,453,
		10,59,0,0,453,454,5,102,0,0,454,560,3,16,8,59,455,456,10,57,0,0,456,457,
		5,100,0,0,457,560,3,16,8,58,458,459,10,56,0,0,459,460,5,104,0,0,460,560,
		3,16,8,57,461,462,10,55,0,0,462,463,5,107,0,0,463,560,3,16,8,56,464,465,
		10,54,0,0,465,466,5,108,0,0,466,560,3,16,8,55,467,468,10,53,0,0,468,469,
		5,96,0,0,469,560,3,16,8,54,470,471,10,52,0,0,471,472,5,98,0,0,472,560,
		3,16,8,53,473,474,10,51,0,0,474,475,5,116,0,0,475,560,3,16,8,52,476,477,
		10,50,0,0,477,478,5,118,0,0,478,560,3,16,8,51,479,480,10,49,0,0,480,481,
		7,2,0,0,481,560,3,16,8,50,482,483,10,48,0,0,483,484,7,3,0,0,484,560,3,
		16,8,49,485,486,10,46,0,0,486,487,5,84,0,0,487,560,3,16,8,47,488,489,10,
		44,0,0,489,490,5,78,0,0,490,560,3,16,8,45,491,492,10,42,0,0,492,493,5,
		73,0,0,493,560,3,16,8,43,494,495,10,38,0,0,495,496,5,56,0,0,496,560,3,
		16,8,39,497,498,10,33,0,0,498,499,5,50,0,0,499,560,3,16,8,34,500,501,10,
		31,0,0,501,502,5,120,0,0,502,560,3,16,8,32,503,504,10,30,0,0,504,505,5,
		121,0,0,505,560,3,16,8,31,506,507,10,29,0,0,507,508,5,49,0,0,508,560,3,
		16,8,30,509,510,10,2,0,0,510,511,3,122,61,0,511,512,3,16,8,3,512,560,1,
		0,0,0,513,514,10,47,0,0,514,515,5,58,0,0,515,560,3,40,20,0,516,519,10,
		45,0,0,517,518,5,87,0,0,518,520,3,16,8,0,519,517,1,0,0,0,520,521,1,0,0,
		0,521,519,1,0,0,0,521,522,1,0,0,0,522,560,1,0,0,0,523,526,10,43,0,0,524,
		525,5,81,0,0,525,527,3,16,8,0,526,524,1,0,0,0,527,528,1,0,0,0,528,526,
		1,0,0,0,528,529,1,0,0,0,529,560,1,0,0,0,530,531,10,41,0,0,531,532,5,54,
		0,0,532,560,3,40,20,0,533,534,10,40,0,0,534,535,5,55,0,0,535,560,3,40,
		20,0,536,537,10,28,0,0,537,560,5,49,0,0,538,539,10,22,0,0,539,560,3,48,
		24,0,540,541,10,20,0,0,541,560,3,58,29,0,542,543,10,7,0,0,543,560,5,2,
		0,0,544,545,10,6,0,0,545,560,5,59,0,0,546,549,10,3,0,0,547,548,5,48,0,
		0,548,550,5,129,0,0,549,547,1,0,0,0,550,551,1,0,0,0,551,549,1,0,0,0,551,
		552,1,0,0,0,552,554,1,0,0,0,553,555,3,120,60,0,554,553,1,0,0,0,554,555,
		1,0,0,0,555,557,1,0,0,0,556,558,3,60,30,0,557,556,1,0,0,0,557,558,1,0,
		0,0,558,560,1,0,0,0,559,442,1,0,0,0,559,445,1,0,0,0,559,452,1,0,0,0,559,
		455,1,0,0,0,559,458,1,0,0,0,559,461,1,0,0,0,559,464,1,0,0,0,559,467,1,
		0,0,0,559,470,1,0,0,0,559,473,1,0,0,0,559,476,1,0,0,0,559,479,1,0,0,0,
		559,482,1,0,0,0,559,485,1,0,0,0,559,488,1,0,0,0,559,491,1,0,0,0,559,494,
		1,0,0,0,559,497,1,0,0,0,559,500,1,0,0,0,559,503,1,0,0,0,559,506,1,0,0,
		0,559,509,1,0,0,0,559,513,1,0,0,0,559,516,1,0,0,0,559,523,1,0,0,0,559,
		530,1,0,0,0,559,533,1,0,0,0,559,536,1,0,0,0,559,538,1,0,0,0,559,540,1,
		0,0,0,559,542,1,0,0,0,559,544,1,0,0,0,559,546,1,0,0,0,560,563,1,0,0,0,
		561,559,1,0,0,0,561,562,1,0,0,0,562,17,1,0,0,0,563,561,1,0,0,0,564,574,
		3,22,11,0,565,574,3,24,12,0,566,574,3,26,13,0,567,574,3,28,14,0,568,574,
		3,30,15,0,569,574,3,32,16,0,570,574,3,34,17,0,571,574,3,36,18,0,572,574,
		3,20,10,0,573,564,1,0,0,0,573,565,1,0,0,0,573,566,1,0,0,0,573,567,1,0,
		0,0,573,568,1,0,0,0,573,569,1,0,0,0,573,570,1,0,0,0,573,571,1,0,0,0,573,
		572,1,0,0,0,574,19,1,0,0,0,575,576,5,33,0,0,576,21,1,0,0,0,577,578,5,38,
		0,0,578,579,3,16,8,0,579,580,5,39,0,0,580,23,1,0,0,0,581,582,7,4,0,0,582,
		25,1,0,0,0,583,584,5,133,0,0,584,27,1,0,0,0,585,586,7,5,0,0,586,29,1,0,
		0,0,587,588,7,6,0,0,588,31,1,0,0,0,589,590,5,134,0,0,590,33,1,0,0,0,591,
		592,5,38,0,0,592,593,5,39,0,0,593,35,1,0,0,0,594,595,5,60,0,0,595,37,1,
		0,0,0,596,598,3,62,31,0,597,596,1,0,0,0,598,601,1,0,0,0,599,597,1,0,0,
		0,599,600,1,0,0,0,600,602,1,0,0,0,601,599,1,0,0,0,602,611,5,129,0,0,603,
		605,3,62,31,0,604,603,1,0,0,0,605,608,1,0,0,0,606,604,1,0,0,0,606,607,
		1,0,0,0,607,609,1,0,0,0,608,606,1,0,0,0,609,611,3,12,6,0,610,599,1,0,0,
		0,610,606,1,0,0,0,611,39,1,0,0,0,612,613,6,20,-1,0,613,639,3,38,19,0,614,
		615,5,38,0,0,615,618,3,42,21,0,616,617,5,78,0,0,617,619,3,42,21,0,618,
		616,1,0,0,0,619,620,1,0,0,0,620,618,1,0,0,0,620,621,1,0,0,0,621,622,1,
		0,0,0,622,623,5,39,0,0,623,639,1,0,0,0,624,625,5,38,0,0,625,628,3,42,21,
		0,626,627,5,46,0,0,627,629,3,42,21,0,628,626,1,0,0,0,629,630,1,0,0,0,630,
		628,1,0,0,0,630,631,1,0,0,0,631,632,1,0,0,0,632,633,5,39,0,0,633,639,1,
		0,0,0,634,639,3,64,32,0,635,636,5,34,0,0,636,637,5,100,0,0,637,639,3,120,
		60,0,638,612,1,0,0,0,638,614,1,0,0,0,638,624,1,0,0,0,638,634,1,0,0,0,638,
		635,1,0,0,0,639,648,1,0,0,0,640,641,10,4,0,0,641,647,3,120,60,0,642,643,
		10,3,0,0,643,647,7,7,0,0,644,645,10,2,0,0,645,647,3,44,22,0,646,640,1,
		0,0,0,646,642,1,0,0,0,646,644,1,0,0,0,647,650,1,0,0,0,648,646,1,0,0,0,
		648,649,1,0,0,0,649,41,1,0,0,0,650,648,1,0,0,0,651,652,5,129,0,0,652,654,
		5,52,0,0,653,651,1,0,0,0,653,654,1,0,0,0,654,655,1,0,0,0,655,656,3,40,
		20,0,656,43,1,0,0,0,657,661,5,70,0,0,658,660,7,8,0,0,659,658,1,0,0,0,660,
		663,1,0,0,0,661,659,1,0,0,0,661,662,1,0,0,0,662,664,1,0,0,0,663,661,1,
		0,0,0,664,665,5,43,0,0,665,45,1,0,0,0,666,667,5,63,0,0,667,668,3,16,8,
		0,668,671,5,111,0,0,669,672,3,14,7,0,670,672,3,16,8,0,671,669,1,0,0,0,
		671,670,1,0,0,0,672,47,1,0,0,0,673,674,5,63,0,0,674,675,3,16,8,0,675,49,
		1,0,0,0,676,677,5,52,0,0,677,678,3,16,8,0,678,681,5,111,0,0,679,682,3,
		14,7,0,680,682,3,16,8,0,681,679,1,0,0,0,681,680,1,0,0,0,682,51,1,0,0,0,
		683,684,5,52,0,0,684,687,5,111,0,0,685,688,3,14,7,0,686,688,3,16,8,0,687,
		685,1,0,0,0,687,686,1,0,0,0,688,53,1,0,0,0,689,690,5,67,0,0,690,691,3,
		16,8,0,691,694,5,111,0,0,692,695,3,14,7,0,693,695,3,16,8,0,694,692,1,0,
		0,0,694,693,1,0,0,0,695,55,1,0,0,0,696,697,5,68,0,0,697,698,3,16,8,0,698,
		701,5,111,0,0,699,702,3,14,7,0,700,702,3,16,8,0,701,699,1,0,0,0,701,700,
		1,0,0,0,702,57,1,0,0,0,703,704,5,67,0,0,704,705,3,16,8,0,705,59,1,0,0,
		0,706,707,5,129,0,0,707,709,5,52,0,0,708,706,1,0,0,0,708,709,1,0,0,0,709,
		710,1,0,0,0,710,711,3,16,8,0,711,720,1,0,0,0,712,715,5,46,0,0,713,714,
		5,129,0,0,714,716,5,52,0,0,715,713,1,0,0,0,715,716,1,0,0,0,716,717,1,0,
		0,0,717,719,3,16,8,0,718,712,1,0,0,0,719,722,1,0,0,0,720,718,1,0,0,0,720,
		721,1,0,0,0,721,724,1,0,0,0,722,720,1,0,0,0,723,725,5,47,0,0,724,723,1,
		0,0,0,724,725,1,0,0,0,725,61,1,0,0,0,726,729,5,90,0,0,727,728,7,9,0,0,
		728,730,5,52,0,0,729,727,1,0,0,0,729,730,1,0,0,0,730,731,1,0,0,0,731,733,
		3,40,20,0,732,734,3,60,30,0,733,732,1,0,0,0,733,734,1,0,0,0,734,735,1,
		0,0,0,735,739,5,91,0,0,736,738,5,2,0,0,737,736,1,0,0,0,738,741,1,0,0,0,
		739,737,1,0,0,0,739,740,1,0,0,0,740,63,1,0,0,0,741,739,1,0,0,0,742,743,
		3,38,19,0,743,744,5,42,0,0,744,745,3,80,40,0,745,746,5,43,0,0,746,65,1,
		0,0,0,747,748,7,10,0,0,748,67,1,0,0,0,749,751,3,66,33,0,750,752,7,1,0,
		0,751,750,1,0,0,0,751,752,1,0,0,0,752,753,1,0,0,0,753,756,5,129,0,0,754,
		755,5,52,0,0,755,757,3,40,20,0,756,754,1,0,0,0,756,757,1,0,0,0,757,758,
		1,0,0,0,758,759,5,111,0,0,759,760,3,16,8,0,760,69,1,0,0,0,761,762,5,48,
		0,0,762,71,1,0,0,0,763,764,7,11,0,0,764,73,1,0,0,0,765,772,3,72,36,0,766,
		772,5,12,0,0,767,769,5,15,0,0,768,770,5,13,0,0,769,768,1,0,0,0,769,770,
		1,0,0,0,770,772,1,0,0,0,771,765,1,0,0,0,771,766,1,0,0,0,771,767,1,0,0,
		0,772,75,1,0,0,0,773,774,5,16,0,0,774,77,1,0,0,0,775,777,3,62,31,0,776,
		775,1,0,0,0,777,780,1,0,0,0,778,776,1,0,0,0,778,779,1,0,0,0,779,783,1,
		0,0,0,780,778,1,0,0,0,781,784,3,72,36,0,782,784,3,74,37,0,783,781,1,0,
		0,0,783,782,1,0,0,0,783,784,1,0,0,0,784,786,1,0,0,0,785,787,3,76,38,0,
		786,785,1,0,0,0,786,787,1,0,0,0,787,788,1,0,0,0,788,789,3,90,45,0,789,
		791,5,129,0,0,790,792,3,80,40,0,791,790,1,0,0,0,791,792,1,0,0,0,792,794,
		1,0,0,0,793,795,3,102,51,0,794,793,1,0,0,0,794,795,1,0,0,0,795,797,1,0,
		0,0,796,798,3,88,44,0,797,796,1,0,0,0,797,798,1,0,0,0,798,801,1,0,0,0,
		799,800,5,111,0,0,800,802,3,110,55,0,801,799,1,0,0,0,801,802,1,0,0,0,802,
		79,1,0,0,0,803,804,5,42,0,0,804,809,3,82,41,0,805,806,5,46,0,0,806,808,
		3,82,41,0,807,805,1,0,0,0,808,811,1,0,0,0,809,807,1,0,0,0,809,810,1,0,
		0,0,810,812,1,0,0,0,811,809,1,0,0,0,812,813,5,43,0,0,813,81,1,0,0,0,814,
		816,3,84,42,0,815,814,1,0,0,0,816,819,1,0,0,0,817,815,1,0,0,0,817,818,
		1,0,0,0,818,821,1,0,0,0,819,817,1,0,0,0,820,822,3,86,43,0,821,820,1,0,
		0,0,821,822,1,0,0,0,822,823,1,0,0,0,823,833,5,129,0,0,824,825,5,52,0,0,
		825,830,3,40,20,0,826,827,5,46,0,0,827,829,3,40,20,0,828,826,1,0,0,0,829,
		832,1,0,0,0,830,828,1,0,0,0,830,831,1,0,0,0,831,834,1,0,0,0,832,830,1,
		0,0,0,833,824,1,0,0,0,833,834,1,0,0,0,834,83,1,0,0,0,835,836,7,12,0,0,
		836,85,1,0,0,0,837,838,7,13,0,0,838,87,1,0,0,0,839,840,5,52,0,0,840,845,
		3,40,20,0,841,842,5,46,0,0,842,844,3,40,20,0,843,841,1,0,0,0,844,847,1,
		0,0,0,845,843,1,0,0,0,845,846,1,0,0,0,846,89,1,0,0,0,847,845,1,0,0,0,848,
		850,5,21,0,0,849,848,1,0,0,0,849,850,1,0,0,0,850,851,1,0,0,0,851,871,5,
		8,0,0,852,854,5,23,0,0,853,855,5,66,0,0,854,853,1,0,0,0,854,855,1,0,0,
		0,855,857,1,0,0,0,856,858,5,84,0,0,857,856,1,0,0,0,857,858,1,0,0,0,858,
		859,1,0,0,0,859,871,5,8,0,0,860,862,5,23,0,0,861,863,5,84,0,0,862,861,
		1,0,0,0,862,863,1,0,0,0,863,865,1,0,0,0,864,866,5,66,0,0,865,864,1,0,0,
		0,865,866,1,0,0,0,866,867,1,0,0,0,867,871,5,8,0,0,868,871,5,10,0,0,869,
		871,5,9,0,0,870,849,1,0,0,0,870,852,1,0,0,0,870,860,1,0,0,0,870,868,1,
		0,0,0,870,869,1,0,0,0,871,91,1,0,0,0,872,873,7,14,0,0,873,93,1,0,0,0,874,
		875,5,17,0,0,875,95,1,0,0,0,876,877,7,15,0,0,877,97,1,0,0,0,878,880,3,
		62,31,0,879,878,1,0,0,0,880,883,1,0,0,0,881,879,1,0,0,0,881,882,1,0,0,
		0,882,885,1,0,0,0,883,881,1,0,0,0,884,886,3,92,46,0,885,884,1,0,0,0,885,
		886,1,0,0,0,886,888,1,0,0,0,887,889,3,94,47,0,888,887,1,0,0,0,888,889,
		1,0,0,0,889,893,1,0,0,0,890,892,3,96,48,0,891,890,1,0,0,0,892,895,1,0,
		0,0,893,891,1,0,0,0,893,894,1,0,0,0,894,897,1,0,0,0,895,893,1,0,0,0,896,
		898,7,1,0,0,897,896,1,0,0,0,897,898,1,0,0,0,898,899,1,0,0,0,899,901,5,
		129,0,0,900,902,3,80,40,0,901,900,1,0,0,0,901,902,1,0,0,0,902,904,1,0,
		0,0,903,905,3,102,51,0,904,903,1,0,0,0,904,905,1,0,0,0,905,908,1,0,0,0,
		906,907,5,52,0,0,907,909,3,40,20,0,908,906,1,0,0,0,908,909,1,0,0,0,909,
		918,1,0,0,0,910,914,5,111,0,0,911,913,5,2,0,0,912,911,1,0,0,0,913,916,
		1,0,0,0,914,912,1,0,0,0,914,915,1,0,0,0,915,917,1,0,0,0,916,914,1,0,0,
		0,917,919,3,16,8,0,918,910,1,0,0,0,918,919,1,0,0,0,919,1020,1,0,0,0,920,
		922,3,62,31,0,921,920,1,0,0,0,922,925,1,0,0,0,923,921,1,0,0,0,923,924,
		1,0,0,0,924,927,1,0,0,0,925,923,1,0,0,0,926,928,3,92,46,0,927,926,1,0,
		0,0,927,928,1,0,0,0,928,930,1,0,0,0,929,931,3,94,47,0,930,929,1,0,0,0,
		930,931,1,0,0,0,931,935,1,0,0,0,932,934,3,96,48,0,933,932,1,0,0,0,934,
		937,1,0,0,0,935,933,1,0,0,0,935,936,1,0,0,0,936,939,1,0,0,0,937,935,1,
		0,0,0,938,940,7,1,0,0,939,938,1,0,0,0,939,940,1,0,0,0,940,941,1,0,0,0,
		941,943,5,129,0,0,942,944,3,80,40,0,943,942,1,0,0,0,943,944,1,0,0,0,944,
		945,1,0,0,0,945,946,5,52,0,0,946,1020,3,40,20,0,947,949,3,62,31,0,948,
		947,1,0,0,0,949,952,1,0,0,0,950,948,1,0,0,0,950,951,1,0,0,0,951,954,1,
		0,0,0,952,950,1,0,0,0,953,955,3,92,46,0,954,953,1,0,0,0,954,955,1,0,0,
		0,955,957,1,0,0,0,956,958,3,94,47,0,957,956,1,0,0,0,957,958,1,0,0,0,958,
		962,1,0,0,0,959,961,3,96,48,0,960,959,1,0,0,0,961,964,1,0,0,0,962,960,
		1,0,0,0,962,963,1,0,0,0,963,969,1,0,0,0,964,962,1,0,0,0,965,970,5,137,
		0,0,966,967,5,38,0,0,967,968,5,137,0,0,968,970,5,39,0,0,969,965,1,0,0,
		0,969,966,1,0,0,0,970,971,1,0,0,0,971,974,3,102,51,0,972,973,5,52,0,0,
		973,975,3,40,20,0,974,972,1,0,0,0,974,975,1,0,0,0,975,976,1,0,0,0,976,
		980,5,111,0,0,977,979,5,2,0,0,978,977,1,0,0,0,979,982,1,0,0,0,980,978,
		1,0,0,0,980,981,1,0,0,0,981,983,1,0,0,0,982,980,1,0,0,0,983,984,3,16,8,
		0,984,1020,1,0,0,0,985,987,3,62,31,0,986,985,1,0,0,0,987,990,1,0,0,0,988,
		986,1,0,0,0,988,989,1,0,0,0,989,992,1,0,0,0,990,988,1,0,0,0,991,993,3,
		92,46,0,992,991,1,0,0,0,992,993,1,0,0,0,993,995,1,0,0,0,994,996,3,94,47,
		0,995,994,1,0,0,0,995,996,1,0,0,0,996,1000,1,0,0,0,997,999,3,96,48,0,998,
		997,1,0,0,0,999,1002,1,0,0,0,1000,998,1,0,0,0,1000,1001,1,0,0,0,1001,1003,
		1,0,0,0,1002,1000,1,0,0,0,1003,1005,5,129,0,0,1004,1006,3,80,40,0,1005,
		1004,1,0,0,0,1005,1006,1,0,0,0,1006,1009,1,0,0,0,1007,1008,5,52,0,0,1008,
		1010,3,40,20,0,1009,1007,1,0,0,0,1009,1010,1,0,0,0,1010,1011,1,0,0,0,1011,
		1015,5,111,0,0,1012,1014,5,2,0,0,1013,1012,1,0,0,0,1014,1017,1,0,0,0,1015,
		1013,1,0,0,0,1015,1016,1,0,0,0,1016,1018,1,0,0,0,1017,1015,1,0,0,0,1018,
		1020,3,148,74,0,1019,881,1,0,0,0,1019,923,1,0,0,0,1019,950,1,0,0,0,1019,
		988,1,0,0,0,1020,99,1,0,0,0,1021,1025,3,92,46,0,1022,1025,3,94,47,0,1023,
		1025,3,96,48,0,1024,1021,1,0,0,0,1024,1022,1,0,0,0,1024,1023,1,0,0,0,1025,
		1029,1,0,0,0,1026,1028,3,96,48,0,1027,1026,1,0,0,0,1028,1031,1,0,0,0,1029,
		1027,1,0,0,0,1029,1030,1,0,0,0,1030,1032,1,0,0,0,1031,1029,1,0,0,0,1032,
		1033,5,111,0,0,1033,1038,5,44,0,0,1034,1037,5,2,0,0,1035,1037,3,98,49,
		0,1036,1034,1,0,0,0,1036,1035,1,0,0,0,1037,1040,1,0,0,0,1038,1036,1,0,
		0,0,1038,1039,1,0,0,0,1039,1041,1,0,0,0,1040,1038,1,0,0,0,1041,1042,5,
		45,0,0,1042,101,1,0,0,0,1043,1052,5,38,0,0,1044,1049,3,106,53,0,1045,1046,
		5,46,0,0,1046,1048,3,106,53,0,1047,1045,1,0,0,0,1048,1051,1,0,0,0,1049,
		1047,1,0,0,0,1049,1050,1,0,0,0,1050,1053,1,0,0,0,1051,1049,1,0,0,0,1052,
		1044,1,0,0,0,1052,1053,1,0,0,0,1053,1054,1,0,0,0,1054,1064,5,39,0,0,1055,
		1060,3,106,53,0,1056,1057,5,46,0,0,1057,1059,3,106,53,0,1058,1056,1,0,
		0,0,1059,1062,1,0,0,0,1060,1058,1,0,0,0,1060,1061,1,0,0,0,1061,1064,1,
		0,0,0,1062,1060,1,0,0,0,1063,1043,1,0,0,0,1063,1055,1,0,0,0,1064,103,1,
		0,0,0,1065,1066,7,16,0,0,1066,105,1,0,0,0,1067,1069,3,62,31,0,1068,1067,
		1,0,0,0,1068,1069,1,0,0,0,1069,1071,1,0,0,0,1070,1072,7,1,0,0,1071,1070,
		1,0,0,0,1071,1072,1,0,0,0,1072,1074,1,0,0,0,1073,1075,3,104,52,0,1074,
		1073,1,0,0,0,1074,1075,1,0,0,0,1075,1076,1,0,0,0,1076,1078,5,129,0,0,1077,
		1079,5,49,0,0,1078,1077,1,0,0,0,1078,1079,1,0,0,0,1079,1082,1,0,0,0,1080,
		1081,5,52,0,0,1081,1083,3,40,20,0,1082,1080,1,0,0,0,1082,1083,1,0,0,0,
		1083,1085,1,0,0,0,1084,1086,3,108,54,0,1085,1084,1,0,0,0,1085,1086,1,0,
		0,0,1086,1089,1,0,0,0,1087,1088,5,111,0,0,1088,1090,3,16,8,0,1089,1087,
		1,0,0,0,1089,1090,1,0,0,0,1090,107,1,0,0,0,1091,1093,5,63,0,0,1092,1091,
		1,0,0,0,1092,1093,1,0,0,0,1093,1094,1,0,0,0,1094,1095,5,44,0,0,1095,1096,
		3,16,8,0,1096,1097,5,45,0,0,1097,109,1,0,0,0,1098,1105,5,44,0,0,1099,1104,
		3,98,49,0,1100,1104,3,78,39,0,1101,1104,5,2,0,0,1102,1104,3,100,50,0,1103,
		1099,1,0,0,0,1103,1100,1,0,0,0,1103,1101,1,0,0,0,1103,1102,1,0,0,0,1104,
		1107,1,0,0,0,1105,1103,1,0,0,0,1105,1106,1,0,0,0,1106,1108,1,0,0,0,1107,
		1105,1,0,0,0,1108,1111,5,45,0,0,1109,1111,3,40,20,0,1110,1098,1,0,0,0,
		1110,1109,1,0,0,0,1111,111,1,0,0,0,1112,1113,5,25,0,0,1113,1114,5,111,
		0,0,1114,1115,3,16,8,0,1115,113,1,0,0,0,1116,1122,5,27,0,0,1117,1118,5,
		129,0,0,1118,1120,5,52,0,0,1119,1117,1,0,0,0,1119,1120,1,0,0,0,1120,1121,
		1,0,0,0,1121,1123,3,40,20,0,1122,1119,1,0,0,0,1122,1123,1,0,0,0,1123,1124,
		1,0,0,0,1124,1125,5,111,0,0,1125,1126,3,16,8,0,1126,115,1,0,0,0,1127,1128,
		5,28,0,0,1128,1129,5,111,0,0,1129,1130,3,16,8,0,1130,117,1,0,0,0,1131,
		1132,5,29,0,0,1132,1133,5,111,0,0,1133,1134,3,16,8,0,1134,119,1,0,0,0,
		1135,1136,5,42,0,0,1136,1141,3,40,20,0,1137,1138,5,46,0,0,1138,1140,3,
		40,20,0,1139,1137,1,0,0,0,1140,1143,1,0,0,0,1141,1139,1,0,0,0,1141,1142,
		1,0,0,0,1142,1144,1,0,0,0,1143,1141,1,0,0,0,1144,1145,5,43,0,0,1145,121,
		1,0,0,0,1146,1147,7,17,0,0,1147,123,1,0,0,0,1148,1149,5,38,0,0,1149,1154,
		3,40,20,0,1150,1151,5,46,0,0,1151,1153,3,40,20,0,1152,1150,1,0,0,0,1153,
		1156,1,0,0,0,1154,1152,1,0,0,0,1154,1155,1,0,0,0,1155,1157,1,0,0,0,1156,
		1154,1,0,0,0,1157,1158,5,39,0,0,1158,1160,1,0,0,0,1159,1148,1,0,0,0,1159,
		1160,1,0,0,0,1160,1163,1,0,0,0,1161,1162,5,52,0,0,1162,1164,3,40,20,0,
		1163,1161,1,0,0,0,1163,1164,1,0,0,0,1164,125,1,0,0,0,1165,1166,5,72,0,
		0,1166,1167,3,16,8,0,1167,1168,5,111,0,0,1168,1169,3,128,64,0,1169,127,
		1,0,0,0,1170,1174,5,44,0,0,1171,1173,5,2,0,0,1172,1171,1,0,0,0,1173,1176,
		1,0,0,0,1174,1172,1,0,0,0,1174,1175,1,0,0,0,1175,1184,1,0,0,0,1176,1174,
		1,0,0,0,1177,1181,3,130,65,0,1178,1180,5,2,0,0,1179,1178,1,0,0,0,1180,
		1183,1,0,0,0,1181,1179,1,0,0,0,1181,1182,1,0,0,0,1182,1185,1,0,0,0,1183,
		1181,1,0,0,0,1184,1177,1,0,0,0,1184,1185,1,0,0,0,1185,1195,1,0,0,0,1186,
		1190,3,132,66,0,1187,1189,5,2,0,0,1188,1187,1,0,0,0,1189,1192,1,0,0,0,
		1190,1188,1,0,0,0,1190,1191,1,0,0,0,1191,1194,1,0,0,0,1192,1190,1,0,0,
		0,1193,1186,1,0,0,0,1194,1197,1,0,0,0,1195,1193,1,0,0,0,1195,1196,1,0,
		0,0,1196,1199,1,0,0,0,1197,1195,1,0,0,0,1198,1200,3,134,67,0,1199,1198,
		1,0,0,0,1199,1200,1,0,0,0,1200,1204,1,0,0,0,1201,1203,5,2,0,0,1202,1201,
		1,0,0,0,1203,1206,1,0,0,0,1204,1202,1,0,0,0,1204,1205,1,0,0,0,1205,1207,
		1,0,0,0,1206,1204,1,0,0,0,1207,1208,5,45,0,0,1208,129,1,0,0,0,1209,1210,
		5,63,0,0,1210,1211,3,136,68,0,1211,1212,5,111,0,0,1212,1213,3,16,8,0,1213,
		131,1,0,0,0,1214,1215,5,52,0,0,1215,1216,3,136,68,0,1216,1217,5,111,0,
		0,1217,1218,3,16,8,0,1218,133,1,0,0,0,1219,1220,5,52,0,0,1220,1221,5,111,
		0,0,1221,1222,3,16,8,0,1222,135,1,0,0,0,1223,1224,3,16,8,0,1224,137,1,
		0,0,0,1225,1227,7,1,0,0,1226,1225,1,0,0,0,1226,1227,1,0,0,0,1227,1228,
		1,0,0,0,1228,1230,5,129,0,0,1229,1231,3,80,40,0,1230,1229,1,0,0,0,1230,
		1231,1,0,0,0,1231,1233,1,0,0,0,1232,1234,3,102,51,0,1233,1232,1,0,0,0,
		1233,1234,1,0,0,0,1234,1237,1,0,0,0,1235,1236,5,52,0,0,1236,1238,3,40,
		20,0,1237,1235,1,0,0,0,1237,1238,1,0,0,0,1238,1239,1,0,0,0,1239,1243,5,
		111,0,0,1240,1242,5,2,0,0,1241,1240,1,0,0,0,1242,1245,1,0,0,0,1243,1241,
		1,0,0,0,1243,1244,1,0,0,0,1244,1246,1,0,0,0,1245,1243,1,0,0,0,1246,1247,
		3,16,8,0,1247,139,1,0,0,0,1248,1249,5,123,0,0,1249,1250,5,111,0,0,1250,
		1251,3,16,8,0,1251,141,1,0,0,0,1252,1253,5,124,0,0,1253,1254,5,111,0,0,
		1254,1255,3,16,8,0,1255,143,1,0,0,0,1256,1257,5,125,0,0,1257,1258,5,111,
		0,0,1258,1259,3,16,8,0,1259,145,1,0,0,0,1260,1261,5,126,0,0,1261,1262,
		5,111,0,0,1262,1263,3,16,8,0,1263,147,1,0,0,0,1264,1268,5,44,0,0,1265,
		1267,5,2,0,0,1266,1265,1,0,0,0,1267,1270,1,0,0,0,1268,1266,1,0,0,0,1268,
		1269,1,0,0,0,1269,1285,1,0,0,0,1270,1268,1,0,0,0,1271,1275,3,140,70,0,
		1272,1275,3,142,71,0,1273,1275,5,2,0,0,1274,1271,1,0,0,0,1274,1272,1,0,
		0,0,1274,1273,1,0,0,0,1275,1276,1,0,0,0,1276,1274,1,0,0,0,1276,1277,1,
		0,0,0,1277,1286,1,0,0,0,1278,1282,3,144,72,0,1279,1282,3,146,73,0,1280,
		1282,5,2,0,0,1281,1278,1,0,0,0,1281,1279,1,0,0,0,1281,1280,1,0,0,0,1282,
		1283,1,0,0,0,1283,1281,1,0,0,0,1283,1284,1,0,0,0,1284,1286,1,0,0,0,1285,
		1274,1,0,0,0,1285,1281,1,0,0,0,1286,1290,1,0,0,0,1287,1289,5,2,0,0,1288,
		1287,1,0,0,0,1289,1292,1,0,0,0,1290,1288,1,0,0,0,1290,1291,1,0,0,0,1291,
		1293,1,0,0,0,1292,1290,1,0,0,0,1293,1294,5,45,0,0,1294,149,1,0,0,0,174,
		152,154,161,164,171,176,178,184,186,189,197,203,214,220,222,226,240,254,
		259,272,280,286,292,296,302,308,314,318,322,325,330,333,336,359,363,366,
		382,385,394,397,415,418,425,428,436,440,521,528,551,554,557,559,561,573,
		599,606,610,620,630,638,646,648,653,661,671,681,687,694,701,708,715,720,
		724,729,733,739,751,756,769,771,778,783,786,791,794,797,801,809,817,821,
		830,833,845,849,854,857,862,865,870,881,885,888,893,897,901,904,908,914,
		918,923,927,930,935,939,943,950,954,957,962,969,974,980,988,992,995,1000,
		1005,1009,1015,1019,1024,1029,1036,1038,1049,1052,1060,1063,1068,1071,
		1074,1078,1082,1085,1089,1092,1103,1105,1110,1119,1122,1141,1154,1159,
		1163,1174,1181,1184,1190,1195,1199,1204,1226,1230,1233,1237,1243,1268,
		1274,1276,1281,1283,1285,1290
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Dassie.Parser
