//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Jonas/source/repos/dassie/src/Dassie/Parser/DassieParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Dassie.Parser {

    #pragma warning disable CS0108

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class DassieParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Ws=1, NewLine=2, Single_Line_Comment=3, Delimited_Comment=4, Documentation_Comment=5, 
		Import=6, Export=7, Type=8, Module=9, Template=10, Global=11, Local=12, 
		Internal=13, Static=14, Protected=15, Open=16, Closed=17, Abstract=18, 
		Extern=19, Inline=20, Ref=21, Var=22, Val=23, Base=24, Try=25, Raise=26, 
		Catch=27, Finally=28, Fault=29, Lock=30, True=31, False=32, This=33, Func=34, 
		Func_Ampersand=35, Default=36, Literal=37, Open_Paren=38, Close_Paren=39, 
		Open_Paren_Bar=40, Bar_Close_Paren=41, Open_Bracket=42, Close_Bracket=43, 
		Open_Brace=44, Close_Brace=45, Comma=46, Double_Comma=47, Dot=48, Double_Dot=49, 
		Double_Dot_Question_Mark=50, Dot_Equals=51, Colon=52, Colon_Greater_Than=53, 
		Less_Than_Colon=54, Less_Than_Question_Mark_Colon=55, Double_Colon=56, 
		Triple_Colon=57, Colon_Question_Mark=58, Semicolon=59, Underscore=60, 
		Single_Quote=61, Double_Quote=62, Question_Mark=63, Double_Question_Mark=64, 
		Double_Question_Mark_Equals=65, Exclamation_Mark=66, Exclamation_Question=67, 
		Exclamation_Colon=68, At_Sign=69, At_Open_Bracket=70, Exclamation_At=71, 
		Dollar_Sign=72, Caret=73, Caret_Equals=74, Caret_Backslash=75, Percent_Caret=76, 
		Dollar_Backslash=77, Bar=78, Bar_GreaterThan=79, LessThan_Bar=80, Double_Bar=81, 
		Bar_Equals=82, Double_Bar_Equals=83, Ampersand=84, Ampersand_Greater=85, 
		Less_Ampersand=86, Double_Ampersand=87, Double_Ampersand_Equals=88, Ampersand_Equals=89, 
		Less_Than=90, Greater_Than=91, Less_Equals=92, Greater_Equals=93, Double_Equals=94, 
		Exclamation_Equals=95, Plus=96, Plus_Equals=97, Minus=98, Minus_Equals=99, 
		Asterisk=100, Asterisk_Equals=101, Double_Asterisk=102, Double_Asterisk_Equals=103, 
		Slash=104, Backslash=105, Slash_Equals=106, Percent=107, Double_Percent=108, 
		Percent_Equals=109, Double_Percent_Equals=110, Equals=111, Equals_Greater=112, 
		Tilde=113, Double_Tilde=114, Tilde_Equals=115, Double_Less_Than=116, Double_Less_Than_Equals=117, 
		Double_Greater_Than=118, Double_Greater_Than_Equals=119, Arrow_Right=120, 
		Arrow_Left=121, Backtick=122, Add_Handler=123, Remove_Handler=124, Get=125, 
		Set=126, Identifier=127, Integer_Literal=128, Hex_Integer_Literal=129, 
		Binary_Integer_Literal=130, Real_Literal=131, Character_Literal=132, String_Literal=133, 
		Verbatim_String_Literal=134, Custom_Operator=135;
	public const int
		RULE_compilation_unit = 0, RULE_file_body = 1, RULE_full_program = 2, 
		RULE_import_directive = 3, RULE_export_directive = 4, RULE_full_identifier = 5, 
		RULE_code_block = 6, RULE_expression = 7, RULE_atom = 8, RULE_this_atom = 9, 
		RULE_expression_atom = 10, RULE_integer_atom = 11, RULE_real_atom = 12, 
		RULE_boolean_atom = 13, RULE_string_atom = 14, RULE_character_atom = 15, 
		RULE_empty_atom = 16, RULE_wildcard_atom = 17, RULE_identifier_atom = 18, 
		RULE_type_name = 19, RULE_union_or_tuple_type_member = 20, RULE_if_branch = 21, 
		RULE_postfix_if_branch = 22, RULE_elif_branch = 23, RULE_else_branch = 24, 
		RULE_unless_branch = 25, RULE_else_unless_branch = 26, RULE_postfix_unless_branch = 27, 
		RULE_arglist = 28, RULE_attribute = 29, RULE_generic_identifier = 30, 
		RULE_field_access_modifier = 31, RULE_field_declaration = 32, RULE_placeholder = 33, 
		RULE_type_access_modifier = 34, RULE_nested_type_access_modifier = 35, 
		RULE_type_special_modifier = 36, RULE_type = 37, RULE_generic_parameter_list = 38, 
		RULE_generic_parameter = 39, RULE_generic_parameter_attribute = 40, RULE_generic_parameter_variance = 41, 
		RULE_inheritance_list = 42, RULE_type_kind = 43, RULE_member_access_modifier = 44, 
		RULE_member_oop_modifier = 45, RULE_member_special_modifier = 46, RULE_type_member = 47, 
		RULE_access_modifier_member_group = 48, RULE_parameter_list = 49, RULE_parameter_modifier = 50, 
		RULE_parameter = 51, RULE_parameter_constraint = 52, RULE_type_block = 53, 
		RULE_try_branch = 54, RULE_catch_branch = 55, RULE_finally_branch = 56, 
		RULE_fault_branch = 57, RULE_generic_arg_list = 58, RULE_generic_argument = 59, 
		RULE_assignment_operator = 60, RULE_function_pointer_parameter_list = 61, 
		RULE_match_expr = 62, RULE_match_block = 63, RULE_match_first_case = 64, 
		RULE_match_alternative_case = 65, RULE_match_default_case = 66, RULE_match_case_expression = 67, 
		RULE_local_function = 68, RULE_add_handler = 69, RULE_remove_handler = 70, 
		RULE_property_getter = 71, RULE_property_setter = 72, RULE_property_or_event_block = 73, 
		RULE_external_block = 74;
	public static readonly string[] ruleNames = {
		"compilation_unit", "file_body", "full_program", "import_directive", "export_directive", 
		"full_identifier", "code_block", "expression", "atom", "this_atom", "expression_atom", 
		"integer_atom", "real_atom", "boolean_atom", "string_atom", "character_atom", 
		"empty_atom", "wildcard_atom", "identifier_atom", "type_name", "union_or_tuple_type_member", 
		"if_branch", "postfix_if_branch", "elif_branch", "else_branch", "unless_branch", 
		"else_unless_branch", "postfix_unless_branch", "arglist", "attribute", 
		"generic_identifier", "field_access_modifier", "field_declaration", "placeholder", 
		"type_access_modifier", "nested_type_access_modifier", "type_special_modifier", 
		"type", "generic_parameter_list", "generic_parameter", "generic_parameter_attribute", 
		"generic_parameter_variance", "inheritance_list", "type_kind", "member_access_modifier", 
		"member_oop_modifier", "member_special_modifier", "type_member", "access_modifier_member_group", 
		"parameter_list", "parameter_modifier", "parameter", "parameter_constraint", 
		"type_block", "try_branch", "catch_branch", "finally_branch", "fault_branch", 
		"generic_arg_list", "generic_argument", "assignment_operator", "function_pointer_parameter_list", 
		"match_expr", "match_block", "match_first_case", "match_alternative_case", 
		"match_default_case", "match_case_expression", "local_function", "add_handler", 
		"remove_handler", "property_getter", "property_setter", "property_or_event_block", 
		"external_block"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'import'", "'export'", "'type'", 
		"'module'", "'template'", "'global'", "'local'", "'internal'", "'static'", 
		"'protected'", "'open'", "'closed'", "'abstract'", "'extern'", "'inline'", 
		"'ref'", "'var'", "'val'", "'base'", "'$try'", "'$throw'", "'$catch'", 
		"'$finally'", "'$fault'", "'$lock'", "'true'", "'false'", "'this'", "'func'", 
		"'func&'", "'default'", "'literal'", "'('", "')'", "'(|'", "'|)'", "'['", 
		"']'", "'{'", "'}'", "','", "',,'", "'.'", "'..'", "'..?'", "'.='", "':'", 
		"':>'", "'<:'", "'<?:'", "'::'", "':::'", "':?'", "';'", "'_'", "'''", 
		"'\"'", "'?'", "'??'", "'??='", "'!'", "'!?'", "'!:'", "'@'", "'@['", 
		"'!@'", "'$'", "'^'", "'^='", "'^\\'", "'%^'", "'$\\'", "'|'", "'|>'", 
		"'<|'", "'||'", "'|='", "'||='", "'&'", "'&>'", "'<&'", "'&&'", "'&&='", 
		"'&='", "'<'", "'>'", "'<='", "'>='", "'=='", "'!='", "'+'", "'+='", "'-'", 
		"'-='", "'*'", "'*='", "'**'", "'**='", "'/'", "'\\'", "'/='", "'%'", 
		"'%%'", "'%='", "'%%='", "'='", "'=>'", "'~'", "'~~'", "'~='", "'<<'", 
		"'<<='", "'>>'", "'>>='", "'->'", "'<-'", "'`'", "'@add'", "'@remove'", 
		"'@get'", "'@set'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Ws", "NewLine", "Single_Line_Comment", "Delimited_Comment", "Documentation_Comment", 
		"Import", "Export", "Type", "Module", "Template", "Global", "Local", "Internal", 
		"Static", "Protected", "Open", "Closed", "Abstract", "Extern", "Inline", 
		"Ref", "Var", "Val", "Base", "Try", "Raise", "Catch", "Finally", "Fault", 
		"Lock", "True", "False", "This", "Func", "Func_Ampersand", "Default", 
		"Literal", "Open_Paren", "Close_Paren", "Open_Paren_Bar", "Bar_Close_Paren", 
		"Open_Bracket", "Close_Bracket", "Open_Brace", "Close_Brace", "Comma", 
		"Double_Comma", "Dot", "Double_Dot", "Double_Dot_Question_Mark", "Dot_Equals", 
		"Colon", "Colon_Greater_Than", "Less_Than_Colon", "Less_Than_Question_Mark_Colon", 
		"Double_Colon", "Triple_Colon", "Colon_Question_Mark", "Semicolon", "Underscore", 
		"Single_Quote", "Double_Quote", "Question_Mark", "Double_Question_Mark", 
		"Double_Question_Mark_Equals", "Exclamation_Mark", "Exclamation_Question", 
		"Exclamation_Colon", "At_Sign", "At_Open_Bracket", "Exclamation_At", "Dollar_Sign", 
		"Caret", "Caret_Equals", "Caret_Backslash", "Percent_Caret", "Dollar_Backslash", 
		"Bar", "Bar_GreaterThan", "LessThan_Bar", "Double_Bar", "Bar_Equals", 
		"Double_Bar_Equals", "Ampersand", "Ampersand_Greater", "Less_Ampersand", 
		"Double_Ampersand", "Double_Ampersand_Equals", "Ampersand_Equals", "Less_Than", 
		"Greater_Than", "Less_Equals", "Greater_Equals", "Double_Equals", "Exclamation_Equals", 
		"Plus", "Plus_Equals", "Minus", "Minus_Equals", "Asterisk", "Asterisk_Equals", 
		"Double_Asterisk", "Double_Asterisk_Equals", "Slash", "Backslash", "Slash_Equals", 
		"Percent", "Double_Percent", "Percent_Equals", "Double_Percent_Equals", 
		"Equals", "Equals_Greater", "Tilde", "Double_Tilde", "Tilde_Equals", "Double_Less_Than", 
		"Double_Less_Than_Equals", "Double_Greater_Than", "Double_Greater_Than_Equals", 
		"Arrow_Right", "Arrow_Left", "Backtick", "Add_Handler", "Remove_Handler", 
		"Get", "Set", "Identifier", "Integer_Literal", "Hex_Integer_Literal", 
		"Binary_Integer_Literal", "Real_Literal", "Character_Literal", "String_Literal", 
		"Verbatim_String_Literal", "Custom_Operator"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DassieParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static DassieParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DassieParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DassieParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Compilation_unitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public File_bodyContext file_body() {
			return GetRuleContext<File_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(DassieParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Import_directiveContext[] import_directive() {
			return GetRuleContexts<Import_directiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Import_directiveContext import_directive(int i) {
			return GetRuleContext<Import_directiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Export_directiveContext[] export_directive() {
			return GetRuleContexts<Export_directiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Export_directiveContext export_directive(int i) {
			return GetRuleContext<Export_directiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(DassieParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(DassieParser.NewLine, i);
		}
		public Compilation_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilation_unit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterCompilation_unit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitCompilation_unit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilation_unit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compilation_unitContext compilation_unit() {
		Compilation_unitContext _localctx = new Compilation_unitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilation_unit);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 153;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case Import:
					case Exclamation_Mark:
						{
						State = 150;
						import_directive();
						}
						break;
					case Export:
						{
						State = 151;
						export_directive();
						}
						break;
					case NewLine:
						{
						State = 152;
						Match(NewLine);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 157;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 158;
			file_body();
			State = 159;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Local_functionContext[] local_function() {
			return GetRuleContexts<Local_functionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Local_functionContext local_function(int i) {
			return GetRuleContext<Local_functionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_memberContext[] type_member() {
			return GetRuleContexts<Type_memberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_memberContext type_member(int i) {
			return GetRuleContext<Type_memberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(DassieParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(DassieParser.NewLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Full_programContext[] full_program() {
			return GetRuleContexts<Full_programContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Full_programContext full_program(int i) {
			return GetRuleContext<Full_programContext>(i);
		}
		public File_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterFile_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitFile_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public File_bodyContext file_body() {
		File_bodyContext _localctx = new File_bodyContext(Context, State);
		EnterRule(_localctx, 2, RULE_file_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8069865111981916412L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & -2305702271706723589L) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & 63L) != 0)) {
				{
				State = 166;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
				case 1:
					{
					State = 161;
					expression(0);
					}
					break;
				case 2:
					{
					State = 162;
					local_function();
					}
					break;
				case 3:
					{
					State = 163;
					type_member();
					}
					break;
				case 4:
					{
					State = 164;
					Match(NewLine);
					}
					break;
				case 5:
					{
					State = 165;
					full_program();
					}
					break;
				}
				}
				State = 170;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Full_programContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(DassieParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(DassieParser.NewLine, i);
		}
		public Full_programContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_full_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterFull_program(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitFull_program(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFull_program(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Full_programContext full_program() {
		Full_programContext _localctx = new Full_programContext(Context, State);
		EnterRule(_localctx, 4, RULE_full_program);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 174;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
					case 1:
						{
						State = 171;
						type();
						}
						break;
					case 2:
						{
						State = 172;
						attribute();
						}
						break;
					case 3:
						{
						State = 173;
						Match(NewLine);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 176;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_directiveContext : ParserRuleContext {
		public Import_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_directive; } }
	 
		public Import_directiveContext() { }
		public virtual void CopyFrom(Import_directiveContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Basic_importContext : Import_directiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Import() { return GetToken(DassieParser.Import, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Full_identifierContext[] full_identifier() {
			return GetRuleContexts<Full_identifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Full_identifierContext full_identifier(int i) {
			return GetRuleContext<Full_identifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation_Mark() { return GetToken(DassieParser.Exclamation_Mark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(DassieParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(DassieParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(DassieParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(DassieParser.NewLine, i);
		}
		public Basic_importContext(Import_directiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterBasic_import(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitBasic_import(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasic_import(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Import_directiveContext import_directive() {
		Import_directiveContext _localctx = new Import_directiveContext(Context, State);
		EnterRule(_localctx, 6, RULE_import_directive);
		int _la;
		try {
			_localctx = new Basic_importContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Exclamation_Mark) {
				{
				State = 178;
				Match(Exclamation_Mark);
				}
			}

			State = 181;
			Match(Import);
			State = 182;
			full_identifier();
			State = 193;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 183;
				Match(Comma);
				State = 187;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NewLine) {
					{
					{
					State = 184;
					Match(NewLine);
					}
					}
					State = 189;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 190;
				full_identifier();
				}
				}
				State = 195;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Export_directiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Export() { return GetToken(DassieParser.Export, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Full_identifierContext full_identifier() {
			return GetRuleContext<Full_identifierContext>(0);
		}
		public Export_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_export_directive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterExport_directive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitExport_directive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExport_directive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Export_directiveContext export_directive() {
		Export_directiveContext _localctx = new Export_directiveContext(Context, State);
		EnterRule(_localctx, 8, RULE_export_directive);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196;
			Match(Export);
			State = 197;
			full_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Full_identifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(DassieParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(DassieParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dot() { return GetTokens(DassieParser.Dot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot(int i) {
			return GetToken(DassieParser.Dot, i);
		}
		public Full_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_full_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterFull_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitFull_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFull_identifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Full_identifierContext full_identifier() {
		Full_identifierContext _localctx = new Full_identifierContext(Context, State);
		EnterRule(_localctx, 10, RULE_full_identifier);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			Match(Identifier);
			State = 204;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 200;
					Match(Dot);
					State = 201;
					Match(Identifier);
					}
					} 
				}
				State = 206;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Code_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Brace() { return GetToken(DassieParser.Open_Brace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Brace() { return GetToken(DassieParser.Close_Brace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PlaceholderContext placeholder() {
			return GetRuleContext<PlaceholderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(DassieParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(DassieParser.NewLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Code_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterCode_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitCode_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCode_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Code_blockContext code_block() {
		Code_blockContext _localctx = new Code_blockContext(Context, State);
		EnterRule(_localctx, 12, RULE_code_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			Match(Open_Brace);
			State = 216;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NewLine:
			case Var:
			case Val:
			case Try:
			case Raise:
			case Lock:
			case True:
			case False:
			case This:
			case Func:
			case Func_Ampersand:
			case Open_Paren:
			case Open_Bracket:
			case Open_Brace:
			case Close_Brace:
			case Double_Dot:
			case Underscore:
			case Question_Mark:
			case Exclamation_Mark:
			case Exclamation_Question:
			case At_Sign:
			case At_Open_Bracket:
			case Exclamation_At:
			case Dollar_Sign:
			case Caret:
			case Caret_Backslash:
			case Dollar_Backslash:
			case Ampersand:
			case Ampersand_Greater:
			case Less_Ampersand:
			case Less_Than:
			case Tilde:
			case Identifier:
			case Integer_Literal:
			case Hex_Integer_Literal:
			case Binary_Integer_Literal:
			case Real_Literal:
			case Character_Literal:
			case String_Literal:
			case Verbatim_String_Literal:
				{
				State = 212;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8069865249425063932L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & -2305702271706723589L) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & 31L) != 0)) {
					{
					State = 210;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case NewLine:
						{
						State = 208;
						Match(NewLine);
						}
						break;
					case Var:
					case Val:
					case Try:
					case Raise:
					case Lock:
					case True:
					case False:
					case This:
					case Func:
					case Func_Ampersand:
					case Open_Paren:
					case Open_Bracket:
					case Open_Brace:
					case Double_Dot:
					case Underscore:
					case Question_Mark:
					case Exclamation_Mark:
					case Exclamation_Question:
					case At_Sign:
					case At_Open_Bracket:
					case Exclamation_At:
					case Dollar_Sign:
					case Caret:
					case Caret_Backslash:
					case Dollar_Backslash:
					case Ampersand:
					case Ampersand_Greater:
					case Less_Ampersand:
					case Less_Than:
					case Tilde:
					case Identifier:
					case Integer_Literal:
					case Hex_Integer_Literal:
					case Binary_Integer_Literal:
					case Real_Literal:
					case Character_Literal:
					case String_Literal:
					case Verbatim_String_Literal:
						{
						State = 209;
						expression(0);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 214;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case Dot:
				{
				State = 215;
				placeholder();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 218;
			Match(Close_Brace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Function_pointer_expressionContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public Function_pointer_parameter_listContext function_pointer_parameter_list() {
			return GetRuleContext<Function_pointer_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Func() { return GetToken(DassieParser.Func, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Func_Ampersand() { return GetToken(DassieParser.Func_Ampersand, 0); }
		public Function_pointer_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterFunction_pointer_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitFunction_pointer_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_pointer_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Subtraction_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(DassieParser.Minus, 0); }
		public Subtraction_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterSubtraction_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitSubtraction_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtraction_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Bitwise_complement_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tilde() { return GetToken(DassieParser.Tilde, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Bitwise_complement_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterBitwise_complement_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitBitwise_complement_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwise_complement_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Right_pipe_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Arrow_Right() { return GetToken(DassieParser.Arrow_Right, 0); }
		public Right_pipe_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterRight_pipe_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitRight_pipe_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRight_pipe_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Array_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode At_Open_Bracket() { return GetToken(DassieParser.At_Open_Bracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Bracket() { return GetToken(DassieParser.Close_Bracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(DassieParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(DassieParser.Comma, i);
		}
		public Array_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterArray_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitArray_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Multiply_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Asterisk() { return GetToken(DassieParser.Asterisk, 0); }
		public Multiply_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterMultiply_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitMultiply_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiply_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Logical_or_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Double_Bar() { return GetTokens(DassieParser.Double_Bar); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Bar(int i) {
			return GetToken(DassieParser.Double_Bar, i);
		}
		public Logical_or_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterLogical_or_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitLogical_or_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_or_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Open_ended_range_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Dot() { return GetToken(DassieParser.Double_Dot, 0); }
		public Open_ended_range_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterOpen_ended_range_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitOpen_ended_range_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpen_ended_range_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Raise_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Raise() { return GetToken(DassieParser.Raise, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Raise_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterRaise_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitRaise_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaise_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class And_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ampersand() { return GetToken(DassieParser.Ampersand, 0); }
		public And_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterAnd_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitAnd_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Newlined_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine() { return GetToken(DassieParser.NewLine, 0); }
		public Newlined_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterNewlined_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitNewlined_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewlined_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Closed_ended_range_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Dot() { return GetToken(DassieParser.Double_Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Closed_ended_range_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterClosed_ended_range_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitClosed_ended_range_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClosed_ended_range_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Foreach_loopContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode At_Sign() { return GetToken(DassieParser.At_Sign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(DassieParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(DassieParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon_Greater_Than() { return GetToken(DassieParser.Colon_Greater_Than, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Paren() { return GetToken(DassieParser.Open_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(DassieParser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Paren() { return GetToken(DassieParser.Close_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Var() { return GetTokens(DassieParser.Var); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Var(int i) {
			return GetToken(DassieParser.Var, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Val() { return GetTokens(DassieParser.Val); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Val(int i) {
			return GetToken(DassieParser.Val, i);
		}
		public Foreach_loopContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterForeach_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitForeach_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeach_loop(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Postfix_unless_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Postfix_unless_branchContext postfix_unless_branch() {
			return GetRuleContext<Postfix_unless_branchContext>(0);
		}
		public Postfix_unless_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterPostfix_unless_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitPostfix_unless_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfix_unless_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Delimited_range_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Dot() { return GetToken(DassieParser.Double_Dot, 0); }
		public Delimited_range_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterDelimited_range_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitDelimited_range_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelimited_range_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Power_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Asterisk() { return GetToken(DassieParser.Double_Asterisk, 0); }
		public Power_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterPower_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitPower_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPower_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Conversion_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less_Than_Colon() { return GetToken(DassieParser.Less_Than_Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Conversion_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterConversion_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitConversion_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConversion_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Range_index_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Caret() { return GetToken(DassieParser.Caret, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Integer_atomContext integer_atom() {
			return GetRuleContext<Integer_atomContext>(0);
		}
		public Range_index_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterRange_index_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitRange_index_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange_index_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Addition_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(DassieParser.Plus, 0); }
		public Addition_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterAddition_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitAddition_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddition_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Atom_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public Atom_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterAtom_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitAtom_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Index_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Colon() { return GetToken(DassieParser.Double_Colon, 0); }
		public Index_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterIndex_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitIndex_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Safe_conversion_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less_Than_Question_Mark_Colon() { return GetToken(DassieParser.Less_Than_Question_Mark_Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Safe_conversion_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterSafe_conversion_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitSafe_conversion_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSafe_conversion_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Comparison_expressionContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less_Than() { return GetToken(DassieParser.Less_Than, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less_Equals() { return GetToken(DassieParser.Less_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater_Than() { return GetToken(DassieParser.Greater_Than, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater_Equals() { return GetToken(DassieParser.Greater_Equals, 0); }
		public Comparison_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterComparison_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitComparison_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Or_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bar() { return GetToken(DassieParser.Bar, 0); }
		public Or_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterOr_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitOr_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Try_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Try_branchContext try_branch() {
			return GetRuleContext<Try_branchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Catch_branchContext[] catch_branch() {
			return GetRuleContexts<Catch_branchContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Catch_branchContext catch_branch(int i) {
			return GetRuleContext<Catch_branchContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fault_branchContext fault_branch() {
			return GetRuleContext<Fault_branchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Finally_branchContext finally_branch() {
			return GetRuleContext<Finally_branchContext>(0);
		}
		public Try_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterTry_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitTry_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTry_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class List_initializer_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Bracket() { return GetToken(DassieParser.Open_Bracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Bracket() { return GetToken(DassieParser.Close_Bracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(DassieParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(DassieParser.Comma, i);
		}
		public List_initializer_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterList_initializer_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitList_initializer_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList_initializer_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Left_shift_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Less_Than() { return GetToken(DassieParser.Double_Less_Than, 0); }
		public Left_shift_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterLeft_shift_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitLeft_shift_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeft_shift_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Match_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Match_exprContext match_expr() {
			return GetRuleContext<Match_exprContext>(0);
		}
		public Match_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterMatch_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitMatch_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatch_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Attributed_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public Attributed_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterAttributed_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitAttributed_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributed_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Modulus_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Percent() { return GetToken(DassieParser.Double_Percent, 0); }
		public Modulus_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterModulus_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitModulus_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModulus_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Equality_expressionContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Equals() { return GetToken(DassieParser.Double_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation_Equals() { return GetToken(DassieParser.Exclamation_Equals, 0); }
		public Equality_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterEquality_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitEquality_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Until_loopContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation_At() { return GetToken(DassieParser.Exclamation_At, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		public Until_loopContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterUntil_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitUntil_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUntil_loop(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class While_loopContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode At_Sign() { return GetToken(DassieParser.At_Sign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		public While_loopContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterWhile_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitWhile_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_loop(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Xor_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Caret() { return GetToken(DassieParser.Caret, 0); }
		public Xor_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterXor_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitXor_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXor_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Prefix_if_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public If_branchContext if_branch() {
			return GetRuleContext<If_branchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(DassieParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(DassieParser.NewLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Elif_branchContext[] elif_branch() {
			return GetRuleContexts<Elif_branchContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Elif_branchContext elif_branch(int i) {
			return GetRuleContext<Elif_branchContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_branchContext else_branch() {
			return GetRuleContext<Else_branchContext>(0);
		}
		public Prefix_if_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterPrefix_if_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitPrefix_if_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefix_if_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Logical_negation_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation_Mark() { return GetToken(DassieParser.Exclamation_Mark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Logical_negation_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterLogical_negation_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitLogical_negation_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_negation_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Right_shift_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Greater_Than() { return GetToken(DassieParser.Double_Greater_Than, 0); }
		public Right_shift_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterRight_shift_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitRight_shift_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRight_shift_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Anonymous_function_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_listContext parameter_list() {
			return GetRuleContext<Parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals_Greater() { return GetToken(DassieParser.Equals_Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(DassieParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Anonymous_function_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterAnonymous_function_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitAnonymous_function_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymous_function_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Rethrow_exceptionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Raise() { return GetToken(DassieParser.Raise, 0); }
		public Rethrow_exceptionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterRethrow_exception(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitRethrow_exception(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRethrow_exception(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Separated_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(DassieParser.Semicolon, 0); }
		public Separated_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterSeparated_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitSeparated_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeparated_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Member_access_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dot() { return GetTokens(DassieParser.Dot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot(int i) {
			return GetToken(DassieParser.Dot, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(DassieParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(DassieParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_arg_listContext generic_arg_list() {
			return GetRuleContext<Generic_arg_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArglistContext arglist() {
			return GetRuleContext<ArglistContext>(0);
		}
		public Member_access_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterMember_access_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitMember_access_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_access_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Custom_operator_binary_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Custom_Operator() { return GetToken(DassieParser.Custom_Operator, 0); }
		public Custom_operator_binary_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterCustom_operator_binary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitCustom_operator_binary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCustom_operator_binary_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Remainder_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Percent() { return GetToken(DassieParser.Percent, 0); }
		public Remainder_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterRemainder_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitRemainder_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemainder_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Typeof_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Caret_Backslash() { return GetToken(DassieParser.Caret_Backslash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Typeof_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterTypeof_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitTypeof_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeof_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Block_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		public Block_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterBlock_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitBlock_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Full_range_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Dot() { return GetToken(DassieParser.Double_Dot, 0); }
		public Full_range_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterFull_range_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitFull_range_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFull_range_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Left_pipe_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Arrow_Left() { return GetToken(DassieParser.Arrow_Left, 0); }
		public Left_pipe_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterLeft_pipe_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitLeft_pipe_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeft_pipe_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Dictionary_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Open_Bracket() { return GetTokens(DassieParser.Open_Bracket); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Bracket(int i) {
			return GetToken(DassieParser.Open_Bracket, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Close_Bracket() { return GetTokens(DassieParser.Close_Bracket); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Bracket(int i) {
			return GetToken(DassieParser.Close_Bracket, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(DassieParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(DassieParser.Comma, i);
		}
		public Dictionary_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterDictionary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitDictionary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictionary_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public AssignmentContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Prefix_unless_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unless_branchContext unless_branch() {
			return GetRuleContext<Unless_branchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(DassieParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(DassieParser.NewLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_unless_branchContext[] else_unless_branch() {
			return GetRuleContexts<Else_unless_branchContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_unless_branchContext else_unless_branch(int i) {
			return GetRuleContext<Else_unless_branchContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_branchContext else_branch() {
			return GetRuleContext<Else_branchContext>(0);
		}
		public Prefix_unless_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterPrefix_unless_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitPrefix_unless_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefix_unless_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Isinstance_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon_Question_Mark() { return GetToken(DassieParser.Colon_Question_Mark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Isinstance_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterIsinstance_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitIsinstance_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsinstance_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Local_declaration_or_assignmentContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(DassieParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(DassieParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Var() { return GetToken(DassieParser.Var, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Val() { return GetToken(DassieParser.Val, 0); }
		public Local_declaration_or_assignmentContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterLocal_declaration_or_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitLocal_declaration_or_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_declaration_or_assignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Tuple_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Paren() { return GetToken(DassieParser.Open_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Paren() { return GetToken(DassieParser.Close_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(DassieParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(DassieParser.Comma, i);
		}
		public Tuple_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterTuple_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitTuple_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTuple_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Nameof_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dollar_Backslash() { return GetToken(DassieParser.Dollar_Backslash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Nameof_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterNameof_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitNameof_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameof_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Postfix_if_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Postfix_if_branchContext postfix_if_branch() {
			return GetRuleContext<Postfix_if_branchContext>(0);
		}
		public Postfix_if_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterPostfix_if_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitPostfix_if_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfix_if_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Divide_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Slash() { return GetToken(DassieParser.Slash, 0); }
		public Divide_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterDivide_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitDivide_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivide_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Byref_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ampersand() { return GetToken(DassieParser.Ampersand, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Byref_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterByref_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitByref_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitByref_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Array_element_assignmentContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Bracket() { return GetToken(DassieParser.Open_Bracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Bracket() { return GetToken(DassieParser.Close_Bracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		public Array_element_assignmentContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterArray_element_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitArray_element_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_element_assignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Logical_and_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Double_Ampersand() { return GetTokens(DassieParser.Double_Ampersand); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Ampersand(int i) {
			return GetToken(DassieParser.Double_Ampersand, i);
		}
		public Logical_and_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterLogical_and_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitLogical_and_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_and_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Lock_statementContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lock() { return GetToken(DassieParser.Lock, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		public Lock_statementContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterLock_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitLock_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLock_statement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Full_identifier_member_access_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Full_identifierContext full_identifier() {
			return GetRuleContext<Full_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_arg_listContext generic_arg_list() {
			return GetRuleContext<Generic_arg_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArglistContext arglist() {
			return GetRuleContext<ArglistContext>(0);
		}
		public Full_identifier_member_access_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterFull_identifier_member_access_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitFull_identifier_member_access_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFull_identifier_member_access_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Implementation_query_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Dot_Question_Mark() { return GetToken(DassieParser.Double_Dot_Question_Mark, 0); }
		public Implementation_query_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterImplementation_query_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitImplementation_query_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplementation_query_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 14;
		EnterRecursionRule(_localctx, 14, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 434;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				{
				_localctx = new Bitwise_complement_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 221;
				Match(Tilde);
				State = 222;
				expression(61);
				}
				break;
			case 2:
				{
				_localctx = new Logical_negation_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 223;
				Match(Exclamation_Mark);
				State = 224;
				expression(58);
				}
				break;
			case 3:
				{
				_localctx = new Byref_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 225;
				Match(Ampersand);
				State = 226;
				expression(39);
				}
				break;
			case 4:
				{
				_localctx = new Anonymous_function_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 227;
				parameter_list();
				State = 230;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 228;
					Match(Colon);
					State = 229;
					type_name(0);
					}
				}

				State = 232;
				Match(Equals_Greater);
				State = 233;
				expression(37);
				}
				break;
			case 5:
				{
				_localctx = new Function_pointer_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 235;
				((Function_pointer_expressionContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==Func || _la==Func_Ampersand) ) {
					((Function_pointer_expressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 236;
				function_pointer_parameter_list();
				State = 237;
				expression(36);
				}
				break;
			case 6:
				{
				_localctx = new Typeof_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 239;
				Match(Caret_Backslash);
				State = 240;
				type_name(0);
				}
				break;
			case 7:
				{
				_localctx = new Nameof_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 241;
				Match(Dollar_Backslash);
				State = 242;
				expression(34);
				}
				break;
			case 8:
				{
				_localctx = new Local_declaration_or_assignmentContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 244;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Var || _la==Val) {
					{
					State = 243;
					_la = TokenStream.LA(1);
					if ( !(_la==Var || _la==Val) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 246;
				Match(Identifier);
				State = 249;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 247;
					Match(Colon);
					State = 248;
					type_name(0);
					}
				}

				State = 251;
				assignment_operator();
				State = 252;
				expression(32);
				}
				break;
			case 9:
				{
				_localctx = new Closed_ended_range_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 254;
				Match(Double_Dot);
				State = 255;
				expression(27);
				}
				break;
			case 10:
				{
				_localctx = new Full_range_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 256;
				Match(Double_Dot);
				}
				break;
			case 11:
				{
				_localctx = new Range_index_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 257;
				Match(Caret);
				State = 258;
				integer_atom();
				}
				break;
			case 12:
				{
				_localctx = new Attributed_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 260;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 259;
						attribute();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 262;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 264;
				expression(24);
				}
				break;
			case 13:
				{
				_localctx = new Prefix_if_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 266;
				if_branch();
				State = 270;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 267;
						Match(NewLine);
						}
						} 
					}
					State = 272;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
				}
				State = 276;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 273;
						elif_branch();
						}
						} 
					}
					State = 278;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
				}
				State = 282;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 279;
						Match(NewLine);
						}
						} 
					}
					State = 284;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
				}
				State = 286;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
				case 1:
					{
					State = 285;
					else_branch();
					}
					break;
				}
				}
				break;
			case 14:
				{
				_localctx = new Prefix_unless_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 288;
				unless_branch();
				State = 292;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 289;
						Match(NewLine);
						}
						} 
					}
					State = 294;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
				}
				State = 298;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 295;
						else_unless_branch();
						}
						} 
					}
					State = 300;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
				}
				State = 304;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 301;
						Match(NewLine);
						}
						} 
					}
					State = 306;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
				}
				State = 308;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
				case 1:
					{
					State = 307;
					else_branch();
					}
					break;
				}
				}
				break;
			case 15:
				{
				_localctx = new Foreach_loopContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 310;
				Match(At_Sign);
				State = 312;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Open_Paren) {
					{
					State = 311;
					Match(Open_Paren);
					}
				}

				{
				State = 315;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Var || _la==Val) {
					{
					State = 314;
					_la = TokenStream.LA(1);
					if ( !(_la==Var || _la==Val) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 317;
				Match(Identifier);
				State = 323;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 318;
					Match(Comma);
					{
					State = 320;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==Var || _la==Val) {
						{
						State = 319;
						_la = TokenStream.LA(1);
						if ( !(_la==Var || _la==Val) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					State = 322;
					Match(Identifier);
					}
					}
				}

				State = 326;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Close_Paren) {
					{
					State = 325;
					Match(Close_Paren);
					}
				}

				State = 328;
				Match(Colon_Greater_Than);
				State = 329;
				expression(0);
				}
				State = 331;
				Match(Equals);
				State = 332;
				expression(19);
				}
				break;
			case 16:
				{
				_localctx = new While_loopContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 334;
				Match(At_Sign);
				State = 335;
				expression(0);
				State = 336;
				Match(Equals);
				State = 337;
				expression(18);
				}
				break;
			case 17:
				{
				_localctx = new Until_loopContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 339;
				Match(Exclamation_At);
				State = 340;
				expression(0);
				State = 341;
				Match(Equals);
				State = 342;
				expression(17);
				}
				break;
			case 18:
				{
				_localctx = new Match_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 344;
				match_expr();
				}
				break;
			case 19:
				{
				_localctx = new Try_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 345;
				try_branch();
				State = 349;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 346;
						catch_branch();
						}
						} 
					}
					State = 351;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
				}
				State = 353;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
				case 1:
					{
					State = 352;
					fault_branch();
					}
					break;
				}
				State = 356;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
				case 1:
					{
					State = 355;
					finally_branch();
					}
					break;
				}
				}
				break;
			case 20:
				{
				_localctx = new Raise_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 358;
				Match(Raise);
				State = 359;
				expression(14);
				}
				break;
			case 21:
				{
				_localctx = new Rethrow_exceptionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 360;
				Match(Raise);
				}
				break;
			case 22:
				{
				_localctx = new Lock_statementContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 361;
				Match(Lock);
				State = 362;
				expression(0);
				State = 363;
				Match(Equals);
				State = 364;
				expression(12);
				}
				break;
			case 23:
				{
				_localctx = new Array_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 366;
				Match(At_Open_Bracket);
				State = 375;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 22)) & ~0x3f) == 0 && ((1L << (_la - 22)) & -4562231909415829733L) != 0) || ((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & 560751064383505L) != 0)) {
					{
					State = 367;
					expression(0);
					State = 372;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==Comma) {
						{
						{
						State = 368;
						Match(Comma);
						State = 369;
						expression(0);
						}
						}
						State = 374;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 377;
				Match(Close_Bracket);
				}
				break;
			case 24:
				{
				_localctx = new List_initializer_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 378;
				Match(Open_Bracket);
				State = 387;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 22)) & ~0x3f) == 0 && ((1L << (_la - 22)) & -4562231909415829733L) != 0) || ((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & 560751064383505L) != 0)) {
					{
					State = 379;
					expression(0);
					State = 384;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==Comma) {
						{
						{
						State = 380;
						Match(Comma);
						State = 381;
						expression(0);
						}
						}
						State = 386;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 389;
				Match(Close_Bracket);
				}
				break;
			case 25:
				{
				_localctx = new Dictionary_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 390;
				Match(Open_Bracket);
				State = 408;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Open_Bracket) {
					{
					State = 391;
					Match(Open_Bracket);
					State = 392;
					expression(0);
					State = 393;
					Match(Comma);
					State = 394;
					expression(0);
					State = 395;
					Match(Close_Bracket);
					State = 405;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==Comma) {
						{
						{
						State = 396;
						Match(Comma);
						State = 397;
						Match(Open_Bracket);
						State = 398;
						expression(0);
						State = 399;
						Match(Comma);
						State = 400;
						expression(0);
						State = 401;
						Match(Close_Bracket);
						}
						}
						State = 407;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 410;
				Match(Close_Bracket);
				}
				break;
			case 26:
				{
				_localctx = new Atom_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 411;
				atom();
				}
				break;
			case 27:
				{
				_localctx = new Block_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 412;
				code_block();
				}
				break;
			case 28:
				{
				_localctx = new Full_identifier_member_access_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 413;
				full_identifier();
				State = 415;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
				case 1:
					{
					State = 414;
					generic_arg_list();
					}
					break;
				}
				State = 418;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
				case 1:
					{
					State = 417;
					arglist();
					}
					break;
				}
				}
				break;
			case 29:
				{
				_localctx = new Tuple_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 420;
				Match(Open_Paren);
				State = 421;
				expression(0);
				State = 426;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 422;
						Match(Comma);
						State = 423;
						expression(0);
						}
						} 
					}
					State = 428;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
				}
				State = 430;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 429;
					Match(Comma);
					}
				}

				State = 432;
				Match(Close_Paren);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 555;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 553;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
					case 1:
						{
						_localctx = new Custom_operator_binary_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 436;
						if (!(Precpred(Context, 62))) throw new FailedPredicateException(this, "Precpred(Context, 62)");
						State = 437;
						Match(Custom_Operator);
						State = 438;
						expression(63);
						}
						break;
					case 2:
						{
						_localctx = new Array_element_assignmentContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 439;
						if (!(Precpred(Context, 60))) throw new FailedPredicateException(this, "Precpred(Context, 60)");
						State = 440;
						Match(Open_Bracket);
						State = 441;
						expression(0);
						State = 442;
						Match(Close_Bracket);
						State = 443;
						Match(Equals);
						State = 444;
						expression(61);
						}
						break;
					case 3:
						{
						_localctx = new Power_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 446;
						if (!(Precpred(Context, 59))) throw new FailedPredicateException(this, "Precpred(Context, 59)");
						State = 447;
						Match(Double_Asterisk);
						State = 448;
						expression(59);
						}
						break;
					case 4:
						{
						_localctx = new Multiply_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 449;
						if (!(Precpred(Context, 57))) throw new FailedPredicateException(this, "Precpred(Context, 57)");
						State = 450;
						Match(Asterisk);
						State = 451;
						expression(58);
						}
						break;
					case 5:
						{
						_localctx = new Divide_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 452;
						if (!(Precpred(Context, 56))) throw new FailedPredicateException(this, "Precpred(Context, 56)");
						State = 453;
						Match(Slash);
						State = 454;
						expression(57);
						}
						break;
					case 6:
						{
						_localctx = new Remainder_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 455;
						if (!(Precpred(Context, 55))) throw new FailedPredicateException(this, "Precpred(Context, 55)");
						State = 456;
						Match(Percent);
						State = 457;
						expression(56);
						}
						break;
					case 7:
						{
						_localctx = new Modulus_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 458;
						if (!(Precpred(Context, 54))) throw new FailedPredicateException(this, "Precpred(Context, 54)");
						State = 459;
						Match(Double_Percent);
						State = 460;
						expression(55);
						}
						break;
					case 8:
						{
						_localctx = new Addition_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 461;
						if (!(Precpred(Context, 53))) throw new FailedPredicateException(this, "Precpred(Context, 53)");
						State = 462;
						Match(Plus);
						State = 463;
						expression(54);
						}
						break;
					case 9:
						{
						_localctx = new Subtraction_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 464;
						if (!(Precpred(Context, 52))) throw new FailedPredicateException(this, "Precpred(Context, 52)");
						State = 465;
						Match(Minus);
						State = 466;
						expression(53);
						}
						break;
					case 10:
						{
						_localctx = new Left_shift_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 467;
						if (!(Precpred(Context, 51))) throw new FailedPredicateException(this, "Precpred(Context, 51)");
						State = 468;
						Match(Double_Less_Than);
						State = 469;
						expression(52);
						}
						break;
					case 11:
						{
						_localctx = new Right_shift_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 470;
						if (!(Precpred(Context, 50))) throw new FailedPredicateException(this, "Precpred(Context, 50)");
						State = 471;
						Match(Double_Greater_Than);
						State = 472;
						expression(51);
						}
						break;
					case 12:
						{
						_localctx = new Equality_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 473;
						if (!(Precpred(Context, 49))) throw new FailedPredicateException(this, "Precpred(Context, 49)");
						State = 474;
						((Equality_expressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==Double_Equals || _la==Exclamation_Equals) ) {
							((Equality_expressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 475;
						expression(50);
						}
						break;
					case 13:
						{
						_localctx = new Comparison_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 476;
						if (!(Precpred(Context, 48))) throw new FailedPredicateException(this, "Precpred(Context, 48)");
						State = 477;
						((Comparison_expressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 90)) & ~0x3f) == 0 && ((1L << (_la - 90)) & 15L) != 0)) ) {
							((Comparison_expressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 478;
						expression(49);
						}
						break;
					case 14:
						{
						_localctx = new And_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 479;
						if (!(Precpred(Context, 46))) throw new FailedPredicateException(this, "Precpred(Context, 46)");
						State = 480;
						Match(Ampersand);
						State = 481;
						expression(47);
						}
						break;
					case 15:
						{
						_localctx = new Or_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 482;
						if (!(Precpred(Context, 44))) throw new FailedPredicateException(this, "Precpred(Context, 44)");
						State = 483;
						Match(Bar);
						State = 484;
						expression(45);
						}
						break;
					case 16:
						{
						_localctx = new Xor_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 485;
						if (!(Precpred(Context, 42))) throw new FailedPredicateException(this, "Precpred(Context, 42)");
						State = 486;
						Match(Caret);
						State = 487;
						expression(43);
						}
						break;
					case 17:
						{
						_localctx = new Index_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 488;
						if (!(Precpred(Context, 38))) throw new FailedPredicateException(this, "Precpred(Context, 38)");
						State = 489;
						Match(Double_Colon);
						State = 490;
						expression(39);
						}
						break;
					case 18:
						{
						_localctx = new Implementation_query_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 491;
						if (!(Precpred(Context, 33))) throw new FailedPredicateException(this, "Precpred(Context, 33)");
						State = 492;
						Match(Double_Dot_Question_Mark);
						State = 493;
						expression(34);
						}
						break;
					case 19:
						{
						_localctx = new Right_pipe_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 494;
						if (!(Precpred(Context, 31))) throw new FailedPredicateException(this, "Precpred(Context, 31)");
						State = 495;
						Match(Arrow_Right);
						State = 496;
						expression(32);
						}
						break;
					case 20:
						{
						_localctx = new Left_pipe_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 497;
						if (!(Precpred(Context, 30))) throw new FailedPredicateException(this, "Precpred(Context, 30)");
						State = 498;
						Match(Arrow_Left);
						State = 499;
						expression(31);
						}
						break;
					case 21:
						{
						_localctx = new Delimited_range_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 500;
						if (!(Precpred(Context, 29))) throw new FailedPredicateException(this, "Precpred(Context, 29)");
						State = 501;
						Match(Double_Dot);
						State = 502;
						expression(30);
						}
						break;
					case 22:
						{
						_localctx = new AssignmentContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 503;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 504;
						assignment_operator();
						State = 505;
						expression(3);
						}
						break;
					case 23:
						{
						_localctx = new Isinstance_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 507;
						if (!(Precpred(Context, 47))) throw new FailedPredicateException(this, "Precpred(Context, 47)");
						State = 508;
						Match(Colon_Question_Mark);
						State = 509;
						type_name(0);
						}
						break;
					case 24:
						{
						_localctx = new Logical_and_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 510;
						if (!(Precpred(Context, 45))) throw new FailedPredicateException(this, "Precpred(Context, 45)");
						State = 513;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 511;
								Match(Double_Ampersand);
								State = 512;
								expression(0);
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 515;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						}
						break;
					case 25:
						{
						_localctx = new Logical_or_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 517;
						if (!(Precpred(Context, 43))) throw new FailedPredicateException(this, "Precpred(Context, 43)");
						State = 520;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 518;
								Match(Double_Bar);
								State = 519;
								expression(0);
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 522;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						}
						break;
					case 26:
						{
						_localctx = new Conversion_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 524;
						if (!(Precpred(Context, 41))) throw new FailedPredicateException(this, "Precpred(Context, 41)");
						State = 525;
						Match(Less_Than_Colon);
						State = 526;
						type_name(0);
						}
						break;
					case 27:
						{
						_localctx = new Safe_conversion_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 527;
						if (!(Precpred(Context, 40))) throw new FailedPredicateException(this, "Precpred(Context, 40)");
						State = 528;
						Match(Less_Than_Question_Mark_Colon);
						State = 529;
						type_name(0);
						}
						break;
					case 28:
						{
						_localctx = new Open_ended_range_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 530;
						if (!(Precpred(Context, 28))) throw new FailedPredicateException(this, "Precpred(Context, 28)");
						State = 531;
						Match(Double_Dot);
						}
						break;
					case 29:
						{
						_localctx = new Postfix_if_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 532;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 533;
						postfix_if_branch();
						}
						break;
					case 30:
						{
						_localctx = new Postfix_unless_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 534;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 535;
						postfix_unless_branch();
						}
						break;
					case 31:
						{
						_localctx = new Newlined_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 536;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 537;
						Match(NewLine);
						}
						break;
					case 32:
						{
						_localctx = new Separated_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 538;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 539;
						Match(Semicolon);
						}
						break;
					case 33:
						{
						_localctx = new Member_access_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 540;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 543;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 541;
								Match(Dot);
								State = 542;
								Match(Identifier);
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 545;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						State = 548;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
						case 1:
							{
							State = 547;
							generic_arg_list();
							}
							break;
						}
						State = 551;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
						case 1:
							{
							State = 550;
							arglist();
							}
							break;
						}
						}
						break;
					}
					} 
				}
				State = 557;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression_atomContext expression_atom() {
			return GetRuleContext<Expression_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Integer_atomContext integer_atom() {
			return GetRuleContext<Integer_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Real_atomContext real_atom() {
			return GetRuleContext<Real_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Boolean_atomContext boolean_atom() {
			return GetRuleContext<Boolean_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_atomContext string_atom() {
			return GetRuleContext<String_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Character_atomContext character_atom() {
			return GetRuleContext<Character_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Empty_atomContext empty_atom() {
			return GetRuleContext<Empty_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Wildcard_atomContext wildcard_atom() {
			return GetRuleContext<Wildcard_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public This_atomContext this_atom() {
			return GetRuleContext<This_atomContext>(0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 16, RULE_atom);
		try {
			State = 567;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 558;
				expression_atom();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 559;
				integer_atom();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 560;
				real_atom();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 561;
				boolean_atom();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 562;
				string_atom();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 563;
				character_atom();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 564;
				empty_atom();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 565;
				wildcard_atom();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 566;
				this_atom();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class This_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode This() { return GetToken(DassieParser.This, 0); }
		public This_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_this_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterThis_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitThis_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThis_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public This_atomContext this_atom() {
		This_atomContext _localctx = new This_atomContext(Context, State);
		EnterRule(_localctx, 18, RULE_this_atom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 569;
			Match(This);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Paren() { return GetToken(DassieParser.Open_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Paren() { return GetToken(DassieParser.Close_Paren, 0); }
		public Expression_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterExpression_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitExpression_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_atomContext expression_atom() {
		Expression_atomContext _localctx = new Expression_atomContext(Context, State);
		EnterRule(_localctx, 20, RULE_expression_atom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 571;
			Match(Open_Paren);
			State = 572;
			expression(0);
			State = 573;
			Match(Close_Paren);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Integer_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Integer_Literal() { return GetToken(DassieParser.Integer_Literal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Binary_Integer_Literal() { return GetToken(DassieParser.Binary_Integer_Literal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hex_Integer_Literal() { return GetToken(DassieParser.Hex_Integer_Literal, 0); }
		public Integer_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterInteger_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitInteger_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteger_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Integer_atomContext integer_atom() {
		Integer_atomContext _localctx = new Integer_atomContext(Context, State);
		EnterRule(_localctx, 22, RULE_integer_atom);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 575;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Real_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Real_Literal() { return GetToken(DassieParser.Real_Literal, 0); }
		public Real_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_real_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterReal_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitReal_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReal_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Real_atomContext real_atom() {
		Real_atomContext _localctx = new Real_atomContext(Context, State);
		EnterRule(_localctx, 24, RULE_real_atom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 577;
			Match(Real_Literal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Boolean_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode True() { return GetToken(DassieParser.True, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode False() { return GetToken(DassieParser.False, 0); }
		public Boolean_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterBoolean_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitBoolean_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Boolean_atomContext boolean_atom() {
		Boolean_atomContext _localctx = new Boolean_atomContext(Context, State);
		EnterRule(_localctx, 26, RULE_boolean_atom);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 579;
			_la = TokenStream.LA(1);
			if ( !(_la==True || _la==False) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String_Literal() { return GetToken(DassieParser.String_Literal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Verbatim_String_Literal() { return GetToken(DassieParser.Verbatim_String_Literal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(DassieParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_atomContext identifier_atom() {
			return GetRuleContext<Identifier_atomContext>(0);
		}
		public String_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterString_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitString_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_atomContext string_atom() {
		String_atomContext _localctx = new String_atomContext(Context, State);
		EnterRule(_localctx, 28, RULE_string_atom);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 581;
			_la = TokenStream.LA(1);
			if ( !(_la==String_Literal || _la==Verbatim_String_Literal) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 584;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				{
				State = 582;
				Match(Colon);
				State = 583;
				identifier_atom();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Character_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Character_Literal() { return GetToken(DassieParser.Character_Literal, 0); }
		public Character_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_character_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterCharacter_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitCharacter_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharacter_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Character_atomContext character_atom() {
		Character_atomContext _localctx = new Character_atomContext(Context, State);
		EnterRule(_localctx, 30, RULE_character_atom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 586;
			Match(Character_Literal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Empty_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Paren() { return GetToken(DassieParser.Open_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Paren() { return GetToken(DassieParser.Close_Paren, 0); }
		public Empty_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_empty_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterEmpty_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitEmpty_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmpty_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Empty_atomContext empty_atom() {
		Empty_atomContext _localctx = new Empty_atomContext(Context, State);
		EnterRule(_localctx, 32, RULE_empty_atom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 588;
			Match(Open_Paren);
			State = 589;
			Match(Close_Paren);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Wildcard_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Underscore() { return GetToken(DassieParser.Underscore, 0); }
		public Wildcard_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wildcard_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterWildcard_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitWildcard_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWildcard_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Wildcard_atomContext wildcard_atom() {
		Wildcard_atomContext _localctx = new Wildcard_atomContext(Context, State);
		EnterRule(_localctx, 34, RULE_wildcard_atom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 591;
			Match(Underscore);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Identifier_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(DassieParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Full_identifierContext full_identifier() {
			return GetRuleContext<Full_identifierContext>(0);
		}
		public Identifier_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterIdentifier_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitIdentifier_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Identifier_atomContext identifier_atom() {
		Identifier_atomContext _localctx = new Identifier_atomContext(Context, State);
		EnterRule(_localctx, 36, RULE_identifier_atom);
		int _la;
		try {
			State = 607;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 596;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Less_Than) {
					{
					{
					State = 593;
					attribute();
					}
					}
					State = 598;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 599;
				Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 603;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Less_Than) {
					{
					{
					State = 600;
					attribute();
					}
					}
					State = 605;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 606;
				full_identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_atomContext identifier_atom() {
			return GetRuleContext<Identifier_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Paren() { return GetToken(DassieParser.Open_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Union_or_tuple_type_memberContext[] union_or_tuple_type_member() {
			return GetRuleContexts<Union_or_tuple_type_memberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Union_or_tuple_type_memberContext union_or_tuple_type_member(int i) {
			return GetRuleContext<Union_or_tuple_type_memberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Paren() { return GetToken(DassieParser.Close_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Bar() { return GetTokens(DassieParser.Bar); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bar(int i) {
			return GetToken(DassieParser.Bar, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(DassieParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(DassieParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_identifierContext generic_identifier() {
			return GetRuleContext<Generic_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_arg_listContext generic_arg_list() {
			return GetRuleContext<Generic_arg_listContext>(0);
		}
		public Type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterType_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitType_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_nameContext type_name() {
		return type_name(0);
	}

	private Type_nameContext type_name(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Type_nameContext _localctx = new Type_nameContext(Context, _parentState);
		Type_nameContext _prevctx = _localctx;
		int _startState = 38;
		EnterRecursionRule(_localctx, 38, RULE_type_name, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 632;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				{
				State = 610;
				identifier_atom();
				}
				break;
			case 2:
				{
				State = 611;
				Match(Open_Paren);
				State = 612;
				union_or_tuple_type_member();
				State = 615;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 613;
					Match(Bar);
					State = 614;
					union_or_tuple_type_member();
					}
					}
					State = 617;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Bar );
				State = 619;
				Match(Close_Paren);
				}
				break;
			case 3:
				{
				State = 621;
				Match(Open_Paren);
				State = 622;
				union_or_tuple_type_member();
				State = 625;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 623;
					Match(Comma);
					State = 624;
					union_or_tuple_type_member();
					}
					}
					State = 627;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Comma );
				State = 629;
				Match(Close_Paren);
				}
				break;
			case 4:
				{
				State = 631;
				generic_identifier();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 638;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Type_nameContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_type_name);
					State = 634;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 635;
					generic_arg_list();
					}
					} 
				}
				State = 640;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Union_or_tuple_type_memberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(DassieParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(DassieParser.Colon, 0); }
		public Union_or_tuple_type_memberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_union_or_tuple_type_member; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterUnion_or_tuple_type_member(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitUnion_or_tuple_type_member(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnion_or_tuple_type_member(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Union_or_tuple_type_memberContext union_or_tuple_type_member() {
		Union_or_tuple_type_memberContext _localctx = new Union_or_tuple_type_memberContext(Context, State);
		EnterRule(_localctx, 40, RULE_union_or_tuple_type_member);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 643;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
			case 1:
				{
				State = 641;
				Match(Identifier);
				State = 642;
				Match(Colon);
				}
				break;
			}
			State = 645;
			type_name(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Question_Mark() { return GetToken(DassieParser.Question_Mark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		public If_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterIf_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitIf_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_branchContext if_branch() {
		If_branchContext _localctx = new If_branchContext(Context, State);
		EnterRule(_localctx, 42, RULE_if_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 647;
			Match(Question_Mark);
			State = 648;
			expression(0);
			State = 649;
			Match(Equals);
			State = 652;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				{
				State = 650;
				code_block();
				}
				break;
			case 2:
				{
				State = 651;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Postfix_if_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Question_Mark() { return GetToken(DassieParser.Question_Mark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Postfix_if_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfix_if_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterPostfix_if_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitPostfix_if_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfix_if_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Postfix_if_branchContext postfix_if_branch() {
		Postfix_if_branchContext _localctx = new Postfix_if_branchContext(Context, State);
		EnterRule(_localctx, 44, RULE_postfix_if_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 654;
			Match(Question_Mark);
			State = 655;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Elif_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(DassieParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		public Elif_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elif_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterElif_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitElif_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElif_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Elif_branchContext elif_branch() {
		Elif_branchContext _localctx = new Elif_branchContext(Context, State);
		EnterRule(_localctx, 46, RULE_elif_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 657;
			Match(Colon);
			State = 658;
			expression(0);
			State = 659;
			Match(Equals);
			State = 662;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				{
				State = 660;
				code_block();
				}
				break;
			case 2:
				{
				State = 661;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(DassieParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Else_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterElse_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitElse_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_branchContext else_branch() {
		Else_branchContext _localctx = new Else_branchContext(Context, State);
		EnterRule(_localctx, 48, RULE_else_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 664;
			Match(Colon);
			State = 665;
			Match(Equals);
			State = 668;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				{
				State = 666;
				code_block();
				}
				break;
			case 2:
				{
				State = 667;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unless_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation_Question() { return GetToken(DassieParser.Exclamation_Question, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		public Unless_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unless_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterUnless_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitUnless_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnless_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unless_branchContext unless_branch() {
		Unless_branchContext _localctx = new Unless_branchContext(Context, State);
		EnterRule(_localctx, 50, RULE_unless_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 670;
			Match(Exclamation_Question);
			State = 671;
			expression(0);
			State = 672;
			Match(Equals);
			State = 675;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
			case 1:
				{
				State = 673;
				code_block();
				}
				break;
			case 2:
				{
				State = 674;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_unless_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation_Colon() { return GetToken(DassieParser.Exclamation_Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		public Else_unless_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_unless_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterElse_unless_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitElse_unless_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_unless_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_unless_branchContext else_unless_branch() {
		Else_unless_branchContext _localctx = new Else_unless_branchContext(Context, State);
		EnterRule(_localctx, 52, RULE_else_unless_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 677;
			Match(Exclamation_Colon);
			State = 678;
			expression(0);
			State = 679;
			Match(Equals);
			State = 682;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				{
				State = 680;
				code_block();
				}
				break;
			case 2:
				{
				State = 681;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Postfix_unless_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation_Question() { return GetToken(DassieParser.Exclamation_Question, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Postfix_unless_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfix_unless_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterPostfix_unless_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitPostfix_unless_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfix_unless_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Postfix_unless_branchContext postfix_unless_branch() {
		Postfix_unless_branchContext _localctx = new Postfix_unless_branchContext(Context, State);
		EnterRule(_localctx, 54, RULE_postfix_unless_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 684;
			Match(Exclamation_Question);
			State = 685;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArglistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(DassieParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(DassieParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Comma() { return GetToken(DassieParser.Double_Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(DassieParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(DassieParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Colon() { return GetTokens(DassieParser.Colon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon(int i) {
			return GetToken(DassieParser.Colon, i);
		}
		public ArglistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arglist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterArglist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitArglist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArglist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArglistContext arglist() {
		ArglistContext _localctx = new ArglistContext(Context, State);
		EnterRule(_localctx, 56, RULE_arglist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 689;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
			case 1:
				{
				State = 687;
				Match(Identifier);
				State = 688;
				Match(Colon);
				}
				break;
			}
			State = 691;
			expression(0);
			}
			State = 701;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 693;
					Match(Comma);
					{
					State = 696;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
					case 1:
						{
						State = 694;
						Match(Identifier);
						State = 695;
						Match(Colon);
						}
						break;
					}
					State = 698;
					expression(0);
					}
					}
					} 
				}
				State = 703;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
			}
			State = 705;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
			case 1:
				{
				State = 704;
				Match(Double_Comma);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less_Than() { return GetToken(DassieParser.Less_Than, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater_Than() { return GetToken(DassieParser.Greater_Than, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(DassieParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArglistContext arglist() {
			return GetRuleContext<ArglistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(DassieParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(DassieParser.NewLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(DassieParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Module() { return GetToken(DassieParser.Module, 0); }
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 58, RULE_attribute);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 707;
			Match(Less_Than);
			State = 710;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				{
				State = 708;
				_la = TokenStream.LA(1);
				if ( !(_la==Module || _la==Identifier) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 709;
				Match(Colon);
				}
				break;
			}
			State = 712;
			type_name(0);
			State = 714;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 22)) & ~0x3f) == 0 && ((1L << (_la - 22)) & -4562231909415829733L) != 0) || ((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & 560751064383505L) != 0)) {
				{
				State = 713;
				arglist();
				}
			}

			State = 716;
			Match(Greater_Than);
			State = 720;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 717;
					Match(NewLine);
					}
					} 
				}
				State = 722;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_identifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_atomContext identifier_atom() {
			return GetRuleContext<Identifier_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Bracket() { return GetToken(DassieParser.Open_Bracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generic_parameter_listContext generic_parameter_list() {
			return GetRuleContext<Generic_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Bracket() { return GetToken(DassieParser.Close_Bracket, 0); }
		public Generic_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterGeneric_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitGeneric_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneric_identifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Generic_identifierContext generic_identifier() {
		Generic_identifierContext _localctx = new Generic_identifierContext(Context, State);
		EnterRule(_localctx, 60, RULE_generic_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 723;
			identifier_atom();
			State = 724;
			Match(Open_Bracket);
			State = 725;
			generic_parameter_list();
			State = 726;
			Match(Close_Bracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_access_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Global() { return GetToken(DassieParser.Global, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Local() { return GetToken(DassieParser.Local, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Internal() { return GetToken(DassieParser.Internal, 0); }
		public Field_access_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_access_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterField_access_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitField_access_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField_access_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Field_access_modifierContext field_access_modifier() {
		Field_access_modifierContext _localctx = new Field_access_modifierContext(Context, State);
		EnterRule(_localctx, 62, RULE_field_access_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 728;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 14336L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Field_access_modifierContext field_access_modifier() {
			return GetRuleContext<Field_access_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(DassieParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(DassieParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Var() { return GetToken(DassieParser.Var, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Val() { return GetToken(DassieParser.Val, 0); }
		public Field_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterField_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitField_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Field_declarationContext field_declaration() {
		Field_declarationContext _localctx = new Field_declarationContext(Context, State);
		EnterRule(_localctx, 64, RULE_field_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 730;
			field_access_modifier();
			State = 732;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Var || _la==Val) {
				{
				State = 731;
				_la = TokenStream.LA(1);
				if ( !(_la==Var || _la==Val) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 734;
			Match(Identifier);
			State = 737;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 735;
				Match(Colon);
				State = 736;
				type_name(0);
				}
			}

			State = 739;
			Match(Equals);
			State = 740;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlaceholderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(DassieParser.Dot, 0); }
		public PlaceholderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_placeholder; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterPlaceholder(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitPlaceholder(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlaceholder(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlaceholderContext placeholder() {
		PlaceholderContext _localctx = new PlaceholderContext(Context, State);
		EnterRule(_localctx, 66, RULE_placeholder);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 742;
			Match(Dot);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_access_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Local() { return GetToken(DassieParser.Local, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Global() { return GetToken(DassieParser.Global, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Internal() { return GetToken(DassieParser.Internal, 0); }
		public Type_access_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_access_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterType_access_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitType_access_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_access_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_access_modifierContext type_access_modifier() {
		Type_access_modifierContext _localctx = new Type_access_modifierContext(Context, State);
		EnterRule(_localctx, 68, RULE_type_access_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 744;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 14336L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nested_type_access_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_access_modifierContext type_access_modifier() {
			return GetRuleContext<Type_access_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Protected() { return GetToken(DassieParser.Protected, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Internal() { return GetToken(DassieParser.Internal, 0); }
		public Nested_type_access_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nested_type_access_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterNested_type_access_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitNested_type_access_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNested_type_access_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Nested_type_access_modifierContext nested_type_access_modifier() {
		Nested_type_access_modifierContext _localctx = new Nested_type_access_modifierContext(Context, State);
		EnterRule(_localctx, 70, RULE_nested_type_access_modifier);
		int _la;
		try {
			State = 751;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Global:
			case Local:
			case Internal:
				EnterOuterAlt(_localctx, 1);
				{
				State = 746;
				type_access_modifier();
				}
				break;
			case Protected:
				EnterOuterAlt(_localctx, 2);
				{
				State = 747;
				Match(Protected);
				State = 749;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Internal) {
					{
					State = 748;
					Match(Internal);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_special_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open() { return GetToken(DassieParser.Open, 0); }
		public Type_special_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_special_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterType_special_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitType_special_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_special_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_special_modifierContext type_special_modifier() {
		Type_special_modifierContext _localctx = new Type_special_modifierContext(Context, State);
		EnterRule(_localctx, 72, RULE_type_special_modifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 753;
			Match(Open);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_kindContext type_kind() {
			return GetRuleContext<Type_kindContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(DassieParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_access_modifierContext type_access_modifier() {
			return GetRuleContext<Type_access_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Nested_type_access_modifierContext nested_type_access_modifier() {
			return GetRuleContext<Nested_type_access_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_special_modifierContext type_special_modifier() {
			return GetRuleContext<Type_special_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_parameter_listContext generic_parameter_list() {
			return GetRuleContext<Generic_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_listContext parameter_list() {
			return GetRuleContext<Parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Inheritance_listContext inheritance_list() {
			return GetRuleContext<Inheritance_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_blockContext type_block() {
			return GetRuleContext<Type_blockContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 74, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 758;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Less_Than) {
				{
				{
				State = 755;
				attribute();
				}
				}
				State = 760;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 763;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
			case 1:
				{
				State = 761;
				type_access_modifier();
				}
				break;
			case 2:
				{
				State = 762;
				nested_type_access_modifier();
				}
				break;
			}
			State = 766;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Open) {
				{
				State = 765;
				type_special_modifier();
				}
			}

			State = 768;
			type_kind();
			State = 769;
			Match(Identifier);
			State = 771;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
			case 1:
				{
				State = 770;
				generic_parameter_list();
				}
				break;
			}
			State = 774;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
			case 1:
				{
				State = 773;
				parameter_list();
				}
				break;
			}
			State = 777;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 776;
				inheritance_list();
				}
			}

			State = 781;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Equals) {
				{
				State = 779;
				Match(Equals);
				State = 780;
				type_block();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_parameter_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Bracket() { return GetToken(DassieParser.Open_Bracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generic_parameterContext[] generic_parameter() {
			return GetRuleContexts<Generic_parameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_parameterContext generic_parameter(int i) {
			return GetRuleContext<Generic_parameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Bracket() { return GetToken(DassieParser.Close_Bracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(DassieParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(DassieParser.Comma, i);
		}
		public Generic_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_parameter_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterGeneric_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitGeneric_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneric_parameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Generic_parameter_listContext generic_parameter_list() {
		Generic_parameter_listContext _localctx = new Generic_parameter_listContext(Context, State);
		EnterRule(_localctx, 76, RULE_generic_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 783;
			Match(Open_Bracket);
			State = 784;
			generic_parameter();
			State = 789;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 785;
				Match(Comma);
				State = 786;
				generic_parameter();
				}
				}
				State = 791;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 792;
			Match(Close_Bracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_parameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(DassieParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generic_parameter_attributeContext[] generic_parameter_attribute() {
			return GetRuleContexts<Generic_parameter_attributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_parameter_attributeContext generic_parameter_attribute(int i) {
			return GetRuleContext<Generic_parameter_attributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_parameter_varianceContext generic_parameter_variance() {
			return GetRuleContext<Generic_parameter_varianceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(DassieParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext[] type_name() {
			return GetRuleContexts<Type_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name(int i) {
			return GetRuleContext<Type_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(DassieParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(DassieParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Single_Quote() { return GetToken(DassieParser.Single_Quote, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Quote() { return GetToken(DassieParser.Double_Quote, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_constraintContext parameter_constraint() {
			return GetRuleContext<Parameter_constraintContext>(0);
		}
		public Generic_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterGeneric_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitGeneric_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneric_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Generic_parameterContext generic_parameter() {
		Generic_parameterContext _localctx = new Generic_parameterContext(Context, State);
		EnterRule(_localctx, 78, RULE_generic_parameter);
		int _la;
		try {
			int _alt;
			State = 824;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Ref:
			case Val:
			case Default:
			case Plus:
			case Minus:
			case Equals:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 797;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 68729962496L) != 0)) {
					{
					{
					State = 794;
					generic_parameter_attribute();
					}
					}
					State = 799;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 801;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 96)) & ~0x3f) == 0 && ((1L << (_la - 96)) & 32773L) != 0)) {
					{
					State = 800;
					generic_parameter_variance();
					}
				}

				State = 803;
				Match(Identifier);
				State = 813;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 804;
					Match(Colon);
					State = 805;
					type_name(0);
					State = 810;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,87,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 806;
							Match(Comma);
							State = 807;
							type_name(0);
							}
							} 
						}
						State = 812;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,87,Context);
					}
					}
				}

				}
				break;
			case Single_Quote:
			case Double_Quote:
				EnterOuterAlt(_localctx, 2);
				{
				State = 815;
				_la = TokenStream.LA(1);
				if ( !(_la==Single_Quote || _la==Double_Quote) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 816;
				Match(Identifier);
				State = 819;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 817;
					Match(Colon);
					State = 818;
					type_name(0);
					}
				}

				State = 822;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Open_Brace || _la==Question_Mark) {
					{
					State = 821;
					parameter_constraint();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_parameter_attributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ref() { return GetToken(DassieParser.Ref, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Val() { return GetToken(DassieParser.Val, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(DassieParser.Default, 0); }
		public Generic_parameter_attributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_parameter_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterGeneric_parameter_attribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitGeneric_parameter_attribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneric_parameter_attribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Generic_parameter_attributeContext generic_parameter_attribute() {
		Generic_parameter_attributeContext _localctx = new Generic_parameter_attributeContext(Context, State);
		EnterRule(_localctx, 80, RULE_generic_parameter_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 826;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 68729962496L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_parameter_varianceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(DassieParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(DassieParser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		public Generic_parameter_varianceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_parameter_variance; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterGeneric_parameter_variance(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitGeneric_parameter_variance(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneric_parameter_variance(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Generic_parameter_varianceContext generic_parameter_variance() {
		Generic_parameter_varianceContext _localctx = new Generic_parameter_varianceContext(Context, State);
		EnterRule(_localctx, 82, RULE_generic_parameter_variance);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 828;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 96)) & ~0x3f) == 0 && ((1L << (_la - 96)) & 32773L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inheritance_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(DassieParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext[] type_name() {
			return GetRuleContexts<Type_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name(int i) {
			return GetRuleContext<Type_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(DassieParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(DassieParser.Comma, i);
		}
		public Inheritance_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inheritance_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterInheritance_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitInheritance_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInheritance_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inheritance_listContext inheritance_list() {
		Inheritance_listContext _localctx = new Inheritance_listContext(Context, State);
		EnterRule(_localctx, 84, RULE_inheritance_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 830;
			Match(Colon);
			State = 831;
			type_name(0);
			State = 836;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 832;
				Match(Comma);
				State = 833;
				type_name(0);
				}
				}
				State = 838;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_kindContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Type() { return GetToken(DassieParser.Type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ref() { return GetToken(DassieParser.Ref, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Val() { return GetToken(DassieParser.Val, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation_Mark() { return GetToken(DassieParser.Exclamation_Mark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ampersand() { return GetToken(DassieParser.Ampersand, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Template() { return GetToken(DassieParser.Template, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Module() { return GetToken(DassieParser.Module, 0); }
		public Type_kindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_kind; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterType_kind(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitType_kind(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_kind(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_kindContext type_kind() {
		Type_kindContext _localctx = new Type_kindContext(Context, State);
		EnterRule(_localctx, 86, RULE_type_kind);
		int _la;
		try {
			State = 861;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 840;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Ref) {
					{
					State = 839;
					Match(Ref);
					}
				}

				State = 842;
				Match(Type);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 843;
				Match(Val);
				State = 845;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Exclamation_Mark) {
					{
					State = 844;
					Match(Exclamation_Mark);
					}
				}

				State = 848;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Ampersand) {
					{
					State = 847;
					Match(Ampersand);
					}
				}

				State = 850;
				Match(Type);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 851;
				Match(Val);
				State = 853;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Ampersand) {
					{
					State = 852;
					Match(Ampersand);
					}
				}

				State = 856;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Exclamation_Mark) {
					{
					State = 855;
					Match(Exclamation_Mark);
					}
				}

				State = 858;
				Match(Type);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 859;
				Match(Template);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 860;
				Match(Module);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_access_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Global() { return GetToken(DassieParser.Global, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Local() { return GetToken(DassieParser.Local, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Internal() { return GetToken(DassieParser.Internal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Protected() { return GetToken(DassieParser.Protected, 0); }
		public Member_access_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_access_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterMember_access_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitMember_access_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_access_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_access_modifierContext member_access_modifier() {
		Member_access_modifierContext _localctx = new Member_access_modifierContext(Context, State);
		EnterRule(_localctx, 88, RULE_member_access_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 863;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 47104L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_oop_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Closed() { return GetToken(DassieParser.Closed, 0); }
		public Member_oop_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_oop_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterMember_oop_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitMember_oop_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_oop_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_oop_modifierContext member_oop_modifier() {
		Member_oop_modifierContext _localctx = new Member_oop_modifierContext(Context, State);
		EnterRule(_localctx, 90, RULE_member_oop_modifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 865;
			Match(Closed);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_special_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extern() { return GetToken(DassieParser.Extern, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Inline() { return GetToken(DassieParser.Inline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(DassieParser.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Abstract() { return GetToken(DassieParser.Abstract, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Literal() { return GetToken(DassieParser.Literal, 0); }
		public Member_special_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_special_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterMember_special_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitMember_special_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_special_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_special_modifierContext member_special_modifier() {
		Member_special_modifierContext _localctx = new Member_special_modifierContext(Context, State);
		EnterRule(_localctx, 92, RULE_member_special_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 867;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 137440804864L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_memberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(DassieParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Member_access_modifierContext member_access_modifier() {
			return GetRuleContext<Member_access_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Member_oop_modifierContext member_oop_modifier() {
			return GetRuleContext<Member_oop_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Member_special_modifierContext[] member_special_modifier() {
			return GetRuleContexts<Member_special_modifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Member_special_modifierContext member_special_modifier(int i) {
			return GetRuleContext<Member_special_modifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_parameter_listContext generic_parameter_list() {
			return GetRuleContext<Generic_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_listContext parameter_list() {
			return GetRuleContext<Parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(DassieParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Var() { return GetToken(DassieParser.Var, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Val() { return GetToken(DassieParser.Val, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(DassieParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(DassieParser.NewLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Custom_Operator() { return GetToken(DassieParser.Custom_Operator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Paren() { return GetToken(DassieParser.Open_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Paren() { return GetToken(DassieParser.Close_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Property_or_event_blockContext property_or_event_block() {
			return GetRuleContext<Property_or_event_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public External_blockContext external_block() {
			return GetRuleContext<External_blockContext>(0);
		}
		public Type_memberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_member; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterType_member(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitType_member(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_member(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_memberContext type_member() {
		Type_memberContext _localctx = new Type_memberContext(Context, State);
		EnterRule(_localctx, 94, RULE_type_member);
		int _la;
		try {
			State = 1011;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,129,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 872;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Less_Than) {
					{
					{
					State = 869;
					attribute();
					}
					}
					State = 874;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 876;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 47104L) != 0)) {
					{
					State = 875;
					member_access_modifier();
					}
				}

				State = 879;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Closed) {
					{
					State = 878;
					member_oop_modifier();
					}
				}

				State = 884;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 137440804864L) != 0)) {
					{
					{
					State = 881;
					member_special_modifier();
					}
					}
					State = 886;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 888;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Var || _la==Val) {
					{
					State = 887;
					_la = TokenStream.LA(1);
					if ( !(_la==Var || _la==Val) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 890;
				Match(Identifier);
				State = 892;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,104,Context) ) {
				case 1:
					{
					State = 891;
					generic_parameter_list();
					}
					break;
				}
				State = 895;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,105,Context) ) {
				case 1:
					{
					State = 894;
					parameter_list();
					}
					break;
				}
				State = 899;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 897;
					Match(Colon);
					State = 898;
					type_name(0);
					}
				}

				State = 909;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Equals) {
					{
					State = 901;
					Match(Equals);
					State = 905;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NewLine) {
						{
						{
						State = 902;
						Match(NewLine);
						}
						}
						State = 907;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 908;
					expression(0);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 914;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Less_Than) {
					{
					{
					State = 911;
					attribute();
					}
					}
					State = 916;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 918;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 47104L) != 0)) {
					{
					State = 917;
					member_access_modifier();
					}
				}

				State = 921;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Closed) {
					{
					State = 920;
					member_oop_modifier();
					}
				}

				State = 926;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 137440804864L) != 0)) {
					{
					{
					State = 923;
					member_special_modifier();
					}
					}
					State = 928;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 930;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Var || _la==Val) {
					{
					State = 929;
					_la = TokenStream.LA(1);
					if ( !(_la==Var || _la==Val) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 932;
				Match(Identifier);
				State = 934;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Open_Bracket) {
					{
					State = 933;
					generic_parameter_list();
					}
				}

				State = 936;
				Match(Colon);
				State = 937;
				type_name(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 941;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Less_Than) {
					{
					{
					State = 938;
					attribute();
					}
					}
					State = 943;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 945;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 47104L) != 0)) {
					{
					State = 944;
					member_access_modifier();
					}
				}

				State = 948;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Closed) {
					{
					State = 947;
					member_oop_modifier();
					}
				}

				State = 953;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 137440804864L) != 0)) {
					{
					{
					State = 950;
					member_special_modifier();
					}
					}
					State = 955;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 960;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Custom_Operator:
					{
					State = 956;
					Match(Custom_Operator);
					}
					break;
				case Open_Paren:
					{
					{
					State = 957;
					Match(Open_Paren);
					State = 958;
					Match(Custom_Operator);
					State = 959;
					Match(Close_Paren);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 962;
				parameter_list();
				State = 965;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 963;
					Match(Colon);
					State = 964;
					type_name(0);
					}
				}

				State = 967;
				Match(Equals);
				State = 971;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NewLine) {
					{
					{
					State = 968;
					Match(NewLine);
					}
					}
					State = 973;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 974;
				expression(0);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 979;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Less_Than) {
					{
					{
					State = 976;
					attribute();
					}
					}
					State = 981;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 983;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 47104L) != 0)) {
					{
					State = 982;
					member_access_modifier();
					}
				}

				State = 986;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Closed) {
					{
					State = 985;
					member_oop_modifier();
					}
				}

				State = 991;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 137440804864L) != 0)) {
					{
					{
					State = 988;
					member_special_modifier();
					}
					}
					State = 993;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 994;
				Match(Identifier);
				State = 996;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Open_Bracket) {
					{
					State = 995;
					generic_parameter_list();
					}
				}

				State = 1000;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 998;
					Match(Colon);
					State = 999;
					type_name(0);
					}
				}

				State = 1002;
				Match(Equals);
				State = 1006;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NewLine) {
					{
					{
					State = 1003;
					Match(NewLine);
					}
					}
					State = 1008;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1009;
				property_or_event_block();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1010;
				external_block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Access_modifier_member_groupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Brace() { return GetToken(DassieParser.Open_Brace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Brace() { return GetToken(DassieParser.Close_Brace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Member_access_modifierContext member_access_modifier() {
			return GetRuleContext<Member_access_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Member_oop_modifierContext member_oop_modifier() {
			return GetRuleContext<Member_oop_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Member_special_modifierContext[] member_special_modifier() {
			return GetRuleContexts<Member_special_modifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Member_special_modifierContext member_special_modifier(int i) {
			return GetRuleContext<Member_special_modifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(DassieParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(DassieParser.NewLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_memberContext[] type_member() {
			return GetRuleContexts<Type_memberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_memberContext type_member(int i) {
			return GetRuleContext<Type_memberContext>(i);
		}
		public Access_modifier_member_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_access_modifier_member_group; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterAccess_modifier_member_group(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitAccess_modifier_member_group(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccess_modifier_member_group(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Access_modifier_member_groupContext access_modifier_member_group() {
		Access_modifier_member_groupContext _localctx = new Access_modifier_member_groupContext(Context, State);
		EnterRule(_localctx, 96, RULE_access_modifier_member_group);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1016;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Global:
			case Local:
			case Internal:
			case Protected:
				{
				State = 1013;
				member_access_modifier();
				}
				break;
			case Closed:
				{
				State = 1014;
				member_oop_modifier();
				}
				break;
			case Static:
			case Abstract:
			case Extern:
			case Inline:
			case Literal:
				{
				State = 1015;
				member_special_modifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1021;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 137440804864L) != 0)) {
				{
				{
				State = 1018;
				member_special_modifier();
				}
				}
				State = 1023;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1024;
			Match(Equals);
			State = 1025;
			Match(Open_Brace);
			State = 1030;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 412331472900L) != 0) || ((((_la - 90)) & ~0x3f) == 0 && ((1L << (_la - 90)) & 35321811042305L) != 0)) {
				{
				State = 1028;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NewLine:
					{
					State = 1026;
					Match(NewLine);
					}
					break;
				case Global:
				case Local:
				case Internal:
				case Static:
				case Protected:
				case Closed:
				case Abstract:
				case Extern:
				case Inline:
				case Var:
				case Val:
				case Literal:
				case Open_Paren:
				case Less_Than:
				case Identifier:
				case Custom_Operator:
					{
					State = 1027;
					type_member();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 1032;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1033;
			Match(Close_Brace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Paren() { return GetToken(DassieParser.Open_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Paren() { return GetToken(DassieParser.Close_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(DassieParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(DassieParser.NewLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(DassieParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(DassieParser.Comma, i);
		}
		public Parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterParameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitParameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_listContext parameter_list() {
		Parameter_listContext _localctx = new Parameter_listContext(Context, State);
		EnterRule(_localctx, 98, RULE_parameter_list);
		int _la;
		try {
			int _alt;
			State = 1085;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Open_Paren:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1035;
				Match(Open_Paren);
				State = 1039;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,134,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1036;
						Match(NewLine);
						}
						} 
					}
					State = 1041;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,134,Context);
				}
				State = 1056;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Var || _la==Val || ((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & 4398046511139L) != 0)) {
					{
					State = 1042;
					parameter();
					State = 1053;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==Comma) {
						{
						{
						State = 1043;
						Match(Comma);
						State = 1047;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==NewLine) {
							{
							{
							State = 1044;
							Match(NewLine);
							}
							}
							State = 1049;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1050;
						parameter();
						}
						}
						State = 1055;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 1061;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NewLine) {
					{
					{
					State = 1058;
					Match(NewLine);
					}
					}
					State = 1063;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1064;
				Match(Close_Paren);
				}
				break;
			case Var:
			case Val:
			case Ampersand_Greater:
			case Less_Ampersand:
			case Less_Than:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1065;
				parameter();
				State = 1076;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 1066;
					Match(Comma);
					State = 1070;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NewLine) {
						{
						{
						State = 1067;
						Match(NewLine);
						}
						}
						State = 1072;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1073;
					parameter();
					}
					}
					State = 1078;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1082;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,141,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1079;
						Match(NewLine);
						}
						} 
					}
					State = 1084;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,141,Context);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ampersand_Greater() { return GetToken(DassieParser.Ampersand_Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less_Ampersand() { return GetToken(DassieParser.Less_Ampersand, 0); }
		public Parameter_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterParameter_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitParameter_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_modifierContext parameter_modifier() {
		Parameter_modifierContext _localctx = new Parameter_modifierContext(Context, State);
		EnterRule(_localctx, 100, RULE_parameter_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1087;
			_la = TokenStream.LA(1);
			if ( !(_la==Ampersand_Greater || _la==Less_Ampersand) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(DassieParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_modifierContext parameter_modifier() {
			return GetRuleContext<Parameter_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Dot() { return GetToken(DassieParser.Double_Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(DassieParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_constraintContext parameter_constraint() {
			return GetRuleContext<Parameter_constraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Val() { return GetToken(DassieParser.Val, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Var() { return GetToken(DassieParser.Var, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 102, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1090;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Less_Than) {
				{
				State = 1089;
				attribute();
				}
			}

			State = 1093;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Var || _la==Val) {
				{
				State = 1092;
				_la = TokenStream.LA(1);
				if ( !(_la==Var || _la==Val) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1096;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Ampersand_Greater || _la==Less_Ampersand) {
				{
				State = 1095;
				parameter_modifier();
				}
			}

			State = 1098;
			Match(Identifier);
			State = 1100;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,146,Context) ) {
			case 1:
				{
				State = 1099;
				Match(Double_Dot);
				}
				break;
			}
			State = 1104;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,147,Context) ) {
			case 1:
				{
				State = 1102;
				Match(Colon);
				State = 1103;
				type_name(0);
				}
				break;
			}
			State = 1107;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,148,Context) ) {
			case 1:
				{
				State = 1106;
				parameter_constraint();
				}
				break;
			}
			State = 1111;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,149,Context) ) {
			case 1:
				{
				State = 1109;
				Match(Equals);
				State = 1110;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_constraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Brace() { return GetToken(DassieParser.Open_Brace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Brace() { return GetToken(DassieParser.Close_Brace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Question_Mark() { return GetToken(DassieParser.Question_Mark, 0); }
		public Parameter_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterParameter_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitParameter_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_constraintContext parameter_constraint() {
		Parameter_constraintContext _localctx = new Parameter_constraintContext(Context, State);
		EnterRule(_localctx, 104, RULE_parameter_constraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1114;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Question_Mark) {
				{
				State = 1113;
				Match(Question_Mark);
				}
			}

			State = 1116;
			Match(Open_Brace);
			State = 1117;
			expression(0);
			State = 1118;
			Match(Close_Brace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Brace() { return GetToken(DassieParser.Open_Brace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Brace() { return GetToken(DassieParser.Close_Brace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_memberContext[] type_member() {
			return GetRuleContexts<Type_memberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_memberContext type_member(int i) {
			return GetRuleContext<Type_memberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(DassieParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(DassieParser.NewLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Access_modifier_member_groupContext[] access_modifier_member_group() {
			return GetRuleContexts<Access_modifier_member_groupContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Access_modifier_member_groupContext access_modifier_member_group(int i) {
			return GetRuleContext<Access_modifier_member_groupContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Type_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterType_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitType_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_blockContext type_block() {
		Type_blockContext _localctx = new Type_blockContext(Context, State);
		EnterRule(_localctx, 106, RULE_type_block);
		int _la;
		try {
			State = 1132;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Open_Brace:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1120;
				Match(Open_Brace);
				State = 1127;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 412333637380L) != 0) || ((((_la - 90)) & ~0x3f) == 0 && ((1L << (_la - 90)) & 35321811042305L) != 0)) {
					{
					State = 1125;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,151,Context) ) {
					case 1:
						{
						State = 1121;
						type_member();
						}
						break;
					case 2:
						{
						State = 1122;
						type();
						}
						break;
					case 3:
						{
						State = 1123;
						Match(NewLine);
						}
						break;
					case 4:
						{
						State = 1124;
						access_modifier_member_group();
						}
						break;
					}
					}
					State = 1129;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1130;
				Match(Close_Brace);
				}
				break;
			case Open_Paren:
			case Less_Than:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1131;
				type_name(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Try_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Try() { return GetToken(DassieParser.Try, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Try_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_try_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterTry_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitTry_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTry_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Try_branchContext try_branch() {
		Try_branchContext _localctx = new Try_branchContext(Context, State);
		EnterRule(_localctx, 108, RULE_try_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1134;
			Match(Try);
			State = 1135;
			Match(Equals);
			State = 1136;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Catch_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Catch() { return GetToken(DassieParser.Catch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(DassieParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(DassieParser.Colon, 0); }
		public Catch_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catch_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterCatch_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitCatch_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatch_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Catch_branchContext catch_branch() {
		Catch_branchContext _localctx = new Catch_branchContext(Context, State);
		EnterRule(_localctx, 110, RULE_catch_branch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1138;
			Match(Catch);
			State = 1144;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Open_Paren || _la==Less_Than || _la==Identifier) {
				{
				State = 1141;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,154,Context) ) {
				case 1:
					{
					State = 1139;
					Match(Identifier);
					State = 1140;
					Match(Colon);
					}
					break;
				}
				State = 1143;
				type_name(0);
				}
			}

			State = 1146;
			Match(Equals);
			State = 1147;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Finally_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Finally() { return GetToken(DassieParser.Finally, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Finally_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finally_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterFinally_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitFinally_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinally_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Finally_branchContext finally_branch() {
		Finally_branchContext _localctx = new Finally_branchContext(Context, State);
		EnterRule(_localctx, 112, RULE_finally_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1149;
			Match(Finally);
			State = 1150;
			Match(Equals);
			State = 1151;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fault_branchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Fault() { return GetToken(DassieParser.Fault, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Fault_branchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fault_branch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterFault_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitFault_branch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFault_branch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fault_branchContext fault_branch() {
		Fault_branchContext _localctx = new Fault_branchContext(Context, State);
		EnterRule(_localctx, 114, RULE_fault_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1153;
			Match(Fault);
			State = 1154;
			Match(Equals);
			State = 1155;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_arg_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Bracket() { return GetToken(DassieParser.Open_Bracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generic_argumentContext[] generic_argument() {
			return GetRuleContexts<Generic_argumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_argumentContext generic_argument(int i) {
			return GetRuleContext<Generic_argumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Bracket() { return GetToken(DassieParser.Close_Bracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(DassieParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(DassieParser.Comma, i);
		}
		public Generic_arg_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_arg_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterGeneric_arg_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitGeneric_arg_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneric_arg_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Generic_arg_listContext generic_arg_list() {
		Generic_arg_listContext _localctx = new Generic_arg_listContext(Context, State);
		EnterRule(_localctx, 116, RULE_generic_arg_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1157;
			Match(Open_Bracket);
			State = 1158;
			generic_argument();
			State = 1163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 1159;
				Match(Comma);
				State = 1160;
				generic_argument();
				}
				}
				State = 1165;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1166;
			Match(Close_Bracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_argumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Generic_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterGeneric_argument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitGeneric_argument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneric_argument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Generic_argumentContext generic_argument() {
		Generic_argumentContext _localctx = new Generic_argumentContext(Context, State);
		EnterRule(_localctx, 118, RULE_generic_argument);
		try {
			State = 1170;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,157,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1168;
				type_name(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1169;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus_Equals() { return GetToken(DassieParser.Plus_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus_Equals() { return GetToken(DassieParser.Minus_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Asterisk_Equals() { return GetToken(DassieParser.Asterisk_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Slash_Equals() { return GetToken(DassieParser.Slash_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Asterisk_Equals() { return GetToken(DassieParser.Double_Asterisk_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Percent_Equals() { return GetToken(DassieParser.Percent_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Percent_Equals() { return GetToken(DassieParser.Double_Percent_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tilde_Equals() { return GetToken(DassieParser.Tilde_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Less_Than_Equals() { return GetToken(DassieParser.Double_Less_Than_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Greater_Than_Equals() { return GetToken(DassieParser.Double_Greater_Than_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bar_Equals() { return GetToken(DassieParser.Bar_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ampersand_Equals() { return GetToken(DassieParser.Ampersand_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Bar_Equals() { return GetToken(DassieParser.Double_Bar_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Ampersand_Equals() { return GetToken(DassieParser.Double_Ampersand_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Caret_Equals() { return GetToken(DassieParser.Caret_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot_Equals() { return GetToken(DassieParser.Dot_Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double_Question_Mark_Equals() { return GetToken(DassieParser.Double_Question_Mark_Equals, 0); }
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterAssignment_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitAssignment_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_operatorContext assignment_operator() {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(Context, State);
		EnterRule(_localctx, 120, RULE_assignment_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1172;
			_la = TokenStream.LA(1);
			if ( !(_la==Dot_Equals || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 23769607467041281L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_pointer_parameter_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Paren() { return GetToken(DassieParser.Open_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext[] type_name() {
			return GetRuleContexts<Type_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name(int i) {
			return GetRuleContext<Type_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Paren() { return GetToken(DassieParser.Close_Paren, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(DassieParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(DassieParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(DassieParser.Comma, i);
		}
		public Function_pointer_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_pointer_parameter_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterFunction_pointer_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitFunction_pointer_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_pointer_parameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_pointer_parameter_listContext function_pointer_parameter_list() {
		Function_pointer_parameter_listContext _localctx = new Function_pointer_parameter_listContext(Context, State);
		EnterRule(_localctx, 122, RULE_function_pointer_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1185;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,159,Context) ) {
			case 1:
				{
				State = 1174;
				Match(Open_Paren);
				State = 1175;
				type_name(0);
				State = 1180;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 1176;
					Match(Comma);
					State = 1177;
					type_name(0);
					}
					}
					State = 1182;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1183;
				Match(Close_Paren);
				}
				break;
			}
			State = 1189;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 1187;
				Match(Colon);
				State = 1188;
				type_name(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Match_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dollar_Sign() { return GetToken(DassieParser.Dollar_Sign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Match_blockContext match_block() {
			return GetRuleContext<Match_blockContext>(0);
		}
		public Match_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_match_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterMatch_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitMatch_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatch_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Match_exprContext match_expr() {
		Match_exprContext _localctx = new Match_exprContext(Context, State);
		EnterRule(_localctx, 124, RULE_match_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1191;
			Match(Dollar_Sign);
			State = 1192;
			expression(0);
			State = 1193;
			Match(Equals);
			State = 1194;
			match_block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Match_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Brace() { return GetToken(DassieParser.Open_Brace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Brace() { return GetToken(DassieParser.Close_Brace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(DassieParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(DassieParser.NewLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Match_first_caseContext match_first_case() {
			return GetRuleContext<Match_first_caseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Match_alternative_caseContext[] match_alternative_case() {
			return GetRuleContexts<Match_alternative_caseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Match_alternative_caseContext match_alternative_case(int i) {
			return GetRuleContext<Match_alternative_caseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Match_default_caseContext match_default_case() {
			return GetRuleContext<Match_default_caseContext>(0);
		}
		public Match_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_match_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterMatch_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitMatch_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatch_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Match_blockContext match_block() {
		Match_blockContext _localctx = new Match_blockContext(Context, State);
		EnterRule(_localctx, 126, RULE_match_block);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1196;
			Match(Open_Brace);
			State = 1200;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,161,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1197;
					Match(NewLine);
					}
					} 
				}
				State = 1202;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,161,Context);
			}
			State = 1210;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Question_Mark) {
				{
				State = 1203;
				match_first_case();
				State = 1207;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,162,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1204;
						Match(NewLine);
						}
						} 
					}
					State = 1209;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,162,Context);
				}
				}
			}

			State = 1221;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,165,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1212;
					match_alternative_case();
					State = 1216;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,164,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 1213;
							Match(NewLine);
							}
							} 
						}
						State = 1218;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,164,Context);
					}
					}
					} 
				}
				State = 1223;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,165,Context);
			}
			State = 1225;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 1224;
				match_default_case();
				}
			}

			State = 1230;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NewLine) {
				{
				{
				State = 1227;
				Match(NewLine);
				}
				}
				State = 1232;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1233;
			Match(Close_Brace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Match_first_caseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Question_Mark() { return GetToken(DassieParser.Question_Mark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Match_case_expressionContext match_case_expression() {
			return GetRuleContext<Match_case_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Match_first_caseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_match_first_case; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterMatch_first_case(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitMatch_first_case(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatch_first_case(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Match_first_caseContext match_first_case() {
		Match_first_caseContext _localctx = new Match_first_caseContext(Context, State);
		EnterRule(_localctx, 128, RULE_match_first_case);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1235;
			Match(Question_Mark);
			State = 1236;
			match_case_expression();
			State = 1237;
			Match(Equals);
			State = 1238;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Match_alternative_caseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(DassieParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Match_case_expressionContext match_case_expression() {
			return GetRuleContext<Match_case_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Match_alternative_caseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_match_alternative_case; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterMatch_alternative_case(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitMatch_alternative_case(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatch_alternative_case(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Match_alternative_caseContext match_alternative_case() {
		Match_alternative_caseContext _localctx = new Match_alternative_caseContext(Context, State);
		EnterRule(_localctx, 130, RULE_match_alternative_case);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1240;
			Match(Colon);
			State = 1241;
			match_case_expression();
			State = 1242;
			Match(Equals);
			State = 1243;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Match_default_caseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(DassieParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Match_default_caseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_match_default_case; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterMatch_default_case(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitMatch_default_case(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatch_default_case(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Match_default_caseContext match_default_case() {
		Match_default_caseContext _localctx = new Match_default_caseContext(Context, State);
		EnterRule(_localctx, 132, RULE_match_default_case);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1245;
			Match(Colon);
			State = 1246;
			Match(Equals);
			State = 1247;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Match_case_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Match_case_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_match_case_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterMatch_case_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitMatch_case_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatch_case_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Match_case_expressionContext match_case_expression() {
		Match_case_expressionContext _localctx = new Match_case_expressionContext(Context, State);
		EnterRule(_localctx, 134, RULE_match_case_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1249;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_functionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(DassieParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_parameter_listContext generic_parameter_list() {
			return GetRuleContext<Generic_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_listContext parameter_list() {
			return GetRuleContext<Parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(DassieParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(DassieParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(DassieParser.NewLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Var() { return GetToken(DassieParser.Var, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Val() { return GetToken(DassieParser.Val, 0); }
		public Local_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterLocal_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitLocal_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_functionContext local_function() {
		Local_functionContext _localctx = new Local_functionContext(Context, State);
		EnterRule(_localctx, 136, RULE_local_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1252;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Var || _la==Val) {
				{
				State = 1251;
				_la = TokenStream.LA(1);
				if ( !(_la==Var || _la==Val) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1254;
			Match(Identifier);
			State = 1256;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Open_Bracket) {
				{
				State = 1255;
				generic_parameter_list();
				}
			}

			State = 1259;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 274890489856L) != 0) || ((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & 4398046511139L) != 0)) {
				{
				State = 1258;
				parameter_list();
				}
			}

			State = 1263;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 1261;
				Match(Colon);
				State = 1262;
				type_name(0);
				}
			}

			State = 1265;
			Match(Equals);
			State = 1269;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NewLine) {
				{
				{
				State = 1266;
				Match(NewLine);
				}
				}
				State = 1271;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1272;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_handlerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Add_Handler() { return GetToken(DassieParser.Add_Handler, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Add_handlerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_handler; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterAdd_handler(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitAdd_handler(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd_handler(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Add_handlerContext add_handler() {
		Add_handlerContext _localctx = new Add_handlerContext(Context, State);
		EnterRule(_localctx, 138, RULE_add_handler);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1274;
			Match(Add_Handler);
			State = 1275;
			Match(Equals);
			State = 1276;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Remove_handlerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Remove_Handler() { return GetToken(DassieParser.Remove_Handler, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Remove_handlerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_remove_handler; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterRemove_handler(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitRemove_handler(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemove_handler(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Remove_handlerContext remove_handler() {
		Remove_handlerContext _localctx = new Remove_handlerContext(Context, State);
		EnterRule(_localctx, 140, RULE_remove_handler);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1278;
			Match(Remove_Handler);
			State = 1279;
			Match(Equals);
			State = 1280;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_getterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Get() { return GetToken(DassieParser.Get, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Property_getterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_getter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterProperty_getter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitProperty_getter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty_getter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Property_getterContext property_getter() {
		Property_getterContext _localctx = new Property_getterContext(Context, State);
		EnterRule(_localctx, 142, RULE_property_getter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1282;
			Match(Get);
			State = 1283;
			Match(Equals);
			State = 1284;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_setterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Set() { return GetToken(DassieParser.Set, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Property_setterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_setter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterProperty_setter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitProperty_setter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty_setter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Property_setterContext property_setter() {
		Property_setterContext _localctx = new Property_setterContext(Context, State);
		EnterRule(_localctx, 144, RULE_property_setter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1286;
			Match(Set);
			State = 1287;
			Match(Equals);
			State = 1288;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_or_event_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Brace() { return GetToken(DassieParser.Open_Brace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Brace() { return GetToken(DassieParser.Close_Brace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(DassieParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(DassieParser.NewLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Add_handlerContext[] add_handler() {
			return GetRuleContexts<Add_handlerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Add_handlerContext add_handler(int i) {
			return GetRuleContext<Add_handlerContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Remove_handlerContext[] remove_handler() {
			return GetRuleContexts<Remove_handlerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Remove_handlerContext remove_handler(int i) {
			return GetRuleContext<Remove_handlerContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Property_getterContext[] property_getter() {
			return GetRuleContexts<Property_getterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Property_getterContext property_getter(int i) {
			return GetRuleContext<Property_getterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Property_setterContext[] property_setter() {
			return GetRuleContexts<Property_setterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Property_setterContext property_setter(int i) {
			return GetRuleContext<Property_setterContext>(i);
		}
		public Property_or_event_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_or_event_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterProperty_or_event_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitProperty_or_event_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty_or_event_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Property_or_event_blockContext property_or_event_block() {
		Property_or_event_blockContext _localctx = new Property_or_event_blockContext(Context, State);
		EnterRule(_localctx, 146, RULE_property_or_event_block);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1290;
			Match(Open_Brace);
			State = 1294;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,173,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1291;
					Match(NewLine);
					}
					} 
				}
				State = 1296;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,173,Context);
			}
			State = 1311;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,178,Context) ) {
			case 1:
				{
				State = 1300;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 1300;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case Add_Handler:
							{
							State = 1297;
							add_handler();
							}
							break;
						case Remove_Handler:
							{
							State = 1298;
							remove_handler();
							}
							break;
						case NewLine:
							{
							State = 1299;
							Match(NewLine);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1302;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,175,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				{
				State = 1307;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 1307;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case Get:
							{
							State = 1304;
							property_getter();
							}
							break;
						case Set:
							{
							State = 1305;
							property_setter();
							}
							break;
						case NewLine:
							{
							State = 1306;
							Match(NewLine);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1309;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,177,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
			State = 1316;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NewLine) {
				{
				{
				State = 1313;
				Match(NewLine);
				}
				}
				State = 1318;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1319;
			Match(Close_Brace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class External_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extern() { return GetToken(DassieParser.Extern, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String_Literal() { return GetToken(DassieParser.String_Literal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DassieParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_Brace() { return GetToken(DassieParser.Open_Brace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_Brace() { return GetToken(DassieParser.Close_Brace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_memberContext[] type_member() {
			return GetRuleContexts<Type_memberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_memberContext type_member(int i) {
			return GetRuleContext<Type_memberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(DassieParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(DassieParser.NewLine, i);
		}
		public External_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_external_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.EnterExternal_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDassieParserListener typedListener = listener as IDassieParserListener;
			if (typedListener != null) typedListener.ExitExternal_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDassieParserVisitor<TResult> typedVisitor = visitor as IDassieParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternal_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public External_blockContext external_block() {
		External_blockContext _localctx = new External_blockContext(Context, State);
		EnterRule(_localctx, 148, RULE_external_block);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1321;
			Match(Extern);
			State = 1322;
			Match(String_Literal);
			State = 1323;
			Match(Equals);
			State = 1324;
			Match(Open_Brace);
			State = 1334;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,181,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1328;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NewLine) {
						{
						{
						State = 1325;
						Match(NewLine);
						}
						}
						State = 1330;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1331;
					type_member();
					}
					} 
				}
				State = 1336;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,181,Context);
			}
			State = 1340;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NewLine) {
				{
				{
				State = 1337;
				Match(NewLine);
				}
				}
				State = 1342;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1343;
			Match(Close_Brace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 7: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 19: return type_name_sempred((Type_nameContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 62);
		case 1: return Precpred(Context, 60);
		case 2: return Precpred(Context, 59);
		case 3: return Precpred(Context, 57);
		case 4: return Precpred(Context, 56);
		case 5: return Precpred(Context, 55);
		case 6: return Precpred(Context, 54);
		case 7: return Precpred(Context, 53);
		case 8: return Precpred(Context, 52);
		case 9: return Precpred(Context, 51);
		case 10: return Precpred(Context, 50);
		case 11: return Precpred(Context, 49);
		case 12: return Precpred(Context, 48);
		case 13: return Precpred(Context, 46);
		case 14: return Precpred(Context, 44);
		case 15: return Precpred(Context, 42);
		case 16: return Precpred(Context, 38);
		case 17: return Precpred(Context, 33);
		case 18: return Precpred(Context, 31);
		case 19: return Precpred(Context, 30);
		case 20: return Precpred(Context, 29);
		case 21: return Precpred(Context, 2);
		case 22: return Precpred(Context, 47);
		case 23: return Precpred(Context, 45);
		case 24: return Precpred(Context, 43);
		case 25: return Precpred(Context, 41);
		case 26: return Precpred(Context, 40);
		case 27: return Precpred(Context, 28);
		case 28: return Precpred(Context, 22);
		case 29: return Precpred(Context, 20);
		case 30: return Precpred(Context, 7);
		case 31: return Precpred(Context, 6);
		case 32: return Precpred(Context, 3);
		}
		return true;
	}
	private bool type_name_sempred(Type_nameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 33: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,135,1346,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,1,0,1,0,1,0,5,0,154,8,0,10,0,12,
		0,157,9,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,5,1,167,8,1,10,1,12,1,170,9,
		1,1,2,1,2,1,2,4,2,175,8,2,11,2,12,2,176,1,3,3,3,180,8,3,1,3,1,3,1,3,1,
		3,5,3,186,8,3,10,3,12,3,189,9,3,1,3,5,3,192,8,3,10,3,12,3,195,9,3,1,4,
		1,4,1,4,1,5,1,5,1,5,5,5,203,8,5,10,5,12,5,206,9,5,1,6,1,6,1,6,5,6,211,
		8,6,10,6,12,6,214,9,6,1,6,3,6,217,8,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,
		1,7,1,7,1,7,1,7,3,7,231,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
		7,1,7,3,7,245,8,7,1,7,1,7,1,7,3,7,250,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
		1,7,1,7,4,7,261,8,7,11,7,12,7,262,1,7,1,7,1,7,1,7,5,7,269,8,7,10,7,12,
		7,272,9,7,1,7,5,7,275,8,7,10,7,12,7,278,9,7,1,7,5,7,281,8,7,10,7,12,7,
		284,9,7,1,7,3,7,287,8,7,1,7,1,7,5,7,291,8,7,10,7,12,7,294,9,7,1,7,5,7,
		297,8,7,10,7,12,7,300,9,7,1,7,5,7,303,8,7,10,7,12,7,306,9,7,1,7,3,7,309,
		8,7,1,7,1,7,3,7,313,8,7,1,7,3,7,316,8,7,1,7,1,7,1,7,3,7,321,8,7,1,7,3,
		7,324,8,7,1,7,3,7,327,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
		1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,5,7,348,8,7,10,7,12,7,351,9,7,1,7,3,7,
		354,8,7,1,7,3,7,357,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
		7,5,7,371,8,7,10,7,12,7,374,9,7,3,7,376,8,7,1,7,1,7,1,7,1,7,1,7,5,7,383,
		8,7,10,7,12,7,386,9,7,3,7,388,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
		1,7,1,7,1,7,1,7,1,7,5,7,404,8,7,10,7,12,7,407,9,7,3,7,409,8,7,1,7,1,7,
		1,7,1,7,1,7,3,7,416,8,7,1,7,3,7,419,8,7,1,7,1,7,1,7,1,7,5,7,425,8,7,10,
		7,12,7,428,9,7,1,7,3,7,431,8,7,1,7,1,7,3,7,435,8,7,1,7,1,7,1,7,1,7,1,7,
		1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
		7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
		1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
		7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
		1,7,1,7,4,7,514,8,7,11,7,12,7,515,1,7,1,7,1,7,4,7,521,8,7,11,7,12,7,522,
		1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
		7,1,7,4,7,544,8,7,11,7,12,7,545,1,7,3,7,549,8,7,1,7,3,7,552,8,7,5,7,554,
		8,7,10,7,12,7,557,9,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,568,8,8,
		1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,
		14,3,14,585,8,14,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,18,5,18,595,8,18,
		10,18,12,18,598,9,18,1,18,1,18,5,18,602,8,18,10,18,12,18,605,9,18,1,18,
		3,18,608,8,18,1,19,1,19,1,19,1,19,1,19,1,19,4,19,616,8,19,11,19,12,19,
		617,1,19,1,19,1,19,1,19,1,19,1,19,4,19,626,8,19,11,19,12,19,627,1,19,1,
		19,1,19,3,19,633,8,19,1,19,1,19,5,19,637,8,19,10,19,12,19,640,9,19,1,20,
		1,20,3,20,644,8,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,3,21,653,8,21,1,
		22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,3,23,663,8,23,1,24,1,24,1,24,1,24,
		3,24,669,8,24,1,25,1,25,1,25,1,25,1,25,3,25,676,8,25,1,26,1,26,1,26,1,
		26,1,26,3,26,683,8,26,1,27,1,27,1,27,1,28,1,28,3,28,690,8,28,1,28,1,28,
		1,28,1,28,1,28,3,28,697,8,28,1,28,5,28,700,8,28,10,28,12,28,703,9,28,1,
		28,3,28,706,8,28,1,29,1,29,1,29,3,29,711,8,29,1,29,1,29,3,29,715,8,29,
		1,29,1,29,5,29,719,8,29,10,29,12,29,722,9,29,1,30,1,30,1,30,1,30,1,30,
		1,31,1,31,1,32,1,32,3,32,733,8,32,1,32,1,32,1,32,3,32,738,8,32,1,32,1,
		32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,35,3,35,750,8,35,3,35,752,8,35,
		1,36,1,36,1,37,5,37,757,8,37,10,37,12,37,760,9,37,1,37,1,37,3,37,764,8,
		37,1,37,3,37,767,8,37,1,37,1,37,1,37,3,37,772,8,37,1,37,3,37,775,8,37,
		1,37,3,37,778,8,37,1,37,1,37,3,37,782,8,37,1,38,1,38,1,38,1,38,5,38,788,
		8,38,10,38,12,38,791,9,38,1,38,1,38,1,39,5,39,796,8,39,10,39,12,39,799,
		9,39,1,39,3,39,802,8,39,1,39,1,39,1,39,1,39,1,39,5,39,809,8,39,10,39,12,
		39,812,9,39,3,39,814,8,39,1,39,1,39,1,39,1,39,3,39,820,8,39,1,39,3,39,
		823,8,39,3,39,825,8,39,1,40,1,40,1,41,1,41,1,42,1,42,1,42,1,42,5,42,835,
		8,42,10,42,12,42,838,9,42,1,43,3,43,841,8,43,1,43,1,43,1,43,3,43,846,8,
		43,1,43,3,43,849,8,43,1,43,1,43,1,43,3,43,854,8,43,1,43,3,43,857,8,43,
		1,43,1,43,1,43,3,43,862,8,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,5,47,871,
		8,47,10,47,12,47,874,9,47,1,47,3,47,877,8,47,1,47,3,47,880,8,47,1,47,5,
		47,883,8,47,10,47,12,47,886,9,47,1,47,3,47,889,8,47,1,47,1,47,3,47,893,
		8,47,1,47,3,47,896,8,47,1,47,1,47,3,47,900,8,47,1,47,1,47,5,47,904,8,47,
		10,47,12,47,907,9,47,1,47,3,47,910,8,47,1,47,5,47,913,8,47,10,47,12,47,
		916,9,47,1,47,3,47,919,8,47,1,47,3,47,922,8,47,1,47,5,47,925,8,47,10,47,
		12,47,928,9,47,1,47,3,47,931,8,47,1,47,1,47,3,47,935,8,47,1,47,1,47,1,
		47,5,47,940,8,47,10,47,12,47,943,9,47,1,47,3,47,946,8,47,1,47,3,47,949,
		8,47,1,47,5,47,952,8,47,10,47,12,47,955,9,47,1,47,1,47,1,47,1,47,3,47,
		961,8,47,1,47,1,47,1,47,3,47,966,8,47,1,47,1,47,5,47,970,8,47,10,47,12,
		47,973,9,47,1,47,1,47,1,47,5,47,978,8,47,10,47,12,47,981,9,47,1,47,3,47,
		984,8,47,1,47,3,47,987,8,47,1,47,5,47,990,8,47,10,47,12,47,993,9,47,1,
		47,1,47,3,47,997,8,47,1,47,1,47,3,47,1001,8,47,1,47,1,47,5,47,1005,8,47,
		10,47,12,47,1008,9,47,1,47,1,47,3,47,1012,8,47,1,48,1,48,1,48,3,48,1017,
		8,48,1,48,5,48,1020,8,48,10,48,12,48,1023,9,48,1,48,1,48,1,48,1,48,5,48,
		1029,8,48,10,48,12,48,1032,9,48,1,48,1,48,1,49,1,49,5,49,1038,8,49,10,
		49,12,49,1041,9,49,1,49,1,49,1,49,5,49,1046,8,49,10,49,12,49,1049,9,49,
		1,49,5,49,1052,8,49,10,49,12,49,1055,9,49,3,49,1057,8,49,1,49,5,49,1060,
		8,49,10,49,12,49,1063,9,49,1,49,1,49,1,49,1,49,5,49,1069,8,49,10,49,12,
		49,1072,9,49,1,49,5,49,1075,8,49,10,49,12,49,1078,9,49,1,49,5,49,1081,
		8,49,10,49,12,49,1084,9,49,3,49,1086,8,49,1,50,1,50,1,51,3,51,1091,8,51,
		1,51,3,51,1094,8,51,1,51,3,51,1097,8,51,1,51,1,51,3,51,1101,8,51,1,51,
		1,51,3,51,1105,8,51,1,51,3,51,1108,8,51,1,51,1,51,3,51,1112,8,51,1,52,
		3,52,1115,8,52,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,5,53,1126,
		8,53,10,53,12,53,1129,9,53,1,53,1,53,3,53,1133,8,53,1,54,1,54,1,54,1,54,
		1,55,1,55,1,55,3,55,1142,8,55,1,55,3,55,1145,8,55,1,55,1,55,1,55,1,56,
		1,56,1,56,1,56,1,57,1,57,1,57,1,57,1,58,1,58,1,58,1,58,5,58,1162,8,58,
		10,58,12,58,1165,9,58,1,58,1,58,1,59,1,59,3,59,1171,8,59,1,60,1,60,1,61,
		1,61,1,61,1,61,5,61,1179,8,61,10,61,12,61,1182,9,61,1,61,1,61,3,61,1186,
		8,61,1,61,1,61,3,61,1190,8,61,1,62,1,62,1,62,1,62,1,62,1,63,1,63,5,63,
		1199,8,63,10,63,12,63,1202,9,63,1,63,1,63,5,63,1206,8,63,10,63,12,63,1209,
		9,63,3,63,1211,8,63,1,63,1,63,5,63,1215,8,63,10,63,12,63,1218,9,63,5,63,
		1220,8,63,10,63,12,63,1223,9,63,1,63,3,63,1226,8,63,1,63,5,63,1229,8,63,
		10,63,12,63,1232,9,63,1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,65,1,65,1,65,
		1,65,1,65,1,66,1,66,1,66,1,66,1,67,1,67,1,68,3,68,1253,8,68,1,68,1,68,
		3,68,1257,8,68,1,68,3,68,1260,8,68,1,68,1,68,3,68,1264,8,68,1,68,1,68,
		5,68,1268,8,68,10,68,12,68,1271,9,68,1,68,1,68,1,69,1,69,1,69,1,69,1,70,
		1,70,1,70,1,70,1,71,1,71,1,71,1,71,1,72,1,72,1,72,1,72,1,73,1,73,5,73,
		1293,8,73,10,73,12,73,1296,9,73,1,73,1,73,1,73,4,73,1301,8,73,11,73,12,
		73,1302,1,73,1,73,1,73,4,73,1308,8,73,11,73,12,73,1309,3,73,1312,8,73,
		1,73,5,73,1315,8,73,10,73,12,73,1318,9,73,1,73,1,73,1,74,1,74,1,74,1,74,
		1,74,5,74,1327,8,74,10,74,12,74,1330,9,74,1,74,5,74,1333,8,74,10,74,12,
		74,1336,9,74,1,74,5,74,1339,8,74,10,74,12,74,1342,9,74,1,74,1,74,1,74,
		0,2,14,38,75,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
		42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,
		90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,
		128,130,132,134,136,138,140,142,144,146,148,0,16,1,0,34,35,1,0,22,23,1,
		0,94,95,1,0,90,93,1,0,128,130,1,0,31,32,1,0,133,134,2,0,9,9,127,127,1,
		0,11,13,1,0,61,62,3,0,21,21,23,23,36,36,3,0,96,96,98,98,111,111,2,0,11,
		13,15,15,3,0,14,14,18,20,37,37,1,0,85,86,14,0,51,51,65,65,74,74,82,83,
		88,89,97,97,99,99,101,101,103,103,106,106,109,111,115,115,117,117,119,
		119,1537,0,155,1,0,0,0,2,168,1,0,0,0,4,174,1,0,0,0,6,179,1,0,0,0,8,196,
		1,0,0,0,10,199,1,0,0,0,12,207,1,0,0,0,14,434,1,0,0,0,16,567,1,0,0,0,18,
		569,1,0,0,0,20,571,1,0,0,0,22,575,1,0,0,0,24,577,1,0,0,0,26,579,1,0,0,
		0,28,581,1,0,0,0,30,586,1,0,0,0,32,588,1,0,0,0,34,591,1,0,0,0,36,607,1,
		0,0,0,38,632,1,0,0,0,40,643,1,0,0,0,42,647,1,0,0,0,44,654,1,0,0,0,46,657,
		1,0,0,0,48,664,1,0,0,0,50,670,1,0,0,0,52,677,1,0,0,0,54,684,1,0,0,0,56,
		689,1,0,0,0,58,707,1,0,0,0,60,723,1,0,0,0,62,728,1,0,0,0,64,730,1,0,0,
		0,66,742,1,0,0,0,68,744,1,0,0,0,70,751,1,0,0,0,72,753,1,0,0,0,74,758,1,
		0,0,0,76,783,1,0,0,0,78,824,1,0,0,0,80,826,1,0,0,0,82,828,1,0,0,0,84,830,
		1,0,0,0,86,861,1,0,0,0,88,863,1,0,0,0,90,865,1,0,0,0,92,867,1,0,0,0,94,
		1011,1,0,0,0,96,1016,1,0,0,0,98,1085,1,0,0,0,100,1087,1,0,0,0,102,1090,
		1,0,0,0,104,1114,1,0,0,0,106,1132,1,0,0,0,108,1134,1,0,0,0,110,1138,1,
		0,0,0,112,1149,1,0,0,0,114,1153,1,0,0,0,116,1157,1,0,0,0,118,1170,1,0,
		0,0,120,1172,1,0,0,0,122,1185,1,0,0,0,124,1191,1,0,0,0,126,1196,1,0,0,
		0,128,1235,1,0,0,0,130,1240,1,0,0,0,132,1245,1,0,0,0,134,1249,1,0,0,0,
		136,1252,1,0,0,0,138,1274,1,0,0,0,140,1278,1,0,0,0,142,1282,1,0,0,0,144,
		1286,1,0,0,0,146,1290,1,0,0,0,148,1321,1,0,0,0,150,154,3,6,3,0,151,154,
		3,8,4,0,152,154,5,2,0,0,153,150,1,0,0,0,153,151,1,0,0,0,153,152,1,0,0,
		0,154,157,1,0,0,0,155,153,1,0,0,0,155,156,1,0,0,0,156,158,1,0,0,0,157,
		155,1,0,0,0,158,159,3,2,1,0,159,160,5,0,0,1,160,1,1,0,0,0,161,167,3,14,
		7,0,162,167,3,136,68,0,163,167,3,94,47,0,164,167,5,2,0,0,165,167,3,4,2,
		0,166,161,1,0,0,0,166,162,1,0,0,0,166,163,1,0,0,0,166,164,1,0,0,0,166,
		165,1,0,0,0,167,170,1,0,0,0,168,166,1,0,0,0,168,169,1,0,0,0,169,3,1,0,
		0,0,170,168,1,0,0,0,171,175,3,74,37,0,172,175,3,58,29,0,173,175,5,2,0,
		0,174,171,1,0,0,0,174,172,1,0,0,0,174,173,1,0,0,0,175,176,1,0,0,0,176,
		174,1,0,0,0,176,177,1,0,0,0,177,5,1,0,0,0,178,180,5,66,0,0,179,178,1,0,
		0,0,179,180,1,0,0,0,180,181,1,0,0,0,181,182,5,6,0,0,182,193,3,10,5,0,183,
		187,5,46,0,0,184,186,5,2,0,0,185,184,1,0,0,0,186,189,1,0,0,0,187,185,1,
		0,0,0,187,188,1,0,0,0,188,190,1,0,0,0,189,187,1,0,0,0,190,192,3,10,5,0,
		191,183,1,0,0,0,192,195,1,0,0,0,193,191,1,0,0,0,193,194,1,0,0,0,194,7,
		1,0,0,0,195,193,1,0,0,0,196,197,5,7,0,0,197,198,3,10,5,0,198,9,1,0,0,0,
		199,204,5,127,0,0,200,201,5,48,0,0,201,203,5,127,0,0,202,200,1,0,0,0,203,
		206,1,0,0,0,204,202,1,0,0,0,204,205,1,0,0,0,205,11,1,0,0,0,206,204,1,0,
		0,0,207,216,5,44,0,0,208,211,5,2,0,0,209,211,3,14,7,0,210,208,1,0,0,0,
		210,209,1,0,0,0,211,214,1,0,0,0,212,210,1,0,0,0,212,213,1,0,0,0,213,217,
		1,0,0,0,214,212,1,0,0,0,215,217,3,66,33,0,216,212,1,0,0,0,216,215,1,0,
		0,0,217,218,1,0,0,0,218,219,5,45,0,0,219,13,1,0,0,0,220,221,6,7,-1,0,221,
		222,5,113,0,0,222,435,3,14,7,61,223,224,5,66,0,0,224,435,3,14,7,58,225,
		226,5,84,0,0,226,435,3,14,7,39,227,230,3,98,49,0,228,229,5,52,0,0,229,
		231,3,38,19,0,230,228,1,0,0,0,230,231,1,0,0,0,231,232,1,0,0,0,232,233,
		5,112,0,0,233,234,3,14,7,37,234,435,1,0,0,0,235,236,7,0,0,0,236,237,3,
		122,61,0,237,238,3,14,7,36,238,435,1,0,0,0,239,240,5,75,0,0,240,435,3,
		38,19,0,241,242,5,77,0,0,242,435,3,14,7,34,243,245,7,1,0,0,244,243,1,0,
		0,0,244,245,1,0,0,0,245,246,1,0,0,0,246,249,5,127,0,0,247,248,5,52,0,0,
		248,250,3,38,19,0,249,247,1,0,0,0,249,250,1,0,0,0,250,251,1,0,0,0,251,
		252,3,120,60,0,252,253,3,14,7,32,253,435,1,0,0,0,254,255,5,49,0,0,255,
		435,3,14,7,27,256,435,5,49,0,0,257,258,5,73,0,0,258,435,3,22,11,0,259,
		261,3,58,29,0,260,259,1,0,0,0,261,262,1,0,0,0,262,260,1,0,0,0,262,263,
		1,0,0,0,263,264,1,0,0,0,264,265,3,14,7,24,265,435,1,0,0,0,266,270,3,42,
		21,0,267,269,5,2,0,0,268,267,1,0,0,0,269,272,1,0,0,0,270,268,1,0,0,0,270,
		271,1,0,0,0,271,276,1,0,0,0,272,270,1,0,0,0,273,275,3,46,23,0,274,273,
		1,0,0,0,275,278,1,0,0,0,276,274,1,0,0,0,276,277,1,0,0,0,277,282,1,0,0,
		0,278,276,1,0,0,0,279,281,5,2,0,0,280,279,1,0,0,0,281,284,1,0,0,0,282,
		280,1,0,0,0,282,283,1,0,0,0,283,286,1,0,0,0,284,282,1,0,0,0,285,287,3,
		48,24,0,286,285,1,0,0,0,286,287,1,0,0,0,287,435,1,0,0,0,288,292,3,50,25,
		0,289,291,5,2,0,0,290,289,1,0,0,0,291,294,1,0,0,0,292,290,1,0,0,0,292,
		293,1,0,0,0,293,298,1,0,0,0,294,292,1,0,0,0,295,297,3,52,26,0,296,295,
		1,0,0,0,297,300,1,0,0,0,298,296,1,0,0,0,298,299,1,0,0,0,299,304,1,0,0,
		0,300,298,1,0,0,0,301,303,5,2,0,0,302,301,1,0,0,0,303,306,1,0,0,0,304,
		302,1,0,0,0,304,305,1,0,0,0,305,308,1,0,0,0,306,304,1,0,0,0,307,309,3,
		48,24,0,308,307,1,0,0,0,308,309,1,0,0,0,309,435,1,0,0,0,310,312,5,69,0,
		0,311,313,5,38,0,0,312,311,1,0,0,0,312,313,1,0,0,0,313,315,1,0,0,0,314,
		316,7,1,0,0,315,314,1,0,0,0,315,316,1,0,0,0,316,317,1,0,0,0,317,323,5,
		127,0,0,318,320,5,46,0,0,319,321,7,1,0,0,320,319,1,0,0,0,320,321,1,0,0,
		0,321,322,1,0,0,0,322,324,5,127,0,0,323,318,1,0,0,0,323,324,1,0,0,0,324,
		326,1,0,0,0,325,327,5,39,0,0,326,325,1,0,0,0,326,327,1,0,0,0,327,328,1,
		0,0,0,328,329,5,53,0,0,329,330,3,14,7,0,330,331,1,0,0,0,331,332,5,111,
		0,0,332,333,3,14,7,19,333,435,1,0,0,0,334,335,5,69,0,0,335,336,3,14,7,
		0,336,337,5,111,0,0,337,338,3,14,7,18,338,435,1,0,0,0,339,340,5,71,0,0,
		340,341,3,14,7,0,341,342,5,111,0,0,342,343,3,14,7,17,343,435,1,0,0,0,344,
		435,3,124,62,0,345,349,3,108,54,0,346,348,3,110,55,0,347,346,1,0,0,0,348,
		351,1,0,0,0,349,347,1,0,0,0,349,350,1,0,0,0,350,353,1,0,0,0,351,349,1,
		0,0,0,352,354,3,114,57,0,353,352,1,0,0,0,353,354,1,0,0,0,354,356,1,0,0,
		0,355,357,3,112,56,0,356,355,1,0,0,0,356,357,1,0,0,0,357,435,1,0,0,0,358,
		359,5,26,0,0,359,435,3,14,7,14,360,435,5,26,0,0,361,362,5,30,0,0,362,363,
		3,14,7,0,363,364,5,111,0,0,364,365,3,14,7,12,365,435,1,0,0,0,366,375,5,
		70,0,0,367,372,3,14,7,0,368,369,5,46,0,0,369,371,3,14,7,0,370,368,1,0,
		0,0,371,374,1,0,0,0,372,370,1,0,0,0,372,373,1,0,0,0,373,376,1,0,0,0,374,
		372,1,0,0,0,375,367,1,0,0,0,375,376,1,0,0,0,376,377,1,0,0,0,377,435,5,
		43,0,0,378,387,5,42,0,0,379,384,3,14,7,0,380,381,5,46,0,0,381,383,3,14,
		7,0,382,380,1,0,0,0,383,386,1,0,0,0,384,382,1,0,0,0,384,385,1,0,0,0,385,
		388,1,0,0,0,386,384,1,0,0,0,387,379,1,0,0,0,387,388,1,0,0,0,388,389,1,
		0,0,0,389,435,5,43,0,0,390,408,5,42,0,0,391,392,5,42,0,0,392,393,3,14,
		7,0,393,394,5,46,0,0,394,395,3,14,7,0,395,405,5,43,0,0,396,397,5,46,0,
		0,397,398,5,42,0,0,398,399,3,14,7,0,399,400,5,46,0,0,400,401,3,14,7,0,
		401,402,5,43,0,0,402,404,1,0,0,0,403,396,1,0,0,0,404,407,1,0,0,0,405,403,
		1,0,0,0,405,406,1,0,0,0,406,409,1,0,0,0,407,405,1,0,0,0,408,391,1,0,0,
		0,408,409,1,0,0,0,409,410,1,0,0,0,410,435,5,43,0,0,411,435,3,16,8,0,412,
		435,3,12,6,0,413,415,3,10,5,0,414,416,3,116,58,0,415,414,1,0,0,0,415,416,
		1,0,0,0,416,418,1,0,0,0,417,419,3,56,28,0,418,417,1,0,0,0,418,419,1,0,
		0,0,419,435,1,0,0,0,420,421,5,38,0,0,421,426,3,14,7,0,422,423,5,46,0,0,
		423,425,3,14,7,0,424,422,1,0,0,0,425,428,1,0,0,0,426,424,1,0,0,0,426,427,
		1,0,0,0,427,430,1,0,0,0,428,426,1,0,0,0,429,431,5,46,0,0,430,429,1,0,0,
		0,430,431,1,0,0,0,431,432,1,0,0,0,432,433,5,39,0,0,433,435,1,0,0,0,434,
		220,1,0,0,0,434,223,1,0,0,0,434,225,1,0,0,0,434,227,1,0,0,0,434,235,1,
		0,0,0,434,239,1,0,0,0,434,241,1,0,0,0,434,244,1,0,0,0,434,254,1,0,0,0,
		434,256,1,0,0,0,434,257,1,0,0,0,434,260,1,0,0,0,434,266,1,0,0,0,434,288,
		1,0,0,0,434,310,1,0,0,0,434,334,1,0,0,0,434,339,1,0,0,0,434,344,1,0,0,
		0,434,345,1,0,0,0,434,358,1,0,0,0,434,360,1,0,0,0,434,361,1,0,0,0,434,
		366,1,0,0,0,434,378,1,0,0,0,434,390,1,0,0,0,434,411,1,0,0,0,434,412,1,
		0,0,0,434,413,1,0,0,0,434,420,1,0,0,0,435,555,1,0,0,0,436,437,10,62,0,
		0,437,438,5,135,0,0,438,554,3,14,7,63,439,440,10,60,0,0,440,441,5,42,0,
		0,441,442,3,14,7,0,442,443,5,43,0,0,443,444,5,111,0,0,444,445,3,14,7,61,
		445,554,1,0,0,0,446,447,10,59,0,0,447,448,5,102,0,0,448,554,3,14,7,59,
		449,450,10,57,0,0,450,451,5,100,0,0,451,554,3,14,7,58,452,453,10,56,0,
		0,453,454,5,104,0,0,454,554,3,14,7,57,455,456,10,55,0,0,456,457,5,107,
		0,0,457,554,3,14,7,56,458,459,10,54,0,0,459,460,5,108,0,0,460,554,3,14,
		7,55,461,462,10,53,0,0,462,463,5,96,0,0,463,554,3,14,7,54,464,465,10,52,
		0,0,465,466,5,98,0,0,466,554,3,14,7,53,467,468,10,51,0,0,468,469,5,116,
		0,0,469,554,3,14,7,52,470,471,10,50,0,0,471,472,5,118,0,0,472,554,3,14,
		7,51,473,474,10,49,0,0,474,475,7,2,0,0,475,554,3,14,7,50,476,477,10,48,
		0,0,477,478,7,3,0,0,478,554,3,14,7,49,479,480,10,46,0,0,480,481,5,84,0,
		0,481,554,3,14,7,47,482,483,10,44,0,0,483,484,5,78,0,0,484,554,3,14,7,
		45,485,486,10,42,0,0,486,487,5,73,0,0,487,554,3,14,7,43,488,489,10,38,
		0,0,489,490,5,56,0,0,490,554,3,14,7,39,491,492,10,33,0,0,492,493,5,50,
		0,0,493,554,3,14,7,34,494,495,10,31,0,0,495,496,5,120,0,0,496,554,3,14,
		7,32,497,498,10,30,0,0,498,499,5,121,0,0,499,554,3,14,7,31,500,501,10,
		29,0,0,501,502,5,49,0,0,502,554,3,14,7,30,503,504,10,2,0,0,504,505,3,120,
		60,0,505,506,3,14,7,3,506,554,1,0,0,0,507,508,10,47,0,0,508,509,5,58,0,
		0,509,554,3,38,19,0,510,513,10,45,0,0,511,512,5,87,0,0,512,514,3,14,7,
		0,513,511,1,0,0,0,514,515,1,0,0,0,515,513,1,0,0,0,515,516,1,0,0,0,516,
		554,1,0,0,0,517,520,10,43,0,0,518,519,5,81,0,0,519,521,3,14,7,0,520,518,
		1,0,0,0,521,522,1,0,0,0,522,520,1,0,0,0,522,523,1,0,0,0,523,554,1,0,0,
		0,524,525,10,41,0,0,525,526,5,54,0,0,526,554,3,38,19,0,527,528,10,40,0,
		0,528,529,5,55,0,0,529,554,3,38,19,0,530,531,10,28,0,0,531,554,5,49,0,
		0,532,533,10,22,0,0,533,554,3,44,22,0,534,535,10,20,0,0,535,554,3,54,27,
		0,536,537,10,7,0,0,537,554,5,2,0,0,538,539,10,6,0,0,539,554,5,59,0,0,540,
		543,10,3,0,0,541,542,5,48,0,0,542,544,5,127,0,0,543,541,1,0,0,0,544,545,
		1,0,0,0,545,543,1,0,0,0,545,546,1,0,0,0,546,548,1,0,0,0,547,549,3,116,
		58,0,548,547,1,0,0,0,548,549,1,0,0,0,549,551,1,0,0,0,550,552,3,56,28,0,
		551,550,1,0,0,0,551,552,1,0,0,0,552,554,1,0,0,0,553,436,1,0,0,0,553,439,
		1,0,0,0,553,446,1,0,0,0,553,449,1,0,0,0,553,452,1,0,0,0,553,455,1,0,0,
		0,553,458,1,0,0,0,553,461,1,0,0,0,553,464,1,0,0,0,553,467,1,0,0,0,553,
		470,1,0,0,0,553,473,1,0,0,0,553,476,1,0,0,0,553,479,1,0,0,0,553,482,1,
		0,0,0,553,485,1,0,0,0,553,488,1,0,0,0,553,491,1,0,0,0,553,494,1,0,0,0,
		553,497,1,0,0,0,553,500,1,0,0,0,553,503,1,0,0,0,553,507,1,0,0,0,553,510,
		1,0,0,0,553,517,1,0,0,0,553,524,1,0,0,0,553,527,1,0,0,0,553,530,1,0,0,
		0,553,532,1,0,0,0,553,534,1,0,0,0,553,536,1,0,0,0,553,538,1,0,0,0,553,
		540,1,0,0,0,554,557,1,0,0,0,555,553,1,0,0,0,555,556,1,0,0,0,556,15,1,0,
		0,0,557,555,1,0,0,0,558,568,3,20,10,0,559,568,3,22,11,0,560,568,3,24,12,
		0,561,568,3,26,13,0,562,568,3,28,14,0,563,568,3,30,15,0,564,568,3,32,16,
		0,565,568,3,34,17,0,566,568,3,18,9,0,567,558,1,0,0,0,567,559,1,0,0,0,567,
		560,1,0,0,0,567,561,1,0,0,0,567,562,1,0,0,0,567,563,1,0,0,0,567,564,1,
		0,0,0,567,565,1,0,0,0,567,566,1,0,0,0,568,17,1,0,0,0,569,570,5,33,0,0,
		570,19,1,0,0,0,571,572,5,38,0,0,572,573,3,14,7,0,573,574,5,39,0,0,574,
		21,1,0,0,0,575,576,7,4,0,0,576,23,1,0,0,0,577,578,5,131,0,0,578,25,1,0,
		0,0,579,580,7,5,0,0,580,27,1,0,0,0,581,584,7,6,0,0,582,583,5,52,0,0,583,
		585,3,36,18,0,584,582,1,0,0,0,584,585,1,0,0,0,585,29,1,0,0,0,586,587,5,
		132,0,0,587,31,1,0,0,0,588,589,5,38,0,0,589,590,5,39,0,0,590,33,1,0,0,
		0,591,592,5,60,0,0,592,35,1,0,0,0,593,595,3,58,29,0,594,593,1,0,0,0,595,
		598,1,0,0,0,596,594,1,0,0,0,596,597,1,0,0,0,597,599,1,0,0,0,598,596,1,
		0,0,0,599,608,5,127,0,0,600,602,3,58,29,0,601,600,1,0,0,0,602,605,1,0,
		0,0,603,601,1,0,0,0,603,604,1,0,0,0,604,606,1,0,0,0,605,603,1,0,0,0,606,
		608,3,10,5,0,607,596,1,0,0,0,607,603,1,0,0,0,608,37,1,0,0,0,609,610,6,
		19,-1,0,610,633,3,36,18,0,611,612,5,38,0,0,612,615,3,40,20,0,613,614,5,
		78,0,0,614,616,3,40,20,0,615,613,1,0,0,0,616,617,1,0,0,0,617,615,1,0,0,
		0,617,618,1,0,0,0,618,619,1,0,0,0,619,620,5,39,0,0,620,633,1,0,0,0,621,
		622,5,38,0,0,622,625,3,40,20,0,623,624,5,46,0,0,624,626,3,40,20,0,625,
		623,1,0,0,0,626,627,1,0,0,0,627,625,1,0,0,0,627,628,1,0,0,0,628,629,1,
		0,0,0,629,630,5,39,0,0,630,633,1,0,0,0,631,633,3,60,30,0,632,609,1,0,0,
		0,632,611,1,0,0,0,632,621,1,0,0,0,632,631,1,0,0,0,633,638,1,0,0,0,634,
		635,10,1,0,0,635,637,3,116,58,0,636,634,1,0,0,0,637,640,1,0,0,0,638,636,
		1,0,0,0,638,639,1,0,0,0,639,39,1,0,0,0,640,638,1,0,0,0,641,642,5,127,0,
		0,642,644,5,52,0,0,643,641,1,0,0,0,643,644,1,0,0,0,644,645,1,0,0,0,645,
		646,3,38,19,0,646,41,1,0,0,0,647,648,5,63,0,0,648,649,3,14,7,0,649,652,
		5,111,0,0,650,653,3,12,6,0,651,653,3,14,7,0,652,650,1,0,0,0,652,651,1,
		0,0,0,653,43,1,0,0,0,654,655,5,63,0,0,655,656,3,14,7,0,656,45,1,0,0,0,
		657,658,5,52,0,0,658,659,3,14,7,0,659,662,5,111,0,0,660,663,3,12,6,0,661,
		663,3,14,7,0,662,660,1,0,0,0,662,661,1,0,0,0,663,47,1,0,0,0,664,665,5,
		52,0,0,665,668,5,111,0,0,666,669,3,12,6,0,667,669,3,14,7,0,668,666,1,0,
		0,0,668,667,1,0,0,0,669,49,1,0,0,0,670,671,5,67,0,0,671,672,3,14,7,0,672,
		675,5,111,0,0,673,676,3,12,6,0,674,676,3,14,7,0,675,673,1,0,0,0,675,674,
		1,0,0,0,676,51,1,0,0,0,677,678,5,68,0,0,678,679,3,14,7,0,679,682,5,111,
		0,0,680,683,3,12,6,0,681,683,3,14,7,0,682,680,1,0,0,0,682,681,1,0,0,0,
		683,53,1,0,0,0,684,685,5,67,0,0,685,686,3,14,7,0,686,55,1,0,0,0,687,688,
		5,127,0,0,688,690,5,52,0,0,689,687,1,0,0,0,689,690,1,0,0,0,690,691,1,0,
		0,0,691,692,3,14,7,0,692,701,1,0,0,0,693,696,5,46,0,0,694,695,5,127,0,
		0,695,697,5,52,0,0,696,694,1,0,0,0,696,697,1,0,0,0,697,698,1,0,0,0,698,
		700,3,14,7,0,699,693,1,0,0,0,700,703,1,0,0,0,701,699,1,0,0,0,701,702,1,
		0,0,0,702,705,1,0,0,0,703,701,1,0,0,0,704,706,5,47,0,0,705,704,1,0,0,0,
		705,706,1,0,0,0,706,57,1,0,0,0,707,710,5,90,0,0,708,709,7,7,0,0,709,711,
		5,52,0,0,710,708,1,0,0,0,710,711,1,0,0,0,711,712,1,0,0,0,712,714,3,38,
		19,0,713,715,3,56,28,0,714,713,1,0,0,0,714,715,1,0,0,0,715,716,1,0,0,0,
		716,720,5,91,0,0,717,719,5,2,0,0,718,717,1,0,0,0,719,722,1,0,0,0,720,718,
		1,0,0,0,720,721,1,0,0,0,721,59,1,0,0,0,722,720,1,0,0,0,723,724,3,36,18,
		0,724,725,5,42,0,0,725,726,3,76,38,0,726,727,5,43,0,0,727,61,1,0,0,0,728,
		729,7,8,0,0,729,63,1,0,0,0,730,732,3,62,31,0,731,733,7,1,0,0,732,731,1,
		0,0,0,732,733,1,0,0,0,733,734,1,0,0,0,734,737,5,127,0,0,735,736,5,52,0,
		0,736,738,3,38,19,0,737,735,1,0,0,0,737,738,1,0,0,0,738,739,1,0,0,0,739,
		740,5,111,0,0,740,741,3,14,7,0,741,65,1,0,0,0,742,743,5,48,0,0,743,67,
		1,0,0,0,744,745,7,8,0,0,745,69,1,0,0,0,746,752,3,68,34,0,747,749,5,15,
		0,0,748,750,5,13,0,0,749,748,1,0,0,0,749,750,1,0,0,0,750,752,1,0,0,0,751,
		746,1,0,0,0,751,747,1,0,0,0,752,71,1,0,0,0,753,754,5,16,0,0,754,73,1,0,
		0,0,755,757,3,58,29,0,756,755,1,0,0,0,757,760,1,0,0,0,758,756,1,0,0,0,
		758,759,1,0,0,0,759,763,1,0,0,0,760,758,1,0,0,0,761,764,3,68,34,0,762,
		764,3,70,35,0,763,761,1,0,0,0,763,762,1,0,0,0,763,764,1,0,0,0,764,766,
		1,0,0,0,765,767,3,72,36,0,766,765,1,0,0,0,766,767,1,0,0,0,767,768,1,0,
		0,0,768,769,3,86,43,0,769,771,5,127,0,0,770,772,3,76,38,0,771,770,1,0,
		0,0,771,772,1,0,0,0,772,774,1,0,0,0,773,775,3,98,49,0,774,773,1,0,0,0,
		774,775,1,0,0,0,775,777,1,0,0,0,776,778,3,84,42,0,777,776,1,0,0,0,777,
		778,1,0,0,0,778,781,1,0,0,0,779,780,5,111,0,0,780,782,3,106,53,0,781,779,
		1,0,0,0,781,782,1,0,0,0,782,75,1,0,0,0,783,784,5,42,0,0,784,789,3,78,39,
		0,785,786,5,46,0,0,786,788,3,78,39,0,787,785,1,0,0,0,788,791,1,0,0,0,789,
		787,1,0,0,0,789,790,1,0,0,0,790,792,1,0,0,0,791,789,1,0,0,0,792,793,5,
		43,0,0,793,77,1,0,0,0,794,796,3,80,40,0,795,794,1,0,0,0,796,799,1,0,0,
		0,797,795,1,0,0,0,797,798,1,0,0,0,798,801,1,0,0,0,799,797,1,0,0,0,800,
		802,3,82,41,0,801,800,1,0,0,0,801,802,1,0,0,0,802,803,1,0,0,0,803,813,
		5,127,0,0,804,805,5,52,0,0,805,810,3,38,19,0,806,807,5,46,0,0,807,809,
		3,38,19,0,808,806,1,0,0,0,809,812,1,0,0,0,810,808,1,0,0,0,810,811,1,0,
		0,0,811,814,1,0,0,0,812,810,1,0,0,0,813,804,1,0,0,0,813,814,1,0,0,0,814,
		825,1,0,0,0,815,816,7,9,0,0,816,819,5,127,0,0,817,818,5,52,0,0,818,820,
		3,38,19,0,819,817,1,0,0,0,819,820,1,0,0,0,820,822,1,0,0,0,821,823,3,104,
		52,0,822,821,1,0,0,0,822,823,1,0,0,0,823,825,1,0,0,0,824,797,1,0,0,0,824,
		815,1,0,0,0,825,79,1,0,0,0,826,827,7,10,0,0,827,81,1,0,0,0,828,829,7,11,
		0,0,829,83,1,0,0,0,830,831,5,52,0,0,831,836,3,38,19,0,832,833,5,46,0,0,
		833,835,3,38,19,0,834,832,1,0,0,0,835,838,1,0,0,0,836,834,1,0,0,0,836,
		837,1,0,0,0,837,85,1,0,0,0,838,836,1,0,0,0,839,841,5,21,0,0,840,839,1,
		0,0,0,840,841,1,0,0,0,841,842,1,0,0,0,842,862,5,8,0,0,843,845,5,23,0,0,
		844,846,5,66,0,0,845,844,1,0,0,0,845,846,1,0,0,0,846,848,1,0,0,0,847,849,
		5,84,0,0,848,847,1,0,0,0,848,849,1,0,0,0,849,850,1,0,0,0,850,862,5,8,0,
		0,851,853,5,23,0,0,852,854,5,84,0,0,853,852,1,0,0,0,853,854,1,0,0,0,854,
		856,1,0,0,0,855,857,5,66,0,0,856,855,1,0,0,0,856,857,1,0,0,0,857,858,1,
		0,0,0,858,862,5,8,0,0,859,862,5,10,0,0,860,862,5,9,0,0,861,840,1,0,0,0,
		861,843,1,0,0,0,861,851,1,0,0,0,861,859,1,0,0,0,861,860,1,0,0,0,862,87,
		1,0,0,0,863,864,7,12,0,0,864,89,1,0,0,0,865,866,5,17,0,0,866,91,1,0,0,
		0,867,868,7,13,0,0,868,93,1,0,0,0,869,871,3,58,29,0,870,869,1,0,0,0,871,
		874,1,0,0,0,872,870,1,0,0,0,872,873,1,0,0,0,873,876,1,0,0,0,874,872,1,
		0,0,0,875,877,3,88,44,0,876,875,1,0,0,0,876,877,1,0,0,0,877,879,1,0,0,
		0,878,880,3,90,45,0,879,878,1,0,0,0,879,880,1,0,0,0,880,884,1,0,0,0,881,
		883,3,92,46,0,882,881,1,0,0,0,883,886,1,0,0,0,884,882,1,0,0,0,884,885,
		1,0,0,0,885,888,1,0,0,0,886,884,1,0,0,0,887,889,7,1,0,0,888,887,1,0,0,
		0,888,889,1,0,0,0,889,890,1,0,0,0,890,892,5,127,0,0,891,893,3,76,38,0,
		892,891,1,0,0,0,892,893,1,0,0,0,893,895,1,0,0,0,894,896,3,98,49,0,895,
		894,1,0,0,0,895,896,1,0,0,0,896,899,1,0,0,0,897,898,5,52,0,0,898,900,3,
		38,19,0,899,897,1,0,0,0,899,900,1,0,0,0,900,909,1,0,0,0,901,905,5,111,
		0,0,902,904,5,2,0,0,903,902,1,0,0,0,904,907,1,0,0,0,905,903,1,0,0,0,905,
		906,1,0,0,0,906,908,1,0,0,0,907,905,1,0,0,0,908,910,3,14,7,0,909,901,1,
		0,0,0,909,910,1,0,0,0,910,1012,1,0,0,0,911,913,3,58,29,0,912,911,1,0,0,
		0,913,916,1,0,0,0,914,912,1,0,0,0,914,915,1,0,0,0,915,918,1,0,0,0,916,
		914,1,0,0,0,917,919,3,88,44,0,918,917,1,0,0,0,918,919,1,0,0,0,919,921,
		1,0,0,0,920,922,3,90,45,0,921,920,1,0,0,0,921,922,1,0,0,0,922,926,1,0,
		0,0,923,925,3,92,46,0,924,923,1,0,0,0,925,928,1,0,0,0,926,924,1,0,0,0,
		926,927,1,0,0,0,927,930,1,0,0,0,928,926,1,0,0,0,929,931,7,1,0,0,930,929,
		1,0,0,0,930,931,1,0,0,0,931,932,1,0,0,0,932,934,5,127,0,0,933,935,3,76,
		38,0,934,933,1,0,0,0,934,935,1,0,0,0,935,936,1,0,0,0,936,937,5,52,0,0,
		937,1012,3,38,19,0,938,940,3,58,29,0,939,938,1,0,0,0,940,943,1,0,0,0,941,
		939,1,0,0,0,941,942,1,0,0,0,942,945,1,0,0,0,943,941,1,0,0,0,944,946,3,
		88,44,0,945,944,1,0,0,0,945,946,1,0,0,0,946,948,1,0,0,0,947,949,3,90,45,
		0,948,947,1,0,0,0,948,949,1,0,0,0,949,953,1,0,0,0,950,952,3,92,46,0,951,
		950,1,0,0,0,952,955,1,0,0,0,953,951,1,0,0,0,953,954,1,0,0,0,954,960,1,
		0,0,0,955,953,1,0,0,0,956,961,5,135,0,0,957,958,5,38,0,0,958,959,5,135,
		0,0,959,961,5,39,0,0,960,956,1,0,0,0,960,957,1,0,0,0,961,962,1,0,0,0,962,
		965,3,98,49,0,963,964,5,52,0,0,964,966,3,38,19,0,965,963,1,0,0,0,965,966,
		1,0,0,0,966,967,1,0,0,0,967,971,5,111,0,0,968,970,5,2,0,0,969,968,1,0,
		0,0,970,973,1,0,0,0,971,969,1,0,0,0,971,972,1,0,0,0,972,974,1,0,0,0,973,
		971,1,0,0,0,974,975,3,14,7,0,975,1012,1,0,0,0,976,978,3,58,29,0,977,976,
		1,0,0,0,978,981,1,0,0,0,979,977,1,0,0,0,979,980,1,0,0,0,980,983,1,0,0,
		0,981,979,1,0,0,0,982,984,3,88,44,0,983,982,1,0,0,0,983,984,1,0,0,0,984,
		986,1,0,0,0,985,987,3,90,45,0,986,985,1,0,0,0,986,987,1,0,0,0,987,991,
		1,0,0,0,988,990,3,92,46,0,989,988,1,0,0,0,990,993,1,0,0,0,991,989,1,0,
		0,0,991,992,1,0,0,0,992,994,1,0,0,0,993,991,1,0,0,0,994,996,5,127,0,0,
		995,997,3,76,38,0,996,995,1,0,0,0,996,997,1,0,0,0,997,1000,1,0,0,0,998,
		999,5,52,0,0,999,1001,3,38,19,0,1000,998,1,0,0,0,1000,1001,1,0,0,0,1001,
		1002,1,0,0,0,1002,1006,5,111,0,0,1003,1005,5,2,0,0,1004,1003,1,0,0,0,1005,
		1008,1,0,0,0,1006,1004,1,0,0,0,1006,1007,1,0,0,0,1007,1009,1,0,0,0,1008,
		1006,1,0,0,0,1009,1012,3,146,73,0,1010,1012,3,148,74,0,1011,872,1,0,0,
		0,1011,914,1,0,0,0,1011,941,1,0,0,0,1011,979,1,0,0,0,1011,1010,1,0,0,0,
		1012,95,1,0,0,0,1013,1017,3,88,44,0,1014,1017,3,90,45,0,1015,1017,3,92,
		46,0,1016,1013,1,0,0,0,1016,1014,1,0,0,0,1016,1015,1,0,0,0,1017,1021,1,
		0,0,0,1018,1020,3,92,46,0,1019,1018,1,0,0,0,1020,1023,1,0,0,0,1021,1019,
		1,0,0,0,1021,1022,1,0,0,0,1022,1024,1,0,0,0,1023,1021,1,0,0,0,1024,1025,
		5,111,0,0,1025,1030,5,44,0,0,1026,1029,5,2,0,0,1027,1029,3,94,47,0,1028,
		1026,1,0,0,0,1028,1027,1,0,0,0,1029,1032,1,0,0,0,1030,1028,1,0,0,0,1030,
		1031,1,0,0,0,1031,1033,1,0,0,0,1032,1030,1,0,0,0,1033,1034,5,45,0,0,1034,
		97,1,0,0,0,1035,1039,5,38,0,0,1036,1038,5,2,0,0,1037,1036,1,0,0,0,1038,
		1041,1,0,0,0,1039,1037,1,0,0,0,1039,1040,1,0,0,0,1040,1056,1,0,0,0,1041,
		1039,1,0,0,0,1042,1053,3,102,51,0,1043,1047,5,46,0,0,1044,1046,5,2,0,0,
		1045,1044,1,0,0,0,1046,1049,1,0,0,0,1047,1045,1,0,0,0,1047,1048,1,0,0,
		0,1048,1050,1,0,0,0,1049,1047,1,0,0,0,1050,1052,3,102,51,0,1051,1043,1,
		0,0,0,1052,1055,1,0,0,0,1053,1051,1,0,0,0,1053,1054,1,0,0,0,1054,1057,
		1,0,0,0,1055,1053,1,0,0,0,1056,1042,1,0,0,0,1056,1057,1,0,0,0,1057,1061,
		1,0,0,0,1058,1060,5,2,0,0,1059,1058,1,0,0,0,1060,1063,1,0,0,0,1061,1059,
		1,0,0,0,1061,1062,1,0,0,0,1062,1064,1,0,0,0,1063,1061,1,0,0,0,1064,1086,
		5,39,0,0,1065,1076,3,102,51,0,1066,1070,5,46,0,0,1067,1069,5,2,0,0,1068,
		1067,1,0,0,0,1069,1072,1,0,0,0,1070,1068,1,0,0,0,1070,1071,1,0,0,0,1071,
		1073,1,0,0,0,1072,1070,1,0,0,0,1073,1075,3,102,51,0,1074,1066,1,0,0,0,
		1075,1078,1,0,0,0,1076,1074,1,0,0,0,1076,1077,1,0,0,0,1077,1082,1,0,0,
		0,1078,1076,1,0,0,0,1079,1081,5,2,0,0,1080,1079,1,0,0,0,1081,1084,1,0,
		0,0,1082,1080,1,0,0,0,1082,1083,1,0,0,0,1083,1086,1,0,0,0,1084,1082,1,
		0,0,0,1085,1035,1,0,0,0,1085,1065,1,0,0,0,1086,99,1,0,0,0,1087,1088,7,
		14,0,0,1088,101,1,0,0,0,1089,1091,3,58,29,0,1090,1089,1,0,0,0,1090,1091,
		1,0,0,0,1091,1093,1,0,0,0,1092,1094,7,1,0,0,1093,1092,1,0,0,0,1093,1094,
		1,0,0,0,1094,1096,1,0,0,0,1095,1097,3,100,50,0,1096,1095,1,0,0,0,1096,
		1097,1,0,0,0,1097,1098,1,0,0,0,1098,1100,5,127,0,0,1099,1101,5,49,0,0,
		1100,1099,1,0,0,0,1100,1101,1,0,0,0,1101,1104,1,0,0,0,1102,1103,5,52,0,
		0,1103,1105,3,38,19,0,1104,1102,1,0,0,0,1104,1105,1,0,0,0,1105,1107,1,
		0,0,0,1106,1108,3,104,52,0,1107,1106,1,0,0,0,1107,1108,1,0,0,0,1108,1111,
		1,0,0,0,1109,1110,5,111,0,0,1110,1112,3,14,7,0,1111,1109,1,0,0,0,1111,
		1112,1,0,0,0,1112,103,1,0,0,0,1113,1115,5,63,0,0,1114,1113,1,0,0,0,1114,
		1115,1,0,0,0,1115,1116,1,0,0,0,1116,1117,5,44,0,0,1117,1118,3,14,7,0,1118,
		1119,5,45,0,0,1119,105,1,0,0,0,1120,1127,5,44,0,0,1121,1126,3,94,47,0,
		1122,1126,3,74,37,0,1123,1126,5,2,0,0,1124,1126,3,96,48,0,1125,1121,1,
		0,0,0,1125,1122,1,0,0,0,1125,1123,1,0,0,0,1125,1124,1,0,0,0,1126,1129,
		1,0,0,0,1127,1125,1,0,0,0,1127,1128,1,0,0,0,1128,1130,1,0,0,0,1129,1127,
		1,0,0,0,1130,1133,5,45,0,0,1131,1133,3,38,19,0,1132,1120,1,0,0,0,1132,
		1131,1,0,0,0,1133,107,1,0,0,0,1134,1135,5,25,0,0,1135,1136,5,111,0,0,1136,
		1137,3,14,7,0,1137,109,1,0,0,0,1138,1144,5,27,0,0,1139,1140,5,127,0,0,
		1140,1142,5,52,0,0,1141,1139,1,0,0,0,1141,1142,1,0,0,0,1142,1143,1,0,0,
		0,1143,1145,3,38,19,0,1144,1141,1,0,0,0,1144,1145,1,0,0,0,1145,1146,1,
		0,0,0,1146,1147,5,111,0,0,1147,1148,3,14,7,0,1148,111,1,0,0,0,1149,1150,
		5,28,0,0,1150,1151,5,111,0,0,1151,1152,3,14,7,0,1152,113,1,0,0,0,1153,
		1154,5,29,0,0,1154,1155,5,111,0,0,1155,1156,3,14,7,0,1156,115,1,0,0,0,
		1157,1158,5,42,0,0,1158,1163,3,118,59,0,1159,1160,5,46,0,0,1160,1162,3,
		118,59,0,1161,1159,1,0,0,0,1162,1165,1,0,0,0,1163,1161,1,0,0,0,1163,1164,
		1,0,0,0,1164,1166,1,0,0,0,1165,1163,1,0,0,0,1166,1167,5,43,0,0,1167,117,
		1,0,0,0,1168,1171,3,38,19,0,1169,1171,3,14,7,0,1170,1168,1,0,0,0,1170,
		1169,1,0,0,0,1171,119,1,0,0,0,1172,1173,7,15,0,0,1173,121,1,0,0,0,1174,
		1175,5,38,0,0,1175,1180,3,38,19,0,1176,1177,5,46,0,0,1177,1179,3,38,19,
		0,1178,1176,1,0,0,0,1179,1182,1,0,0,0,1180,1178,1,0,0,0,1180,1181,1,0,
		0,0,1181,1183,1,0,0,0,1182,1180,1,0,0,0,1183,1184,5,39,0,0,1184,1186,1,
		0,0,0,1185,1174,1,0,0,0,1185,1186,1,0,0,0,1186,1189,1,0,0,0,1187,1188,
		5,52,0,0,1188,1190,3,38,19,0,1189,1187,1,0,0,0,1189,1190,1,0,0,0,1190,
		123,1,0,0,0,1191,1192,5,72,0,0,1192,1193,3,14,7,0,1193,1194,5,111,0,0,
		1194,1195,3,126,63,0,1195,125,1,0,0,0,1196,1200,5,44,0,0,1197,1199,5,2,
		0,0,1198,1197,1,0,0,0,1199,1202,1,0,0,0,1200,1198,1,0,0,0,1200,1201,1,
		0,0,0,1201,1210,1,0,0,0,1202,1200,1,0,0,0,1203,1207,3,128,64,0,1204,1206,
		5,2,0,0,1205,1204,1,0,0,0,1206,1209,1,0,0,0,1207,1205,1,0,0,0,1207,1208,
		1,0,0,0,1208,1211,1,0,0,0,1209,1207,1,0,0,0,1210,1203,1,0,0,0,1210,1211,
		1,0,0,0,1211,1221,1,0,0,0,1212,1216,3,130,65,0,1213,1215,5,2,0,0,1214,
		1213,1,0,0,0,1215,1218,1,0,0,0,1216,1214,1,0,0,0,1216,1217,1,0,0,0,1217,
		1220,1,0,0,0,1218,1216,1,0,0,0,1219,1212,1,0,0,0,1220,1223,1,0,0,0,1221,
		1219,1,0,0,0,1221,1222,1,0,0,0,1222,1225,1,0,0,0,1223,1221,1,0,0,0,1224,
		1226,3,132,66,0,1225,1224,1,0,0,0,1225,1226,1,0,0,0,1226,1230,1,0,0,0,
		1227,1229,5,2,0,0,1228,1227,1,0,0,0,1229,1232,1,0,0,0,1230,1228,1,0,0,
		0,1230,1231,1,0,0,0,1231,1233,1,0,0,0,1232,1230,1,0,0,0,1233,1234,5,45,
		0,0,1234,127,1,0,0,0,1235,1236,5,63,0,0,1236,1237,3,134,67,0,1237,1238,
		5,111,0,0,1238,1239,3,14,7,0,1239,129,1,0,0,0,1240,1241,5,52,0,0,1241,
		1242,3,134,67,0,1242,1243,5,111,0,0,1243,1244,3,14,7,0,1244,131,1,0,0,
		0,1245,1246,5,52,0,0,1246,1247,5,111,0,0,1247,1248,3,14,7,0,1248,133,1,
		0,0,0,1249,1250,3,14,7,0,1250,135,1,0,0,0,1251,1253,7,1,0,0,1252,1251,
		1,0,0,0,1252,1253,1,0,0,0,1253,1254,1,0,0,0,1254,1256,5,127,0,0,1255,1257,
		3,76,38,0,1256,1255,1,0,0,0,1256,1257,1,0,0,0,1257,1259,1,0,0,0,1258,1260,
		3,98,49,0,1259,1258,1,0,0,0,1259,1260,1,0,0,0,1260,1263,1,0,0,0,1261,1262,
		5,52,0,0,1262,1264,3,38,19,0,1263,1261,1,0,0,0,1263,1264,1,0,0,0,1264,
		1265,1,0,0,0,1265,1269,5,111,0,0,1266,1268,5,2,0,0,1267,1266,1,0,0,0,1268,
		1271,1,0,0,0,1269,1267,1,0,0,0,1269,1270,1,0,0,0,1270,1272,1,0,0,0,1271,
		1269,1,0,0,0,1272,1273,3,14,7,0,1273,137,1,0,0,0,1274,1275,5,123,0,0,1275,
		1276,5,111,0,0,1276,1277,3,14,7,0,1277,139,1,0,0,0,1278,1279,5,124,0,0,
		1279,1280,5,111,0,0,1280,1281,3,14,7,0,1281,141,1,0,0,0,1282,1283,5,125,
		0,0,1283,1284,5,111,0,0,1284,1285,3,14,7,0,1285,143,1,0,0,0,1286,1287,
		5,126,0,0,1287,1288,5,111,0,0,1288,1289,3,14,7,0,1289,145,1,0,0,0,1290,
		1294,5,44,0,0,1291,1293,5,2,0,0,1292,1291,1,0,0,0,1293,1296,1,0,0,0,1294,
		1292,1,0,0,0,1294,1295,1,0,0,0,1295,1311,1,0,0,0,1296,1294,1,0,0,0,1297,
		1301,3,138,69,0,1298,1301,3,140,70,0,1299,1301,5,2,0,0,1300,1297,1,0,0,
		0,1300,1298,1,0,0,0,1300,1299,1,0,0,0,1301,1302,1,0,0,0,1302,1300,1,0,
		0,0,1302,1303,1,0,0,0,1303,1312,1,0,0,0,1304,1308,3,142,71,0,1305,1308,
		3,144,72,0,1306,1308,5,2,0,0,1307,1304,1,0,0,0,1307,1305,1,0,0,0,1307,
		1306,1,0,0,0,1308,1309,1,0,0,0,1309,1307,1,0,0,0,1309,1310,1,0,0,0,1310,
		1312,1,0,0,0,1311,1300,1,0,0,0,1311,1307,1,0,0,0,1312,1316,1,0,0,0,1313,
		1315,5,2,0,0,1314,1313,1,0,0,0,1315,1318,1,0,0,0,1316,1314,1,0,0,0,1316,
		1317,1,0,0,0,1317,1319,1,0,0,0,1318,1316,1,0,0,0,1319,1320,5,45,0,0,1320,
		147,1,0,0,0,1321,1322,5,19,0,0,1322,1323,5,133,0,0,1323,1324,5,111,0,0,
		1324,1334,5,44,0,0,1325,1327,5,2,0,0,1326,1325,1,0,0,0,1327,1330,1,0,0,
		0,1328,1326,1,0,0,0,1328,1329,1,0,0,0,1329,1331,1,0,0,0,1330,1328,1,0,
		0,0,1331,1333,3,94,47,0,1332,1328,1,0,0,0,1333,1336,1,0,0,0,1334,1332,
		1,0,0,0,1334,1335,1,0,0,0,1335,1340,1,0,0,0,1336,1334,1,0,0,0,1337,1339,
		5,2,0,0,1338,1337,1,0,0,0,1339,1342,1,0,0,0,1340,1338,1,0,0,0,1340,1341,
		1,0,0,0,1341,1343,1,0,0,0,1342,1340,1,0,0,0,1343,1344,5,45,0,0,1344,149,
		1,0,0,0,183,153,155,166,168,174,176,179,187,193,204,210,212,216,230,244,
		249,262,270,276,282,286,292,298,304,308,312,315,320,323,326,349,353,356,
		372,375,384,387,405,408,415,418,426,430,434,515,522,545,548,551,553,555,
		567,584,596,603,607,617,627,632,638,643,652,662,668,675,682,689,696,701,
		705,710,714,720,732,737,749,751,758,763,766,771,774,777,781,789,797,801,
		810,813,819,822,824,836,840,845,848,853,856,861,872,876,879,884,888,892,
		895,899,905,909,914,918,921,926,930,934,941,945,948,953,960,965,971,979,
		983,986,991,996,1000,1006,1011,1016,1021,1028,1030,1039,1047,1053,1056,
		1061,1070,1076,1082,1085,1090,1093,1096,1100,1104,1107,1111,1114,1125,
		1127,1132,1141,1144,1163,1170,1180,1185,1189,1200,1207,1210,1216,1221,
		1225,1230,1252,1256,1259,1263,1269,1294,1300,1302,1307,1309,1311,1316,
		1328,1334,1340
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Dassie.Parser
