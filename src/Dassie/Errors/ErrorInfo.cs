using Dassie.Text.Tooltips;

namespace Dassie.Errors;

/// <summary>
/// Represents an error in the code.
/// </summary>
public class ErrorInfo
{
    /// <summary>
    /// The kind of error that the current <see cref="ErrorInfo"/> instance represents.
    /// </summary>
    public ErrorKind ErrorCode { get; set; }

    /// <summary>
    /// Supports custom error codes to be used by analyzers.
    /// </summary>
    public string CustomErrorCode { get; set; }

    /// <summary>
    /// The error message as emitted by the compiler.
    /// </summary>
    public string ErrorMessage { get; set; }

    /// <summary>
    /// The path to the source file the error occured in.
    /// </summary>
    public string File { get; set; }

    /// <summary>
    /// The starting position of the error in the file.
    /// </summary>
    public (int Line, int Column) CodePosition { get; set; }

    /// <summary>
    /// Allows hiding the code position for errors with no specific location.
    /// </summary>
    public bool HideCodePosition { get; set; }

    /// <summary>
    /// The length of the error.
    /// </summary>
    public int Length { get; set; }

    /// <summary>
    /// The severity of the error.
    /// </summary>
    public Severity Severity { get; set; }

    /// <summary>
    /// The source of the error.
    /// </summary>
    public ErrorSource Source { get; set; } = ErrorSource.Compiler;

    /// <summary>
    /// A tooltip representing the error in an editor.
    /// </summary>
    public Tooltip ToolTip { get; set; }

    /// <summary>
    /// Advanced information regarding the error that could be useful in debugging the error.
    /// </summary>
    public string Tip { get; set; }

    /// <summary>
    /// Converts the error into a human-readable format.
    /// </summary>
    /// <returns>A friendly representation of the error.</returns>
    public override string ToString()
    {
        string code = ErrorCode == ErrorKind.CustomError ? CustomErrorCode : ErrorCode.ToString().Split('_')[0];
        return $"{File} ({CodePosition.Item1},{CodePosition.Item2}): error {code}: {ErrorMessage}\r\n";
    }
}

/// <summary>
/// Specifies the severity of an error.
/// </summary>
public enum Severity
{
    /// <summary>
    /// An informative message.
    /// </summary>
    Information,
    /// <summary>
    /// A warning message.
    /// </summary>
    Warning,
    /// <summary>
    /// An error message.
    /// </summary>
    Error,
    /// <summary>
    /// A diagnostic build log message that is not caused by an error in the code.
    /// </summary>
    BuildLogMessage
}

/// <summary>
/// Specifies the source of an error.
/// </summary>
public enum ErrorSource
{
    /// <summary>
    /// Specifies that an error was generated by the compiler.
    /// </summary>
    Compiler,
    /// <summary>
    /// Specifies that an error was generated by an analyzer.
    /// </summary>
    Analysis,
    /// <summary>
    /// Specifies that an error was generated by an external tool.
    /// </summary>
    External
}